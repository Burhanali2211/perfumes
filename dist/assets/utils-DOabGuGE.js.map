{"version":3,"file":"utils-DOabGuGE.js","sources":["../../src/utils/errorHandling.ts","../../src/utils/performance/core.ts","../../src/utils/cache.ts","../../src/utils/advancedThemeSystem.ts","../../src/utils/accessibilityEnhancements.tsx","../../src/utils/database/init.ts","../../src/utils/serviceWorker.ts","../../src/utils/preloader.ts","../../src/utils/dataExport.ts","../../src/utils/validation.ts","../../src/utils/accessibilityUtils.ts","../../src/utils/responsiveDesign.ts"],"sourcesContent":["import { PostgrestError } from '@supabase/supabase-js';\r\n\r\nexport interface AppError {\r\n  type: 'network' | 'database' | 'validation' | 'authentication' | 'authorization' | 'unknown';\r\n  message: string;\r\n  userMessage: string;\r\n  code?: string;\r\n  details?: Record<string, unknown>;\r\n}\r\n\r\nexport const handleSupabaseError = (error: PostgrestError | Error): AppError => {\r\n  // Handle Supabase PostgrestError\r\n  if ('code' in error && 'details' in error) {\r\n    const pgError = error as PostgrestError;\r\n    \r\n    switch (pgError.code) {\r\n      case 'PGRST116':\r\n        return {\r\n          type: 'database',\r\n          message: pgError.message,\r\n          userMessage: 'The requested resource was not found.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      case 'PGRST301':\r\n        return {\r\n          type: 'database',\r\n          message: pgError.message,\r\n          userMessage: 'Database connection failed. Please try again later.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      case '23505': // Unique constraint violation\r\n        return {\r\n          type: 'validation',\r\n          message: pgError.message,\r\n          userMessage: 'This item already exists. Please use a different value.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      case '23503': // Foreign key constraint violation\r\n        return {\r\n          type: 'validation',\r\n          message: pgError.message,\r\n          userMessage: 'Cannot complete this action due to related data.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      case '42501': // Insufficient privilege\r\n        return {\r\n          type: 'authorization',\r\n          message: pgError.message,\r\n          userMessage: 'You do not have permission to perform this action.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      case 'PGRST204': // RLS policy violation\r\n        return {\r\n          type: 'authorization',\r\n          message: pgError.message,\r\n          userMessage: 'Access denied. You do not have permission to access this resource.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n      \r\n      default:\r\n        return {\r\n          type: 'database',\r\n          message: pgError.message,\r\n          userMessage: 'A database error occurred. Please try again.',\r\n          code: pgError.code,\r\n          details: pgError.details\r\n        };\r\n    }\r\n  }\r\n  \r\n  // Handle network errors\r\n  if (error.message.includes('fetch') || error.message.includes('Network')) {\r\n    return {\r\n      type: 'network',\r\n      message: error.message,\r\n      userMessage: 'Network connection failed. Please check your internet connection and try again.'\r\n    };\r\n  }\r\n  \r\n  // Handle authentication errors\r\n  if (error.message.includes('JWT') || error.message.includes('auth') || error.message.includes('token')) {\r\n    return {\r\n      type: 'authentication',\r\n      message: error.message,\r\n      userMessage: 'Your session has expired. Please sign in again.'\r\n    };\r\n  }\r\n  \r\n  // Enhanced infinite recursion error detection\r\n  if (error.message.includes('infinite recursion') || \r\n      error.message.includes('maximum recursion depth') ||\r\n      error.message.includes('stack depth limit') ||\r\n      error.message.includes('too much recursion')) {\r\n    return {\r\n      type: 'database',\r\n      message: error.message,\r\n      userMessage: 'Database configuration error detected. Row Level Security policies may have infinite recursion. Please run the RLS fixes script.'\r\n    };\r\n  }\r\n  \r\n  // Handle timeout errors\r\n  if (error.message.includes('timeout') || error.message.includes('timed out')) {\r\n    return {\r\n      type: 'network',\r\n      message: error.message,\r\n      userMessage: 'Request timed out. Please try again.'\r\n    };\r\n  }\r\n  \r\n  // Handle RLS policy errors\r\n  if (error.message.includes('row-level security') || \r\n      error.message.includes('policy') ||\r\n      error.message.includes('RLS')) {\r\n    return {\r\n      type: 'authorization',\r\n      message: error.message,\r\n      userMessage: 'Access restricted by security policies. Please check your permissions.'\r\n    };\r\n  }\r\n  \r\n  // Default error handling\r\n  return {\r\n    type: 'unknown',\r\n    message: error.message,\r\n    userMessage: 'An unexpected error occurred. Please try again.'\r\n  };\r\n};\r\n\r\n// Enhanced RLS error detection and reporting\r\nexport const detectRLSRecursionError = (error: Error): boolean => {\r\n  const errorPatterns = [\r\n    'infinite recursion',\r\n    'maximum recursion depth',\r\n    'stack depth limit',\r\n    'too much recursion',\r\n    'recursive policy',\r\n    'circular dependency in policies'\r\n  ];\r\n  \r\n  return errorPatterns.some(pattern => \r\n    error.message.toLowerCase().includes(pattern.toLowerCase())\r\n  );\r\n};\r\n\r\n// Function to suggest RLS fixes\r\nexport const generateRLSFixSuggestion = (error: Error): string => {\r\n  if (detectRLSRecursionError(error)) {\r\n    return `\r\nüîß RLS Infinite Recursion Detected!\r\n\r\nThis error is caused by Row Level Security policies that reference the same table they protect.\r\n\r\nTo fix this:\r\n1. Run the 'rls_policies_fix.sql' script in your Supabase SQL Editor\r\n2. This will replace problematic policies with safe, non-recursive alternatives\r\n3. The fix includes role caching to prevent recursion\r\n\r\nThe error occurred in: ${error.message.substring(0, 100)}...\r\n    `;\r\n  }\r\n  \r\n  if (error.message.includes('row-level security') || error.message.includes('policy')) {\r\n    return `\r\nüõ°Ô∏è RLS Policy Issue Detected!\r\n\r\nThis appears to be a Row Level Security policy restriction.\r\n\r\nTo troubleshoot:\r\n1. Check if you have the correct role/permissions\r\n2. Verify RLS policies are properly configured\r\n3. Run 'rls_policies_fix.sql' to ensure policies are correct\r\n\r\nError details: ${error.message}\r\n    `;\r\n  }\r\n  \r\n  return '';\r\n};\r\n\r\n// Error logging removed for production\r\n\r\nexport const createRetryableAction = <T>(\r\n  action: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n) => {\r\n  return async (): Promise<T> => {\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await action();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt === maxRetries) {\r\n          throw lastError;\r\n        }\r\n        \r\n        // Wait before retrying\r\n        await new Promise(resolve => setTimeout(resolve, delay * attempt));\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  };\r\n};\r\n\r\n// Enhanced form validation with RLS awareness\r\nexport const validateFormData = (data: Record<string, unknown>, rules: Record<string, any>): string[] => {\r\n  const errors: string[] = [];\r\n  \r\n  for (const [field, rule] of Object.entries(rules)) {\r\n    const value = data[field];\r\n    \r\n    if (rule.required && (!value || value.toString().trim() === '')) {\r\n      errors.push(`${field} is required`);\r\n      continue;\r\n    }\r\n    \r\n    if (value && rule.minLength && value.toString().length < rule.minLength) {\r\n      errors.push(`${field} must be at least ${rule.minLength} characters`);\r\n    }\r\n    \r\n    if (value && rule.maxLength && value.toString().length > rule.maxLength) {\r\n      errors.push(`${field} must be no more than ${rule.maxLength} characters`);\r\n    }\r\n    \r\n    if (value && rule.pattern && !rule.pattern.test(value.toString())) {\r\n      errors.push(`${field} format is invalid`);\r\n    }\r\n    \r\n    if (value && rule.min && Number(value) < rule.min) {\r\n      errors.push(`${field} must be at least ${rule.min}`);\r\n    }\r\n    \r\n    if (value && rule.max && Number(value) > rule.max) {\r\n      errors.push(`${field} must be no more than ${rule.max}`);\r\n    }\r\n    \r\n    // RLS-aware role validation\r\n    if (field === 'role' && value) {\r\n      const validRoles = ['admin', 'seller', 'customer'];\r\n      if (!validRoles.includes(value.toString())) {\r\n        errors.push(`${field} must be one of: ${validRoles.join(', ')}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nexport const sanitizeInput = (input: string): string => {\r\n  return input\r\n    .replace(/[<>]/g, '') // Remove potential HTML tags\r\n    .trim();\r\n};\r\n\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\nexport const isValidUrl = (url: string): boolean => {\r\n  try {\r\n    new URL(url);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","// Performance monitoring utilities\r\nexport class PerformanceMonitor {\r\n  private static instance: PerformanceMonitor;\r\n  private measurements: Map<string, number> = new Map();\r\n  private metrics: Array<{ name: string; duration: number; timestamp: number; success: boolean }> = [];\r\n  private maxMetrics = 100;\r\n\r\n  static getInstance(): PerformanceMonitor {\r\n    if (!PerformanceMonitor.instance) {\r\n      PerformanceMonitor.instance = new PerformanceMonitor();\r\n    }\r\n    return PerformanceMonitor.instance;\r\n  }\r\n\r\n  startMeasure(name: string): void {\r\n    this.measurements.set(name, performance.now());\r\n  }\r\n\r\n  endMeasure(name: string, success: boolean = true): number {\r\n    const startTime = this.measurements.get(name);\r\n    if (!startTime) {\r\n      // Instead of just warning, start the measurement if it doesn't exist\r\n      // This prevents the \"not started\" warnings\r\n      this.startMeasure(name);\r\n      return 0;\r\n    }\r\n\r\n    const endTime = performance.now();\r\n    const duration = endTime - startTime;\r\n\r\n    // Store metric\r\n    this.metrics.push({\r\n      name,\r\n      duration,\r\n      timestamp: Date.now(),\r\n      success\r\n    });\r\n\r\n    // Keep only recent metrics\r\n    if (this.metrics.length > this.maxMetrics) {\r\n      this.metrics.shift();\r\n    }\r\n\r\n    // Performance logging removed for production\r\n\r\n    this.measurements.delete(name);\r\n    return duration;\r\n  }\r\n\r\n  getStats() {\r\n    const recentMetrics = this.metrics.filter(m => Date.now() - m.timestamp < 5 * 60 * 1000); // Last 5 minutes\r\n    const successfulMetrics = recentMetrics.filter(m => m.success);\r\n\r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        successRate: 0,\r\n        averageTime: 0,\r\n        slowestOperation: null,\r\n        fastestOperation: null\r\n      };\r\n    }\r\n\r\n    const durations = successfulMetrics.map(m => m.duration);\r\n    const averageTime = durations.reduce((sum, d) => sum + d, 0) / durations.length;\r\n    const slowestOperation = recentMetrics.reduce((slowest, current) =>\r\n      current.duration > slowest.duration ? current : slowest\r\n    );\r\n    const fastestOperation = recentMetrics.reduce((fastest, current) =>\r\n      current.duration < fastest.duration ? current : fastest\r\n    );\r\n\r\n    return {\r\n      totalRequests: recentMetrics.length,\r\n      successRate: (successfulMetrics.length / recentMetrics.length) * 100,\r\n      averageTime,\r\n      slowestOperation,\r\n      fastestOperation\r\n    };\r\n  }\r\n\r\n  async measureAsync<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n    this.startMeasure(name);\r\n    try {\r\n      const result = await fn();\r\n      this.endMeasure(name);\r\n      return result;\r\n    } catch (error) {\r\n      this.endMeasure(name);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  measureSync<T>(name: string, fn: () => T): T {\r\n    this.startMeasure(name);\r\n    try {\r\n      const result = fn();\r\n      this.endMeasure(name);\r\n      return result;\r\n    } catch (error) {\r\n      this.endMeasure(name);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to debounce API calls\r\nexport function debounce<T extends (...args: unknown[]) => unknown>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n// Helper function to throttle API calls\r\nexport function throttle<T extends (...args: unknown[]) => unknown>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let inThrottle: boolean;\r\n  return (...args: Parameters<T>) => {\r\n    if (!inThrottle) {\r\n      func(...args);\r\n      inThrottle = true;\r\n      setTimeout(() => inThrottle = false, wait);\r\n    }\r\n  };\r\n}\r\n\r\n// Cache utility for API responses\r\nexport class SimpleCache {\r\n  private cache: Map<string, { data: unknown; timestamp: number; ttl: number }> = new Map();\r\n\r\n  set(key: string, data: unknown, ttl: number = 5 * 60 * 1000): void {\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  get(key: string): unknown | null {\r\n    const cached = this.cache.get(key);\r\n    if (!cached) return null;\r\n\r\n    if (Date.now() - cached.timestamp > cached.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return cached.data;\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return this.get(key) !== null;\r\n  }\r\n}\r\n\r\nexport const performanceMonitor = PerformanceMonitor.getInstance();\r\nexport const apiCache = new SimpleCache();\r\n","import { performanceMonitor } from './performance';\r\n\r\ninterface CacheEntry<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n  accessCount: number;\r\n  lastAccessed: number;\r\n  size: number;\r\n  priority: 'low' | 'medium' | 'high';\r\n  tags: string[];\r\n}\r\n\r\ninterface CacheStrategy {\r\n  maxSize: number; // Maximum cache size in bytes\r\n  maxEntries: number; // Maximum number of entries\r\n  defaultTTL: number; // Default TTL in milliseconds\r\n  gcInterval: number; // Garbage collection interval\r\n  compressionThreshold: number; // Size threshold for compression\r\n}\r\n\r\ninterface CacheStats {\r\n  hitRate: number;\r\n  totalRequests: number;\r\n  totalHits: number;\r\n  totalMisses: number;\r\n  totalSize: number;\r\n  entryCount: number;\r\n  gcRuns: number;\r\n  lastGC: number;\r\n}\r\n\r\nclass EnhancedCache {\r\n  private cache: Map<string, CacheEntry<any>> = new Map();\r\n  private strategy: CacheStrategy;\r\n  private stats: CacheStats = {\r\n    hitRate: 0,\r\n    totalRequests: 0,\r\n    totalHits: 0,\r\n    totalMisses: 0,\r\n    totalSize: 0,\r\n    entryCount: 0,\r\n    gcRuns: 0,\r\n    lastGC: Date.now()\r\n  };\r\n  private gcTimer: NodeJS.Timeout | null = null;\r\n  private backgroundUpdateQueue: Set<string> = new Set();\r\n\r\n  constructor(strategy: Partial<CacheStrategy> = {}) {\r\n    this.strategy = {\r\n      maxSize: 50 * 1024 * 1024, // 50MB\r\n      maxEntries: 1000,\r\n      defaultTTL: 5 * 60 * 1000, // 5 minutes\r\n      gcInterval: 60 * 1000, // 1 minute\r\n      compressionThreshold: 1024, // 1KB\r\n      ...strategy\r\n    };\r\n\r\n    this.startGarbageCollection();\r\n  }\r\n\r\n  /**\r\n   * Set data in cache with optional configuration\r\n   */\r\n  set<T>(\r\n    key: string, \r\n    data: T, \r\n    options: {\r\n      ttl?: number;\r\n      priority?: 'low' | 'medium' | 'high';\r\n      tags?: string[];\r\n      compress?: boolean;\r\n    } = {}\r\n  ): void {\r\n    performanceMonitor.startMeasure(`cache-set-${key}`);\r\n    const { \r\n      ttl = this.strategy.defaultTTL, \r\n      priority = 'medium', \r\n      tags = [], \r\n      compress = false \r\n    } = options;\r\n\r\n    const serializedData = this.serializeData(data, compress);\r\n    const size = this.calculateSize(serializedData);\r\n\r\n    // Check cache limits\r\n    if (this.shouldEvict(size)) {\r\n      this.evictEntries(size);\r\n    }\r\n\r\n    const entry: CacheEntry<T> = {\r\n      data: serializedData,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n      accessCount: 0,\r\n      lastAccessed: Date.now(),\r\n      size,\r\n      priority,\r\n      tags\r\n    };\r\n\r\n    this.cache.set(key, entry);\r\n    this.updateStats('set', size);\r\n\r\n    performanceMonitor.endMeasure(`cache-set-${key}`);\r\n  }\r\n\r\n  /**\r\n   * Get data from cache\r\n   */\r\n  get<T>(key: string): T | null {\r\n    performanceMonitor.startMeasure(`cache-get-${key}`);\r\n    this.stats.totalRequests++;\r\n\r\n    const entry = this.cache.get(key);\r\n    \r\n    if (!entry) {\r\n      this.stats.totalMisses++;\r\n      this.updateHitRate();\r\n      performanceMonitor.endMeasure(`cache-get-${key}`, false);\r\n      return null;\r\n    }\r\n\r\n    // Check if expired\r\n    if (this.isExpired(entry)) {\r\n      this.cache.delete(key);\r\n      this.stats.totalMisses++;\r\n      this.updateStats('delete', entry.size);\r\n      this.updateHitRate();\r\n      performanceMonitor.endMeasure(`cache-get-${key}`, false);\r\n      \r\n      // Queue for background update if high priority\r\n      if (entry.priority === 'high') {\r\n        this.queueBackgroundUpdate(key);\r\n      }\r\n      \r\n      return null;\r\n    }\r\n\r\n    // Update access metadata\r\n    entry.accessCount++;\r\n    entry.lastAccessed = Date.now();\r\n    \r\n    this.stats.totalHits++;\r\n    this.updateHitRate();\r\n    performanceMonitor.endMeasure(`cache-get-${key}`);\r\n    \r\n    return this.deserializeData(entry.data);\r\n  }\r\n\r\n  /**\r\n   * Check if key exists and is not expired\r\n   */\r\n  has(key: string): boolean {\r\n    const entry = this.cache.get(key);\r\n    return entry !== undefined && !this.isExpired(entry);\r\n  }\r\n\r\n  /**\r\n   * Delete entry from cache\r\n   */\r\n  delete(key: string): boolean {\r\n    const entry = this.cache.get(key);\r\n    if (entry) {\r\n      this.cache.delete(key);\r\n      this.updateStats('delete', entry.size);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Clear cache by tags\r\n   */\r\n  clearByTags(tags: string[]): number {\r\n    let cleared = 0;\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (entry.tags.some(tag => tags.includes(tag))) {\r\n        this.cache.delete(key);\r\n        this.updateStats('delete', entry.size);\r\n        cleared++;\r\n      }\r\n    }\r\n    return cleared;\r\n  }\r\n\r\n  /**\r\n   * Clear entire cache\r\n   */\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.stats = {\r\n      ...this.stats,\r\n      totalSize: 0,\r\n      entryCount: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics\r\n   */\r\n  getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Prefetch data and store in cache\r\n   */\r\n  async prefetch<T>(\r\n    key: string, \r\n    fetchFn: () => Promise<T>,\r\n    options: {\r\n      ttl?: number;\r\n      priority?: 'low' | 'medium' | 'high';\r\n      tags?: string[];\r\n    } = {}\r\n  ): Promise<T> {\r\n    try {\r\n      const data = await fetchFn();\r\n      this.set(key, data, { priority: 'high', ...options });\r\n      return data;\r\n    } catch (error) {\r\n      console.warn(`Prefetch failed for key ${key}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get data with fallback to fetch function\r\n   */\r\n  async getOrFetch<T>(\r\n    key: string,\r\n    fetchFn: () => Promise<T>,\r\n    options: {\r\n      ttl?: number;\r\n      priority?: 'low' | 'medium' | 'high';\r\n      tags?: string[];\r\n      staleWhileRevalidate?: boolean;\r\n    } = {}\r\n  ): Promise<T> {\r\n    const { staleWhileRevalidate = false, ...cacheOptions } = options;\r\n    \r\n    const cachedData = this.get<T>(key);\r\n    \r\n    if (cachedData !== null) {\r\n      // If stale-while-revalidate is enabled, update in background\r\n      if (staleWhileRevalidate) {\r\n        this.queueBackgroundUpdate(key, fetchFn, cacheOptions);\r\n      }\r\n      return cachedData;\r\n    }\r\n\r\n    // Fetch fresh data\r\n    try {\r\n      const freshData = await fetchFn();\r\n      this.set(key, freshData, cacheOptions);\r\n      return freshData;\r\n    } catch (error) {\r\n      console.error(`Fetch failed for key ${key}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private serializeData<T>(data: T, compress: boolean): any {\r\n    if (compress && typeof data === 'string') {\r\n      // Simple compression simulation (in real app, use proper compression)\r\n      return { compressed: true, data: data };\r\n    }\r\n    return data;\r\n  }\r\n\r\n  private deserializeData<T>(data: any): T {\r\n    if (data && data.compressed) {\r\n      return data.data;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  private calculateSize(data: any): number {\r\n    // Rough size calculation\r\n    return JSON.stringify(data).length * 2; // 2 bytes per character (UTF-16)\r\n  }\r\n\r\n  private isExpired(entry: CacheEntry<any>): boolean {\r\n    return Date.now() - entry.timestamp > entry.ttl;\r\n  }\r\n\r\n  private shouldEvict(newEntrySize: number): boolean {\r\n    return (\r\n      this.stats.totalSize + newEntrySize > this.strategy.maxSize ||\r\n      this.stats.entryCount >= this.strategy.maxEntries\r\n    );\r\n  }\r\n\r\n  private evictEntries(requiredSpace: number): void {\r\n    const entries = Array.from(this.cache.entries());\r\n    \r\n    // Sort by eviction priority (LRU + priority + access count)\r\n    entries.sort(([, a], [, b]) => {\r\n      // Priority order: low < medium < high\r\n      const priorityScore = { low: 1, medium: 2, high: 3 };\r\n      \r\n      if (a.priority !== b.priority) {\r\n        return priorityScore[a.priority] - priorityScore[b.priority];\r\n      }\r\n      \r\n      // Then by last accessed time (older first)\r\n      if (Math.abs(a.lastAccessed - b.lastAccessed) > 1000) {\r\n        return a.lastAccessed - b.lastAccessed;\r\n      }\r\n      \r\n      // Finally by access count (less accessed first)\r\n      return a.accessCount - b.accessCount;\r\n    });\r\n\r\n    let freedSpace = 0;\r\n    for (const [key, entry] of entries) {\r\n      if (freedSpace >= requiredSpace && this.stats.entryCount < this.strategy.maxEntries) {\r\n        break;\r\n      }\r\n      \r\n      this.cache.delete(key);\r\n      freedSpace += entry.size;\r\n      this.updateStats('delete', entry.size);\r\n    }\r\n  }\r\n\r\n  private updateStats(operation: 'set' | 'delete', size: number): void {\r\n    if (operation === 'set') {\r\n      this.stats.totalSize += size;\r\n      this.stats.entryCount++;\r\n    } else {\r\n      this.stats.totalSize -= size;\r\n      this.stats.entryCount--;\r\n    }\r\n  }\r\n\r\n  private updateHitRate(): void {\r\n    this.stats.hitRate = this.stats.totalRequests > 0 \r\n      ? (this.stats.totalHits / this.stats.totalRequests) * 100 \r\n      : 0;\r\n  }\r\n\r\n  private startGarbageCollection(): void {\r\n    this.gcTimer = setInterval(() => {\r\n      this.runGarbageCollection();\r\n    }, this.strategy.gcInterval);\r\n  }\r\n\r\n  private runGarbageCollection(): void {\r\n    const before = this.stats.entryCount;\r\n    const now = Date.now();\r\n    \r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (this.isExpired(entry)) {\r\n        this.cache.delete(key);\r\n        this.updateStats('delete', entry.size);\r\n      }\r\n    }\r\n    \r\n    this.stats.gcRuns++;\r\n    this.stats.lastGC = now;\r\n    \r\n    const cleaned = before - this.stats.entryCount;\r\n    if (cleaned > 0) {\r\n      console.log(`üßπ Cache GC: Cleaned ${cleaned} expired entries`);\r\n    }\r\n  }\r\n\r\n  private queueBackgroundUpdate(\r\n    key: string, \r\n    fetchFn?: () => Promise<any>,\r\n    options: any = {}\r\n  ): void {\r\n    if (this.backgroundUpdateQueue.has(key)) return;\r\n    \r\n    this.backgroundUpdateQueue.add(key);\r\n    \r\n    // Schedule background update\r\n    setTimeout(async () => {\r\n      try {\r\n        if (fetchFn) {\r\n          const freshData = await fetchFn();\r\n          this.set(key, freshData, options);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Background update failed for ${key}:`, error);\r\n      } finally {\r\n        this.backgroundUpdateQueue.delete(key);\r\n      }\r\n    }, 100); // Small delay to batch updates\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  destroy(): void {\r\n    if (this.gcTimer) {\r\n      clearInterval(this.gcTimer);\r\n      this.gcTimer = null;\r\n    }\r\n    this.clear();\r\n  }\r\n}\r\n\r\n// Cache instances for different use cases\r\nexport const primaryCache = new EnhancedCache({\r\n  maxSize: 25 * 1024 * 1024, // 25MB\r\n  maxEntries: 500,\r\n  defaultTTL: 5 * 60 * 1000, // 5 minutes\r\n});\r\n\r\nexport const imageCache = new EnhancedCache({\r\n  maxSize: 100 * 1024 * 1024, // 100MB for images\r\n  maxEntries: 200,\r\n  defaultTTL: 30 * 60 * 1000, // 30 minutes\r\n});\r\n\r\nexport const apiCache = new EnhancedCache({\r\n  maxSize: 10 * 1024 * 1024, // 10MB for API responses\r\n  maxEntries: 300,\r\n  defaultTTL: 2 * 60 * 1000, // 2 minutes\r\n});\r\n\r\nexport const userCache = new EnhancedCache({\r\n  maxSize: 5 * 1024 * 1024, // 5MB for user data\r\n  maxEntries: 100,\r\n  defaultTTL: 15 * 60 * 1000, // 15 minutes\r\n});\r\n\r\n// Legacy cache classes for backward compatibility\r\nexport const productCache = primaryCache;\r\nexport const categoryCache = primaryCache;\r\n\r\n// Utility functions for cache key generation\r\nexport const generateCacheKey = (prefix: string, params: Record<string, unknown> = {}): string => {\r\n  const sortedParams = Object.keys(params)\r\n    .sort()\r\n    .map(key => `${key}:${params[key]}`)\r\n    .join('|');\r\n  \r\n  return sortedParams ? `${prefix}:${sortedParams}` : prefix;\r\n};\r\n\r\n// Cache invalidation helpers\r\nexport const invalidateProductCache = (productId?: string) => {\r\n  if (productId) {\r\n    primaryCache.clearByTags([`product-${productId}`]);\r\n  } else {\r\n    primaryCache.clearByTags(['product']);\r\n  }\r\n};\r\n\r\nexport const invalidateCategoryCache = () => {\r\n  primaryCache.clearByTags(['category']);\r\n};\r\n\r\nexport const invalidateUserCache = (userId?: string) => {\r\n  if (userId) {\r\n    userCache.clearByTags([`user-${userId}`]);\r\n  } else {\r\n    userCache.clearByTags(['user']);\r\n  }\r\n};\r\n\r\n// Cache management utilities\r\nexport const cacheManager = {\r\n  /**\r\n   * Get overall cache statistics\r\n   */\r\n  getOverallStats() {\r\n    return {\r\n      primary: primaryCache.getStats(),\r\n      image: imageCache.getStats(),\r\n      api: apiCache.getStats(),\r\n      user: userCache.getStats()\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Clear all caches\r\n   */\r\n  clearAll() {\r\n    primaryCache.clear();\r\n    imageCache.clear();\r\n    apiCache.clear();\r\n    userCache.clear();\r\n  },\r\n\r\n  /**\r\n   * Clear caches by tags\r\n   */\r\n  clearByTags(tags: string[]) {\r\n    return {\r\n      primary: primaryCache.clearByTags(tags),\r\n      image: imageCache.clearByTags(tags),\r\n      api: apiCache.clearByTags(tags),\r\n      user: userCache.clearByTags(tags)\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Get cache health report\r\n   */\r\n  getHealthReport() {\r\n    const stats = this.getOverallStats();\r\n    const totalSize = Object.values(stats).reduce((sum, stat) => sum + stat.totalSize, 0);\r\n    const avgHitRate = Object.values(stats).reduce((sum, stat) => sum + stat.hitRate, 0) / 4;\r\n    \r\n    return {\r\n      totalSize: Math.round(totalSize / 1024 / 1024 * 100) / 100, // MB\r\n      averageHitRate: Math.round(avgHitRate * 100) / 100,\r\n      cacheUtilization: stats,\r\n      recommendations: this.generateRecommendations(stats)\r\n    };\r\n  },\r\n\r\n  generateRecommendations(stats: any): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    Object.entries(stats).forEach(([cacheName, stat]: [string, any]) => {\r\n      if (stat.hitRate < 50) {\r\n        recommendations.push(`${cacheName} cache hit rate is low (${stat.hitRate.toFixed(1)}%)`);\r\n      }\r\n      if (stat.totalSize > 20 * 1024 * 1024) {\r\n        recommendations.push(`${cacheName} cache is large (${(stat.totalSize / 1024 / 1024).toFixed(1)}MB)`);\r\n      }\r\n    });\r\n    \r\n    return recommendations;\r\n  }\r\n};\r\n\r\n// Legacy SimpleCache class for backward compatibility\r\nexport class SimpleCache {\r\n  private cache: Map<string, { data: unknown; timestamp: number; ttl: number }> = new Map();\r\n\r\n  set(key: string, data: unknown, ttl: number = 5 * 60 * 1000): void {\r\n    primaryCache.set(key, data, { ttl });\r\n  }\r\n\r\n  get(key: string): unknown | null {\r\n    return primaryCache.get(key);\r\n  }\r\n\r\n  clear(): void {\r\n    primaryCache.clear();\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return primaryCache.has(key);\r\n  }\r\n}\r\n\r\n// Original Cache class for backward compatibility\r\ninterface CacheItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  expiresAt: number;\r\n}\r\n\r\ninterface CacheOptions {\r\n  ttl?: number;\r\n  maxSize?: number;\r\n}\r\n\r\nclass Cache<T> {\r\n  private cache = new Map<string, CacheItem<T>>();\r\n  private defaultTTL: number;\r\n  private maxSize: number;\r\n\r\n  constructor(options: CacheOptions = {}) {\r\n    this.defaultTTL = options.ttl || 5 * 60 * 1000;\r\n    this.maxSize = options.maxSize || 100;\r\n  }\r\n\r\n  set(key: string, data: T, ttl?: number): void {\r\n    primaryCache.set(key, data, { ttl: ttl || this.defaultTTL });\r\n  }\r\n\r\n  get(key: string): T | null {\r\n    return primaryCache.get(key);\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return primaryCache.has(key);\r\n  }\r\n\r\n  delete(key: string): boolean {\r\n    return primaryCache.delete(key);\r\n  }\r\n\r\n  clear(): void {\r\n    primaryCache.clear();\r\n  }\r\n\r\n  getKeysMatching(pattern: string): string[] {\r\n    // Not implemented in enhanced cache, return empty array\r\n    return [];\r\n  }\r\n\r\n  invalidatePattern(pattern: string): void {\r\n    // Use tags-based invalidation instead\r\n    primaryCache.clearByTags([pattern]);\r\n  }\r\n\r\n  getStats() {\r\n    const stats = primaryCache.getStats();\r\n    return {\r\n      totalItems: stats.entryCount,\r\n      validItems: stats.entryCount,\r\n      expiredItems: 0,\r\n      maxSize: this.maxSize,\r\n      usage: (stats.entryCount / this.maxSize) * 100\r\n    };\r\n  }\r\n\r\n  cleanup(): void {\r\n    // Garbage collection is automatic in enhanced cache\r\n  }\r\n}\r\n\r\nexport default Cache;\r\n","import { useState, useEffect, useCallback, useMemo } from 'react';\n\n// Theme types\nexport type ThemeMode = 'light' | 'dark' | 'auto' | 'high-contrast' | 'custom';\nexport type ColorScheme = 'neutral' | 'warm' | 'cool' | 'vibrant' | 'monochrome';\nexport type FontScale = 'compact' | 'comfortable' | 'spacious';\nexport type BorderRadius = 'none' | 'small' | 'medium' | 'large' | 'full';\nexport type AnimationLevel = 'none' | 'reduced' | 'normal' | 'enhanced';\n\n// Color palette structure\nexport interface ColorPalette {\n  primary: Record<string, string>;\n  secondary: Record<string, string>;\n  accent: Record<string, string>;\n  neutral: Record<string, string>;\n  semantic: {\n    success: Record<string, string>;\n    warning: Record<string, string>;\n    error: Record<string, string>;\n    info: Record<string, string>;\n  };\n  background: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n    overlay: string;\n  };\n  text: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n    inverse: string;\n    disabled: string;\n  };\n  border: {\n    subtle: string;\n    default: string;\n    strong: string;\n    interactive: string;\n  };\n}\n\n// Typography configuration\nexport interface TypographyConfig {\n  fontFamily: {\n    sans: string[];\n    serif: string[];\n    mono: string[];\n    display: string[];\n  };\n  fontSize: Record<string, { size: string; lineHeight: string; letterSpacing?: string }>;\n  fontWeight: Record<string, number>;\n}\n\n// Spacing configuration\nexport interface SpacingConfig {\n  scale: number;\n  base: number;\n  sizes: Record<string, string>;\n}\n\n// Theme configuration\nexport interface ThemeConfig {\n  mode: ThemeMode;\n  colorScheme: ColorScheme;\n  colors: ColorPalette;\n  typography: TypographyConfig;\n  spacing: SpacingConfig;\n  borderRadius: BorderRadius;\n  animationLevel: AnimationLevel;\n  fontScale: FontScale;\n  customProperties: Record<string, string>;\n}\n\n// Theme preferences\nexport interface ThemePreferences {\n  mode: ThemeMode;\n  colorScheme: ColorScheme;\n  fontScale: FontScale;\n  borderRadius: BorderRadius;\n  animationLevel: AnimationLevel;\n  highContrast: boolean;\n  reducedMotion: boolean;\n  customColors?: Partial<ColorPalette>;\n  customTypography?: Partial<TypographyConfig>;\n}\n\n// Predefined color schemes\nexport const COLOR_SCHEMES: Record<ColorScheme, Partial<ColorPalette>> = {\n  neutral: {\n    primary: {\n      50: '#f8fafc',\n      100: '#f1f5f9',\n      500: '#475569',\n      600: '#334155',\n      700: '#1e293b',\n      900: '#020617'\n    },\n    secondary: {\n      50: '#fafaf9',\n      100: '#f5f5f4',\n      500: '#78716c',\n      600: '#57534e',\n      700: '#44403c',\n      900: '#1c1917'\n    }\n  },\n  warm: {\n    primary: {\n      50: '#fef7ed',\n      100: '#fdedd3',\n      500: '#ea580c',\n      600: '#dc2626',\n      700: '#b91c1c',\n      900: '#7c2d12'\n    },\n    secondary: {\n      50: '#fefce8',\n      100: '#fef3c7',\n      500: '#eab308',\n      600: '#ca8a04',\n      700: '#a16207',\n      900: '#713f12'\n    }\n  },\n  cool: {\n    primary: {\n      50: '#eff6ff',\n      100: '#dbeafe',\n      500: '#3b82f6',\n      600: '#2563eb',\n      700: '#1d4ed8',\n      900: '#1e3a8a'\n    },\n    secondary: {\n      50: '#f0fdfa',\n      100: '#ccfbf1',\n      500: '#14b8a6',\n      600: '#0d9488',\n      700: '#0f766e',\n      900: '#134e4a'\n    }\n  },\n  vibrant: {\n    primary: {\n      50: '#fdf4ff',\n      100: '#fae8ff',\n      500: '#a855f7',\n      600: '#9333ea',\n      700: '#7c3aed',\n      900: '#581c87'\n    },\n    secondary: {\n      50: '#fef2f2',\n      100: '#fee2e2',\n      500: '#ef4444',\n      600: '#dc2626',\n      700: '#b91c1c',\n      900: '#7f1d1d'\n    }\n  },\n  monochrome: {\n    primary: {\n      50: '#f9fafb',\n      100: '#f3f4f6',\n      500: '#6b7280',\n      600: '#4b5563',\n      700: '#374151',\n      900: '#111827'\n    },\n    secondary: {\n      50: '#f9fafb',\n      100: '#f3f4f6',\n      500: '#6b7280',\n      600: '#4b5563',\n      700: '#374151',\n      900: '#111827'\n    }\n  }\n};\n\n// Typography scales\nexport const TYPOGRAPHY_SCALES: Record<FontScale, TypographyConfig> = {\n  compact: {\n    fontFamily: {\n      sans: ['Inter', 'system-ui', 'sans-serif'],\n      serif: ['Playfair Display', 'Georgia', 'serif'],\n      mono: ['JetBrains Mono', 'Menlo', 'monospace'],\n      display: ['Cormorant Garamond', 'Playfair Display', 'serif']\n    },\n    fontSize: {\n      xs: { size: '0.75rem', lineHeight: '1rem' },\n      sm: { size: '0.875rem', lineHeight: '1.25rem' },\n      base: { size: '1rem', lineHeight: '1.5rem' },\n      lg: { size: '1.125rem', lineHeight: '1.75rem' },\n      xl: { size: '1.25rem', lineHeight: '1.75rem' },\n      '2xl': { size: '1.5rem', lineHeight: '2rem' },\n      '3xl': { size: '1.875rem', lineHeight: '2.25rem' },\n      '4xl': { size: '2.25rem', lineHeight: '2.5rem' }\n    },\n    fontWeight: {\n      light: 300,\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700\n    }\n  },\n  comfortable: {\n    fontFamily: {\n      sans: ['Inter', 'system-ui', 'sans-serif'],\n      serif: ['Playfair Display', 'Georgia', 'serif'],\n      mono: ['JetBrains Mono', 'Menlo', 'monospace'],\n      display: ['Cormorant Garamond', 'Playfair Display', 'serif']\n    },\n    fontSize: {\n      xs: { size: '0.8125rem', lineHeight: '1.125rem' },\n      sm: { size: '0.9375rem', lineHeight: '1.375rem' },\n      base: { size: '1.0625rem', lineHeight: '1.625rem' },\n      lg: { size: '1.1875rem', lineHeight: '1.875rem' },\n      xl: { size: '1.3125rem', lineHeight: '1.875rem' },\n      '2xl': { size: '1.5625rem', lineHeight: '2.125rem' },\n      '3xl': { size: '1.9375rem', lineHeight: '2.375rem' },\n      '4xl': { size: '2.3125rem', lineHeight: '2.625rem' }\n    },\n    fontWeight: {\n      light: 300,\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700\n    }\n  },\n  spacious: {\n    fontFamily: {\n      sans: ['Inter', 'system-ui', 'sans-serif'],\n      serif: ['Playfair Display', 'Georgia', 'serif'],\n      mono: ['JetBrains Mono', 'Menlo', 'monospace'],\n      display: ['Cormorant Garamond', 'Playfair Display', 'serif']\n    },\n    fontSize: {\n      xs: { size: '0.875rem', lineHeight: '1.25rem' },\n      sm: { size: '1rem', lineHeight: '1.5rem' },\n      base: { size: '1.125rem', lineHeight: '1.75rem' },\n      lg: { size: '1.25rem', lineHeight: '2rem' },\n      xl: { size: '1.375rem', lineHeight: '2rem' },\n      '2xl': { size: '1.625rem', lineHeight: '2.25rem' },\n      '3xl': { size: '2rem', lineHeight: '2.5rem' },\n      '4xl': { size: '2.375rem', lineHeight: '2.75rem' }\n    },\n    fontWeight: {\n      light: 300,\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700\n    }\n  }\n};\n\n// Border radius configurations\nexport const BORDER_RADIUS_CONFIGS: Record<BorderRadius, Record<string, string>> = {\n  none: {\n    sm: '0px',\n    default: '0px',\n    md: '0px',\n    lg: '0px',\n    xl: '0px',\n    full: '0px'\n  },\n  small: {\n    sm: '2px',\n    default: '4px',\n    md: '6px',\n    lg: '8px',\n    xl: '12px',\n    full: '9999px'\n  },\n  medium: {\n    sm: '4px',\n    default: '6px',\n    md: '8px',\n    lg: '12px',\n    xl: '16px',\n    full: '9999px'\n  },\n  large: {\n    sm: '6px',\n    default: '8px',\n    md: '12px',\n    lg: '16px',\n    xl: '24px',\n    full: '9999px'\n  },\n  full: {\n    sm: '9999px',\n    default: '9999px',\n    md: '9999px',\n    lg: '9999px',\n    xl: '9999px',\n    full: '9999px'\n  }\n};\n\n/**\n * Advanced theme system hook\n */\nexport const useAdvancedTheme = () => {\n  const [preferences, setPreferences] = useState<ThemePreferences>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        mode: 'light',\n        colorScheme: 'neutral',\n        fontScale: 'comfortable',\n        borderRadius: 'medium',\n        animationLevel: 'normal',\n        highContrast: false,\n        reducedMotion: false\n      };\n    }\n\n    return loadThemePreferences();\n  });\n\n  const [systemPreferences, setSystemPreferences] = useState(() => {\n    if (typeof window === 'undefined') {\n      return {\n        prefersDark: false,\n        prefersReducedMotion: false,\n        prefersHighContrast: false\n      };\n    }\n\n    return detectSystemPreferences();\n  });\n\n  // Generate theme configuration - force light mode only\n  const themeConfig = useMemo((): ThemeConfig => {\n    const actualMode = 'light'; // Force light mode only\n\n    const baseColors = COLOR_SCHEMES[preferences.colorScheme];\n    const typography = TYPOGRAPHY_SCALES[preferences.fontScale];\n    const borderRadius = BORDER_RADIUS_CONFIGS[preferences.borderRadius];\n\n    // Generate complete color palette\n    const colors = generateColorPalette(baseColors, actualMode, preferences.highContrast);\n\n    return {\n      mode: actualMode,\n      colorScheme: preferences.colorScheme,\n      colors,\n      typography,\n      spacing: {\n        scale: preferences.fontScale === 'compact' ? 0.875 : \n               preferences.fontScale === 'spacious' ? 1.125 : 1,\n        base: 16,\n        sizes: generateSpacingSizes(preferences.fontScale)\n      },\n      borderRadius: preferences.borderRadius,\n      animationLevel: preferences.reducedMotion ? 'none' : preferences.animationLevel,\n      fontScale: preferences.fontScale,\n      customProperties: generateCustomProperties(colors, typography, borderRadius)\n    };\n  }, [preferences, systemPreferences]);\n\n  // Update preferences\n  const updatePreferences = useCallback((updates: Partial<ThemePreferences>) => {\n    setPreferences(prev => {\n      const newPreferences = { ...prev, ...updates };\n      saveThemePreferences(newPreferences);\n      return newPreferences;\n    });\n  }, []);\n\n  // Apply theme to DOM\n  useEffect(() => {\n    applyThemeToDOM(themeConfig);\n  }, [themeConfig]);\n\n  // Listen for system preference changes\n  useEffect(() => {\n    const mediaQueries = [\n      window.matchMedia('(prefers-color-scheme: dark)'),\n      window.matchMedia('(prefers-reduced-motion: reduce)'),\n      window.matchMedia('(prefers-contrast: high)')\n    ];\n\n    const handleChange = () => {\n      setSystemPreferences(detectSystemPreferences());\n    };\n\n    mediaQueries.forEach(mq => mq.addEventListener('change', handleChange));\n\n    return () => {\n      mediaQueries.forEach(mq => mq.removeEventListener('change', handleChange));\n    };\n  }, []);\n\n  return {\n    preferences,\n    themeConfig,\n    systemPreferences,\n    updatePreferences,\n    resetToDefaults: () => updatePreferences({\n      mode: 'auto',\n      colorScheme: 'neutral',\n      fontScale: 'comfortable',\n      borderRadius: 'medium',\n      animationLevel: 'normal',\n      highContrast: false,\n      reducedMotion: false\n    })\n  };\n};\n\n/**\n * Load theme preferences from localStorage\n */\nfunction loadThemePreferences(): ThemePreferences {\n  try {\n    const saved = localStorage.getItem('theme_preferences');\n    if (saved) {\n      return { ...getDefaultPreferences(), ...JSON.parse(saved) };\n    }\n  } catch (error) {\n    console.warn('Failed to load theme preferences:', error);\n  }\n\n  return getDefaultPreferences();\n}\n\n/**\n * Save theme preferences to localStorage\n */\nfunction saveThemePreferences(preferences: ThemePreferences): void {\n  try {\n    localStorage.setItem('theme_preferences', JSON.stringify(preferences));\n  } catch (error) {\n    console.warn('Failed to save theme preferences:', error);\n  }\n}\n\n/**\n * Get default theme preferences\n */\nfunction getDefaultPreferences(): ThemePreferences {\n  return {\n    mode: 'auto',\n    colorScheme: 'neutral',\n    fontScale: 'comfortable',\n    borderRadius: 'medium',\n    animationLevel: 'normal',\n    highContrast: false,\n    reducedMotion: false\n  };\n}\n\n/**\n * Detect system preferences\n */\nfunction detectSystemPreferences() {\n  return {\n    prefersDark: window.matchMedia('(prefers-color-scheme: dark)').matches,\n    prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n    prefersHighContrast: window.matchMedia('(prefers-contrast: high)').matches ||\n                        window.matchMedia('(-ms-high-contrast: active)').matches ||\n                        window.matchMedia('(forced-colors: active)').matches\n  };\n}\n\n/**\n * Generate complete color palette\n */\nfunction generateColorPalette(\n  baseColors: Partial<ColorPalette>,\n  mode: ThemeMode,\n  highContrast: boolean\n): ColorPalette {\n  // This is a simplified implementation\n  // In a real application, you would have more sophisticated color generation\n  const isDark = false; // Force light mode only\n  \n  return {\n    primary: baseColors.primary || COLOR_SCHEMES.neutral.primary!,\n    secondary: baseColors.secondary || COLOR_SCHEMES.neutral.secondary!,\n    accent: baseColors.primary || COLOR_SCHEMES.neutral.primary!,\n    neutral: COLOR_SCHEMES.neutral.primary!,\n    semantic: {\n      success: {\n        50: '#f0fdf4',\n        500: '#22c55e',\n        600: '#16a34a',\n        700: '#15803d'\n      },\n      warning: {\n        50: '#fffbeb',\n        500: '#f59e0b',\n        600: '#d97706',\n        700: '#b45309'\n      },\n      error: {\n        50: '#fef2f2',\n        500: '#ef4444',\n        600: '#dc2626',\n        700: '#b91c1c'\n      },\n      info: {\n        50: '#eff6ff',\n        500: '#3b82f6',\n        600: '#2563eb',\n        700: '#1d4ed8'\n      }\n    },\n    background: {\n      primary: isDark ? '#0f172a' : '#ffffff',\n      secondary: isDark ? '#1e293b' : '#f8fafc',\n      tertiary: isDark ? '#334155' : '#f1f5f9',\n      overlay: isDark ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.8)'\n    },\n    text: {\n      primary: isDark ? '#f8fafc' : '#0f172a',\n      secondary: isDark ? '#cbd5e1' : '#475569',\n      tertiary: isDark ? '#94a3b8' : '#64748b',\n      inverse: isDark ? '#0f172a' : '#f8fafc',\n      disabled: isDark ? '#64748b' : '#94a3b8'\n    },\n    border: {\n      subtle: isDark ? '#334155' : '#e2e8f0',\n      default: isDark ? '#475569' : '#cbd5e1',\n      strong: isDark ? '#64748b' : '#94a3b8',\n      interactive: isDark ? '#3b82f6' : '#2563eb'\n    }\n  };\n}\n\n/**\n * Generate spacing sizes based on font scale\n */\nfunction generateSpacingSizes(fontScale: FontScale): Record<string, string> {\n  const multiplier = fontScale === 'compact' ? 0.875 : \n                    fontScale === 'spacious' ? 1.125 : 1;\n\n  const base = 16 * multiplier;\n  \n  return {\n    xs: `${base * 0.25}px`,\n    sm: `${base * 0.5}px`,\n    md: `${base * 1}px`,\n    lg: `${base * 1.5}px`,\n    xl: `${base * 2}px`,\n    '2xl': `${base * 3}px`,\n    '3xl': `${base * 4}px`,\n    '4xl': `${base * 6}px`\n  };\n}\n\n/**\n * Generate CSS custom properties\n */\nfunction generateCustomProperties(\n  colors: ColorPalette,\n  typography: TypographyConfig,\n  borderRadius: Record<string, string>\n): Record<string, string> {\n  const properties: Record<string, string> = {};\n\n  // Color properties\n  Object.entries(colors.background).forEach(([key, value]) => {\n    properties[`--color-background-${key}`] = value;\n  });\n\n  Object.entries(colors.text).forEach(([key, value]) => {\n    properties[`--color-text-${key}`] = value;\n  });\n\n  Object.entries(colors.border).forEach(([key, value]) => {\n    properties[`--color-border-${key}`] = value;\n  });\n\n  // Typography properties\n  properties['--font-family-sans'] = typography.fontFamily.sans.join(', ');\n  properties['--font-family-serif'] = typography.fontFamily.serif.join(', ');\n  properties['--font-family-mono'] = typography.fontFamily.mono.join(', ');\n\n  // Border radius properties\n  Object.entries(borderRadius).forEach(([key, value]) => {\n    properties[`--border-radius-${key}`] = value;\n  });\n\n  return properties;\n}\n\n/**\n * Apply theme to DOM\n */\nfunction applyThemeToDOM(themeConfig: ThemeConfig): void {\n  const root = document.documentElement;\n\n  // Apply custom properties\n  Object.entries(themeConfig.customProperties).forEach(([property, value]) => {\n    root.style.setProperty(property, value);\n  });\n\n  // Apply theme class\n  root.className = root.className.replace(/theme-\\w+/g, '');\n  root.classList.add(`theme-${themeConfig.mode}`);\n  root.classList.add(`color-scheme-${themeConfig.colorScheme}`);\n  root.classList.add(`font-scale-${themeConfig.fontScale}`);\n  root.classList.add(`border-radius-${themeConfig.borderRadius}`);\n  root.classList.add(`animation-${themeConfig.animationLevel}`);\n\n  // Set color scheme for browser - force light mode\n  root.style.colorScheme = 'light';\n}\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\n// Accessibility Constants\r\nexport const ARIA_ROLES = {\r\n  button: 'button',\r\n  link: 'link',\r\n  menu: 'menu',\r\n  menuitem: 'menuitem',\r\n  tab: 'tab',\r\n  tabpanel: 'tabpanel',\r\n  dialog: 'dialog',\r\n  alert: 'alert',\r\n  status: 'status',\r\n  progressbar: 'progressbar',\r\n  grid: 'grid',\r\n  gridcell: 'gridcell',\r\n  columnheader: 'columnheader',\r\n  rowheader: 'rowheader'\r\n} as const;\r\n\r\nexport const ARIA_STATES = {\r\n  expanded: 'aria-expanded',\r\n  selected: 'aria-selected',\r\n  checked: 'aria-checked',\r\n  disabled: 'aria-disabled',\r\n  hidden: 'aria-hidden',\r\n  pressed: 'aria-pressed',\r\n  current: 'aria-current'\r\n} as const;\r\n\r\nexport const ARIA_PROPERTIES = {\r\n  label: 'aria-label',\r\n  labelledby: 'aria-labelledby',\r\n  describedby: 'aria-describedby',\r\n  controls: 'aria-controls',\r\n  owns: 'aria-owns',\r\n  live: 'aria-live',\r\n  atomic: 'aria-atomic',\r\n  relevant: 'aria-relevant'\r\n} as const;\r\n\r\n// Keyboard Navigation Hook\r\nexport const useKeyboardNavigation = (\r\n  items: Array<{ id: string; disabled?: boolean }>,\r\n  options: {\r\n    loop?: boolean;\r\n    orientation?: 'horizontal' | 'vertical';\r\n    onSelect?: (id: string) => void;\r\n  } = {}\r\n) => {\r\n  const [focusedIndex, setFocusedIndex] = useState(0);\r\n  const { loop = true, orientation = 'vertical', onSelect } = options;\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    const { key } = event;\r\n    const enabledItems = items.filter(item => !item.disabled);\r\n    const currentEnabledIndex = enabledItems.findIndex(\r\n      item => item.id === items[focusedIndex]?.id\r\n    );\r\n\r\n    let nextIndex = currentEnabledIndex;\r\n\r\n    switch (key) {\r\n      case 'ArrowDown':\r\n        if (orientation === 'vertical') {\r\n          event.preventDefault();\r\n          nextIndex = currentEnabledIndex + 1;\r\n          if (nextIndex >= enabledItems.length) {\r\n            nextIndex = loop ? 0 : enabledItems.length - 1;\r\n          }\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n        if (orientation === 'vertical') {\r\n          event.preventDefault();\r\n          nextIndex = currentEnabledIndex - 1;\r\n          if (nextIndex < 0) {\r\n            nextIndex = loop ? enabledItems.length - 1 : 0;\r\n          }\r\n        }\r\n        break;\r\n      case 'ArrowRight':\r\n        if (orientation === 'horizontal') {\r\n          event.preventDefault();\r\n          nextIndex = currentEnabledIndex + 1;\r\n          if (nextIndex >= enabledItems.length) {\r\n            nextIndex = loop ? 0 : enabledItems.length - 1;\r\n          }\r\n        }\r\n        break;\r\n      case 'ArrowLeft':\r\n        if (orientation === 'horizontal') {\r\n          event.preventDefault();\r\n          nextIndex = currentEnabledIndex - 1;\r\n          if (nextIndex < 0) {\r\n            nextIndex = loop ? enabledItems.length - 1 : 0;\r\n          }\r\n        }\r\n        break;\r\n      case 'Home':\r\n        event.preventDefault();\r\n        nextIndex = 0;\r\n        break;\r\n      case 'End':\r\n        event.preventDefault();\r\n        nextIndex = enabledItems.length - 1;\r\n        break;\r\n      case 'Enter':\r\n      case ' ':\r\n        event.preventDefault();\r\n        if (onSelect && enabledItems[currentEnabledIndex]) {\r\n          onSelect(enabledItems[currentEnabledIndex].id);\r\n        }\r\n        break;\r\n    }\r\n\r\n    if (nextIndex !== currentEnabledIndex && enabledItems[nextIndex]) {\r\n      const actualIndex = items.findIndex(item => item.id === enabledItems[nextIndex].id);\r\n      setFocusedIndex(actualIndex);\r\n    }\r\n  };\r\n\r\n  return {\r\n    focusedIndex,\r\n    setFocusedIndex,\r\n    handleKeyDown\r\n  };\r\n};\r\n\r\n// Focus Management Hook\r\nexport const useFocusManagement = () => {\r\n  const focusableElementsSelector = [\r\n    'a[href]',\r\n    'button:not([disabled])',\r\n    'textarea:not([disabled])',\r\n    'input:not([disabled])',\r\n    'select:not([disabled])',\r\n    '[tabindex]:not([tabindex=\"-1\"])'\r\n  ].join(', ');\r\n\r\n  const getFocusableElements = (container: HTMLElement): HTMLElement[] => {\r\n    return Array.from(container.querySelectorAll(focusableElementsSelector));\r\n  };\r\n\r\n  const trapFocus = (container: HTMLElement) => {\r\n    const focusableElements = getFocusableElements(container);\r\n    const firstElement = focusableElements[0];\r\n    const lastElement = focusableElements[focusableElements.length - 1];\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Tab') {\r\n        if (event.shiftKey) {\r\n          if (document.activeElement === firstElement) {\r\n            event.preventDefault();\r\n            lastElement?.focus();\r\n          }\r\n        } else {\r\n          if (document.activeElement === lastElement) {\r\n            event.preventDefault();\r\n            firstElement?.focus();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    container.addEventListener('keydown', handleKeyDown);\r\n    firstElement?.focus();\r\n\r\n    return () => {\r\n      container.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  };\r\n\r\n  const restoreFocus = (element: HTMLElement | null) => {\r\n    if (element && typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFocusableElements,\r\n    trapFocus,\r\n    restoreFocus\r\n  };\r\n};\r\n\r\n// Screen Reader Announcements Hook\r\nexport const useScreenReaderAnnouncements = () => {\r\n  const [announcements, setAnnouncements] = useState<string[]>([]);\r\n\r\n  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {\r\n    setAnnouncements(prev => [...prev, message]);\r\n\r\n    // Create a temporary element for screen reader announcement\r\n    const announcement = document.createElement('div');\r\n    announcement.setAttribute('aria-live', priority);\r\n    announcement.setAttribute('aria-atomic', 'true');\r\n    announcement.className = 'sr-only';\r\n    announcement.textContent = message;\r\n\r\n    document.body.appendChild(announcement);\r\n\r\n    // Remove after announcement\r\n    setTimeout(() => {\r\n      document.body.removeChild(announcement);\r\n      setAnnouncements(prev => prev.filter(msg => msg !== message));\r\n    }, 1000);\r\n  };\r\n\r\n  return {\r\n    announce,\r\n    announcements\r\n  };\r\n};\r\n\r\n// Color Contrast Checker\r\nexport const checkColorContrast = (foreground: string, background: string): {\r\n  ratio: number;\r\n  wcagAA: boolean;\r\n  wcagAAA: boolean;\r\n} => {\r\n  const getLuminance = (color: string): number => {\r\n    // Convert hex to RGB\r\n    const hex = color.replace('#', '');\r\n    const r = parseInt(hex.substr(0, 2), 16) / 255;\r\n    const g = parseInt(hex.substr(2, 2), 16) / 255;\r\n    const b = parseInt(hex.substr(4, 2), 16) / 255;\r\n\r\n    // Calculate relative luminance\r\n    const sRGB = [r, g, b].map(c => {\r\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\r\n    });\r\n\r\n    return 0.2126 * sRGB[0] + 0.7152 * sRGB[1] + 0.0722 * sRGB[2];\r\n  };\r\n\r\n  const fgLuminance = getLuminance(foreground);\r\n  const bgLuminance = getLuminance(background);\r\n\r\n  const ratio = (Math.max(fgLuminance, bgLuminance) + 0.05) /\r\n    (Math.min(fgLuminance, bgLuminance) + 0.05);\r\n\r\n  return {\r\n    ratio: Math.round(ratio * 100) / 100,\r\n    wcagAA: ratio >= 4.5,\r\n    wcagAAA: ratio >= 7\r\n  };\r\n};\r\n\r\n// Reduced Motion Hook\r\nexport const useReducedMotion = (): boolean => {\r\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\r\n    setPrefersReducedMotion(mediaQuery.matches);\r\n\r\n    const handleChange = (event: MediaQueryListEvent) => {\r\n      setPrefersReducedMotion(event.matches);\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  return prefersReducedMotion;\r\n};\r\n\r\n// High Contrast Mode Hook\r\nexport const useHighContrastMode = (): boolean => {\r\n  const [isHighContrast, setIsHighContrast] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkHighContrast = () => {\r\n      // Check for Windows High Contrast mode\r\n      const isHighContrastWindows = window.matchMedia('(-ms-high-contrast: active)').matches;\r\n\r\n      // Check for forced colors (newer standard)\r\n      const isForcedColors = window.matchMedia('(forced-colors: active)').matches;\r\n\r\n      setIsHighContrast(isHighContrastWindows || isForcedColors);\r\n    };\r\n\r\n    checkHighContrast();\r\n\r\n    // Listen for changes\r\n    const mediaQueries = [\r\n      window.matchMedia('(-ms-high-contrast: active)'),\r\n      window.matchMedia('(forced-colors: active)')\r\n    ];\r\n\r\n    const handleChange = () => checkHighContrast();\r\n\r\n    mediaQueries.forEach(mq => mq.addEventListener('change', handleChange));\r\n\r\n    return () => {\r\n      mediaQueries.forEach(mq => mq.removeEventListener('change', handleChange));\r\n    };\r\n  }, []);\r\n\r\n  return isHighContrast;\r\n};\r\n\r\n// ARIA Live Region Hook\r\nexport const useAriaLiveRegion = () => {\r\n  const liveRegionRef = useRef<HTMLDivElement>(null);\r\n\r\n  const updateLiveRegion = (message: string, priority: 'polite' | 'assertive' = 'polite') => {\r\n    if (liveRegionRef.current) {\r\n      liveRegionRef.current.setAttribute('aria-live', priority);\r\n      liveRegionRef.current.textContent = message;\r\n    }\r\n  };\r\n\r\n  const clearLiveRegion = () => {\r\n    if (liveRegionRef.current) {\r\n      liveRegionRef.current.textContent = '';\r\n    }\r\n  };\r\n\r\n  return {\r\n    liveRegionRef,\r\n    updateLiveRegion,\r\n    clearLiveRegion\r\n  };\r\n};\r\n\r\n// Skip Link Component\r\nexport const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({\r\n  href,\r\n  children\r\n}) => {\r\n  return (\r\n    <a\r\n      href={href}\r\n      className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-blue-600 focus:text-white focus:rounded-md focus:shadow-lg\"\r\n      onFocus={(e) => e.currentTarget.classList.remove('sr-only')}\r\n      onBlur={(e) => e.currentTarget.classList.add('sr-only')}\r\n    >\r\n      {children}\r\n    </a>\r\n  );\r\n};\r\n\r\n// Accessibility Audit Function\r\nexport const auditAccessibility = (element: HTMLElement): {\r\n  issues: Array<{ type: string; message: string; element: HTMLElement }>;\r\n  score: number;\r\n} => {\r\n  const issues: Array<{ type: string; message: string; element: HTMLElement }> = [];\r\n\r\n  // Check for missing alt text on images\r\n  const images = element.querySelectorAll('img');\r\n  images.forEach(img => {\r\n    if (!img.alt && !img.getAttribute('aria-label')) {\r\n      issues.push({\r\n        type: 'missing-alt-text',\r\n        message: 'Image missing alt text',\r\n        element: img as HTMLElement\r\n      });\r\n    }\r\n  });\r\n\r\n  // Check for missing form labels\r\n  const inputs = element.querySelectorAll('input, textarea, select');\r\n  inputs.forEach(input => {\r\n    const hasLabel = input.getAttribute('aria-label') ||\r\n      input.getAttribute('aria-labelledby') ||\r\n      element.querySelector(`label[for=\"${input.id}\"]`);\r\n\r\n    if (!hasLabel) {\r\n      issues.push({\r\n        type: 'missing-form-label',\r\n        message: 'Form control missing label',\r\n        element: input as HTMLElement\r\n      });\r\n    }\r\n  });\r\n\r\n  // Check for insufficient color contrast\r\n  const textElements = element.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6, a, button');\r\n  textElements.forEach(el => {\r\n    const styles = window.getComputedStyle(el);\r\n    const color = styles.color;\r\n    const backgroundColor = styles.backgroundColor;\r\n\r\n    if (color && backgroundColor && color !== 'rgba(0, 0, 0, 0)' && backgroundColor !== 'rgba(0, 0, 0, 0)') {\r\n      // This is a simplified check - in practice, you'd need to convert colors and check contrast\r\n      // For now, we'll skip this check as it requires more complex color parsing\r\n    }\r\n  });\r\n\r\n  // Check for missing heading hierarchy\r\n  const headings = Array.from(element.querySelectorAll('h1, h2, h3, h4, h5, h6'));\r\n  let lastLevel = 0;\r\n  headings.forEach(heading => {\r\n    const level = parseInt(heading.tagName.charAt(1));\r\n    if (level > lastLevel + 1) {\r\n      issues.push({\r\n        type: 'heading-hierarchy',\r\n        message: `Heading level ${level} follows level ${lastLevel}, skipping levels`,\r\n        element: heading as HTMLElement\r\n      });\r\n    }\r\n    lastLevel = level;\r\n  });\r\n\r\n  // Calculate score (100 - number of issues)\r\n  const score = Math.max(0, 100 - issues.length * 5);\r\n\r\n  return { issues, score };\r\n};\r\n\r\n// Initialize accessibility features\r\nexport const initializeAccessibility = () => {\r\n  // Skip link is handled by React component, no need to add programmatically\r\n\r\n  // Add main landmark if it doesn't exist\r\n  if (!document.querySelector('main')) {\r\n    const mainContent = document.querySelector('#main-content, .main-content, [role=\"main\"]');\r\n    if (mainContent && mainContent.tagName !== 'MAIN') {\r\n      const main = document.createElement('main');\r\n      main.id = 'main-content';\r\n      mainContent.parentNode?.insertBefore(main, mainContent);\r\n      main.appendChild(mainContent);\r\n    }\r\n  }\r\n\r\n  // Set up global keyboard navigation\r\n  document.addEventListener('keydown', (event) => {\r\n    // Escape key to close modals/dropdowns\r\n    if (event.key === 'Escape') {\r\n      const openModals = document.querySelectorAll('[role=\"dialog\"][aria-hidden=\"false\"]');\r\n      openModals.forEach(modal => {\r\n        const closeButton = modal.querySelector('[data-close], [aria-label*=\"close\"]');\r\n        if (closeButton) {\r\n          (closeButton as HTMLElement).click();\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n","import { supabase } from '../../lib/supabase';\nimport { StorageService } from '../../services/storageService';\n\n/**\n * Initialize database tables and storage buckets\n */\nexport const initializeDatabase = async () => {\n  try {\n    console.log('Initializing database...');\n\n    // Check if products table exists and has required columns\n    const { data: productsData, error: productsError } = await supabase\n      .from('products')\n      .select('id')\n      .limit(1);\n\n    if (productsError) {\n      console.error('Products table error:', productsError);\n      // Table might not exist or have permission issues\n    } else {\n      console.log('Products table is accessible');\n    }\n\n    // Check if categories table exists\n    const { data: categoriesData, error: categoriesError } = await supabase\n      .from('categories')\n      .select('id')\n      .limit(1);\n\n    if (categoriesError) {\n      console.error('Categories table error:', categoriesError);\n    } else {\n      console.log('Categories table is accessible');\n    }\n\n    // Check if profiles table exists\n    const { data: profilesData, error: profilesError } = await supabase\n      .from('profiles')\n      .select('id')\n      .limit(1);\n\n    if (profilesError) {\n      console.error('Profiles table error:', profilesError);\n    } else {\n      console.log('Profiles table is accessible');\n    }\n\n    // Initialize all storage buckets using StorageService\n    console.log('Initializing storage buckets...');\n    const bucketsInitialized = await StorageService.initializeAllBuckets();\n\n    if (bucketsInitialized) {\n      console.log('All storage buckets initialized successfully');\n    } else {\n      console.warn('Some storage buckets failed to initialize');\n    }\n\n    console.log('Database initialization completed');\n    return true;\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    return false;\n  }\n};\n\n/**\n * Check database connection and basic functionality\n */\nexport const checkDatabaseHealth = async () => {\n  try {\n    // Simple health check\n    const { data, error } = await supabase\n      .from('products')\n      .select('count')\n      .limit(1);\n\n    if (error) {\n      console.error('Database health check failed:', error);\n      return false;\n    }\n\n    console.log('Database health check passed');\n    return true;\n  } catch (error) {\n    console.error('Database health check error:', error);\n    return false;\n  }\n};\n","interface ServiceWorkerAPI {\r\n  register(): Promise<ServiceWorkerRegistration | null>;\r\n  unregister(): Promise<boolean>;\r\n  update(): Promise<void>;\r\n  clearCache(): Promise<void>;\r\n  getCacheStats(): Promise<any>;\r\n  prefetchResources(urls: string[]): Promise<void>;\r\n  isSupported(): boolean;\r\n  getRegistration(): ServiceWorkerRegistration | null;\r\n}\r\n\r\nclass ServiceWorkerManager implements ServiceWorkerAPI {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private updateCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.setupUpdateChecking();\r\n  }\r\n\r\n  /**\r\n   * Register the service worker\r\n   */\r\n  async register(): Promise<ServiceWorkerRegistration | null> {\r\n    if (!this.isSupported()) {\r\n      console.warn('Service Workers are not supported in this browser');\r\n      return null;\r\n    }\r\n\r\n    // Skip service worker registration in development to avoid conflicts\r\n    if (import.meta.env.DEV) {\r\n      console.log('üîß Service Worker registration skipped in development mode');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      console.log('üîß Registering Service Worker...');\r\n      \r\n      this.registration = await navigator.serviceWorker.register('/sw.js', {\r\n        scope: '/'\r\n      });\r\n\r\n      console.log('‚úÖ Service Worker registered successfully:', this.registration);\r\n\r\n      // Handle updates\r\n      this.registration.addEventListener('updatefound', () => {\r\n        const newWorker = this.registration?.installing;\r\n        if (newWorker) {\r\n          console.log('üîÑ Service Worker update found');\r\n          this.handleServiceWorkerUpdate(newWorker);\r\n        }\r\n      });\r\n\r\n      // Listen for messages from SW\r\n      navigator.serviceWorker.addEventListener('message', (event) => {\r\n        this.handleServiceWorkerMessage(event);\r\n      });\r\n\r\n      return this.registration;\r\n    } catch (error) {\r\n      console.error('‚ùå Service Worker registration failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregister the service worker\r\n   */\r\n  async unregister(): Promise<boolean> {\r\n    if (!this.registration) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const result = await this.registration.unregister();\r\n      console.log('üóëÔ∏è Service Worker unregistered:', result);\r\n      this.registration = null;\r\n      \r\n      if (this.updateCheckInterval) {\r\n        clearInterval(this.updateCheckInterval);\r\n        this.updateCheckInterval = null;\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('‚ùå Service Worker unregistration failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check for and apply service worker updates\r\n   */\r\n  async update(): Promise<void> {\r\n    // Skip in development\r\n    if (import.meta.env.DEV) {\r\n      return;\r\n    }\r\n\r\n    if (!this.registration) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.registration.update();\r\n    } catch (error) {\r\n      // Silent update failure\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all caches\r\n   */\r\n  async clearCache(): Promise<void> {\r\n    return this.sendMessage('CLEAR_CACHE');\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics\r\n   */\r\n  async getCacheStats(): Promise<any> {\r\n    const response = await this.sendMessage('CACHE_STATS');\r\n    return response.stats;\r\n  }\r\n\r\n  /**\r\n   * Prefetch resources for caching\r\n   */\r\n  async prefetchResources(urls: string[]): Promise<void> {\r\n    // Skip in development\r\n    if (import.meta.env.DEV) {\r\n      console.log('üöÄ Prefetching skipped in development');\r\n      return;\r\n    }\r\n    \r\n    return this.sendMessage('PREFETCH_RESOURCES', { urls });\r\n  }\r\n\r\n  /**\r\n   * Check if service workers are supported\r\n   */\r\n  isSupported(): boolean {\r\n    return 'serviceWorker' in navigator;\r\n  }\r\n\r\n  /**\r\n   * Get current registration\r\n   */\r\n  getRegistration(): ServiceWorkerRegistration | null {\r\n    return this.registration;\r\n  }\r\n\r\n  /**\r\n   * Send message to service worker\r\n   */\r\n  private async sendMessage(type: string, payload?: any): Promise<any> {\r\n    if (!navigator.serviceWorker.controller) {\r\n      throw new Error('No service worker controller available');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const messageChannel = new MessageChannel();\r\n      \r\n      messageChannel.port1.onmessage = (event) => {\r\n        if (event.data.error) {\r\n          reject(new Error(event.data.error));\r\n        } else {\r\n          resolve(event.data);\r\n        }\r\n      };\r\n\r\n      navigator.serviceWorker.controller.postMessage(\r\n        { type, payload },\r\n        [messageChannel.port2]\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle service worker updates\r\n   */\r\n  private handleServiceWorkerUpdate(newWorker: ServiceWorker): void {\r\n    newWorker.addEventListener('statechange', () => {\r\n      if (newWorker.state === 'installed') {\r\n        if (navigator.serviceWorker.controller) {\r\n          // New service worker available\r\n          console.log('üÜï New Service Worker available');\r\n          this.showUpdateNotification();\r\n        } else {\r\n          // First time installation\r\n          console.log('üéâ Service Worker installed for the first time');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle messages from service worker\r\n   */\r\n  private handleServiceWorkerMessage(event: MessageEvent): void {\r\n    const { type, payload } = event.data;\r\n    \r\n    switch (type) {\r\n      case 'CACHE_UPDATED':\r\n        console.log('üì¶ Cache updated:', payload);\r\n        break;\r\n      case 'OFFLINE_READY':\r\n        console.log('üì¥ App ready for offline use');\r\n        break;\r\n      case 'UPDATE_AVAILABLE':\r\n        console.log('üîÑ Update available');\r\n        this.showUpdateNotification();\r\n        break;\r\n      default:\r\n        console.log('üì® SW Message:', event.data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show update notification to user\r\n   */\r\n  private showUpdateNotification(): void {\r\n    // In a real app, you'd show a proper notification UI\r\n    // For now, we'll just log and could dispatch a custom event\r\n    console.log('üîî Update notification: New version available');\r\n    \r\n    // Dispatch custom event for UI components to listen to\r\n    window.dispatchEvent(new CustomEvent('sw-update-available', {\r\n      detail: {\r\n        registration: this.registration\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Setup periodic update checking\r\n   */\r\n  private setupUpdateChecking(): void {\r\n    // Skip in development\r\n    if (import.meta.env.DEV) {\r\n      return;\r\n    }\r\n    \r\n    // Check for updates every 30 minutes\r\n    this.updateCheckInterval = setInterval(() => {\r\n      if (this.registration) {\r\n        this.update().catch(console.error);\r\n      }\r\n    }, 30 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Apply pending update\r\n   */\r\n  async applyUpdate(): Promise<void> {\r\n    if (!this.registration || !this.registration.waiting) {\r\n      return;\r\n    }\r\n\r\n    // Tell the waiting service worker to skip waiting\r\n    this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n    \r\n    // Reload the page to activate the new service worker\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\n// Enhanced cache management utilities\r\nexport class CacheManager {\r\n  private sw: ServiceWorkerManager;\r\n\r\n  constructor(serviceWorkerManager: ServiceWorkerManager) {\r\n    this.sw = serviceWorkerManager;\r\n  }\r\n\r\n  /**\r\n   * Prefetch critical resources\r\n   */\r\n  async prefetchCriticalResources(): Promise<void> {\r\n    // Skip in development\r\n    if (import.meta.env.DEV) {\r\n      console.log('üöÄ Critical resource prefetching skipped in development');\r\n      return;\r\n    }\r\n    \r\n    const criticalResources = [\r\n      '/assets/css/index.css',\r\n      '/assets/js/vendor.js',\r\n      '/assets/js/main.js',\r\n      // Add other critical resources\r\n    ];\r\n\r\n    try {\r\n      await this.sw.prefetchResources(criticalResources);\r\n      console.log('üöÄ Critical resources prefetched');\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to prefetch critical resources:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prefetch route-based resources\r\n   */\r\n  async prefetchRoute(route: string): Promise<void> {\r\n    // Skip in development\r\n    if (import.meta.env.DEV) {\r\n      console.log(`üìç Route prefetching skipped in development for: ${route}`);\r\n      return;\r\n    }\r\n    \r\n    const routeResources = this.getRouteResources(route);\r\n    \r\n    try {\r\n      await this.sw.prefetchResources(routeResources);\r\n      console.log(`üìç Prefetched resources for route: ${route}`);\r\n    } catch (error) {\r\n      console.error(`‚ùå Failed to prefetch route ${route}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get cache health report\r\n   */\r\n  async getCacheHealth(): Promise<{\r\n    totalSize: number;\r\n    cacheStatus: Record<string, any>;\r\n    recommendations: string[];\r\n  }> {\r\n    try {\r\n      const stats = await this.sw.getCacheStats();\r\n      const recommendations: string[] = [];\r\n      let totalEntries = 0;\r\n\r\n      Object.entries(stats).forEach(([cacheName, cacheData]: [string, any]) => {\r\n        totalEntries += cacheData.entryCount || 0;\r\n        \r\n        if (cacheData.entryCount > 100) {\r\n          recommendations.push(`${cacheName} cache has many entries (${cacheData.entryCount})`);\r\n        }\r\n        \r\n        if (!cacheData.exists) {\r\n          recommendations.push(`${cacheName} cache is not properly initialized`);\r\n        }\r\n      });\r\n\r\n      return {\r\n        totalSize: totalEntries,\r\n        cacheStatus: stats,\r\n        recommendations\r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to get cache health:', error);\r\n      return {\r\n        totalSize: 0,\r\n        cacheStatus: {},\r\n        recommendations: ['Failed to get cache statistics']\r\n      };\r\n    }\r\n  }\r\n\r\n  private getRouteResources(route: string): string[] {\r\n    // Define resources needed for specific routes\r\n    const routeResourceMap: Record<string, string[]> = {\r\n      '/products': [\r\n        '/api/products',\r\n        '/api/categories',\r\n        // Add product page specific resources\r\n      ],\r\n      '/dashboard': [\r\n        '/api/dashboard/analytics',\r\n        '/api/user/profile',\r\n        // Add dashboard specific resources\r\n      ],\r\n      '/checkout': [\r\n        '/api/payment/methods',\r\n        '/api/shipping/options',\r\n        // Add checkout specific resources\r\n      ]\r\n    };\r\n\r\n    return routeResourceMap[route] || [];\r\n  }\r\n}\r\n\r\n// Create singleton instances\r\nexport const serviceWorkerManager = new ServiceWorkerManager();\r\nexport const cacheManager = new CacheManager(serviceWorkerManager);\r\n\r\n// Auto-register service worker when module loads\r\nif (typeof window !== 'undefined') {\r\n  // Wait for page load to avoid blocking initial render\r\n  window.addEventListener('load', () => {\r\n    serviceWorkerManager.register().then((registration) => {\r\n      if (registration) {\r\n        console.log('üéØ Service Worker registration completed');\r\n        \r\n        // Prefetch critical resources after registration\r\n        cacheManager.prefetchCriticalResources().catch(console.error);\r\n      }\r\n    }).catch(console.error);\r\n  });\r\n\r\n  // Listen for network status changes\r\n  window.addEventListener('online', () => {\r\n    console.log('üåê Back online - checking for updates');\r\n    serviceWorkerManager.update().catch(console.error);\r\n  });\r\n\r\n  window.addEventListener('offline', () => {\r\n    console.log('üì¥ Gone offline - using cached resources');\r\n  });\r\n}\r\n\r\n// Export for manual control\r\nexport default serviceWorkerManager;","/**\r\n * Preloader utility for optimistic data loading\r\n */\r\n\r\nimport { getProductById, getProductsBasic, getCategories } from '../lib/supabase';\r\nimport { productCache, categoryCache, generateCacheKey } from './cache';\r\n\r\ninterface PreloadOptions {\r\n  priority?: 'high' | 'medium' | 'low';\r\n  timeout?: number;\r\n  force?: boolean;\r\n}\r\n\r\nclass DataPreloader {\r\n  private preloadQueue: Array<() => Promise<void>> = [];\r\n  private isProcessing = false;\r\n  private preloadedItems = new Set<string>();\r\n\r\n  /**\r\n   * Preload product details when user hovers over product card\r\n   */\r\n  async preloadProduct(productId: string, options: PreloadOptions = {}) {\r\n    const { priority = 'medium', timeout = 8000, force = false } = options; // Increased timeout\r\n    \r\n    const cacheKey = `product-${productId}`;\r\n    \r\n    // Skip if already preloaded and not forced\r\n    if (this.preloadedItems.has(cacheKey) && !force) {\r\n      return;\r\n    }\r\n\r\n    // Skip if already in cache\r\n    if (productCache.has(cacheKey) && !force) {\r\n      this.preloadedItems.add(cacheKey);\r\n      return;\r\n    }\r\n\r\n    const preloadTask = async () => {\r\n      try {\r\n        console.log(`üöÄ Preloading product ${productId}...`);\r\n        \r\n        const product = await Promise.race([\r\n          getProductById(productId),\r\n          new Promise((_, reject) =>\r\n            setTimeout(() => reject(new Error('Preload timeout')), timeout)\r\n          )\r\n        ]) as unknown;\r\n\r\n        if (product) {\r\n          productCache.set(cacheKey, product, 5 * 60 * 1000); // 5 minute cache\r\n          this.preloadedItems.add(cacheKey);\r\n          console.log(`‚úÖ Preloaded product ${productId}`);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`‚ö†Ô∏è Failed to preload product ${productId}:`, error);\r\n      }\r\n    };\r\n\r\n    // Add to queue based on priority\r\n    if (priority === 'high') {\r\n      this.preloadQueue.unshift(preloadTask);\r\n    } else {\r\n      this.preloadQueue.push(preloadTask);\r\n    }\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  /**\r\n   * Preload products for a category\r\n   */\r\n  async preloadCategoryProducts(categoryId: string, options: PreloadOptions = {}) {\r\n    const { priority = 'low', timeout = 8000, force = false } = options;\r\n    \r\n    const cacheKey = `category-products-${categoryId}`;\r\n    \r\n    if (this.preloadedItems.has(cacheKey) && !force) {\r\n      return;\r\n    }\r\n\r\n    const preloadTask = async () => {\r\n      try {\r\n        console.log(`üöÄ Preloading products for category ${categoryId}...`);\r\n        \r\n        const products = await Promise.race([\r\n          getProductsBasic({ categoryId, limit: 12 }),\r\n          new Promise((_, reject) =>\r\n            setTimeout(() => reject(new Error('Preload timeout')), timeout)\r\n          )\r\n        ]) as unknown;\r\n\r\n        if (products && products.length > 0) {\r\n          productCache.set(cacheKey, products, 3 * 60 * 1000); // 3 minute cache\r\n          this.preloadedItems.add(cacheKey);\r\n          console.log(`‚úÖ Preloaded ${products.length} products for category ${categoryId}`);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`‚ö†Ô∏è Failed to preload category products ${categoryId}:`, error);\r\n      }\r\n    };\r\n\r\n    if (priority === 'high') {\r\n      this.preloadQueue.unshift(preloadTask);\r\n    } else {\r\n      this.preloadQueue.push(preloadTask);\r\n    }\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  /**\r\n   * Preload next page of products\r\n   */\r\n  async preloadNextPage(currentOffset: number, limit: number = 12, options: PreloadOptions = {}) {\r\n    const { timeout = 10000 } = options; // Increased timeout for page preloading\r\n    \r\n    const nextOffset = currentOffset + limit;\r\n    const cacheKey = `products-page-${nextOffset}-${limit}`;\r\n    \r\n    if (this.preloadedItems.has(cacheKey)) {\r\n      return;\r\n    }\r\n\r\n    const preloadTask = async () => {\r\n      try {\r\n        console.log(`üöÄ Preloading next page (offset: ${nextOffset})...`);\r\n        \r\n        const products = await Promise.race([\r\n          getProductsBasic({ limit, offset: nextOffset }),\r\n          new Promise((_, reject) =>\r\n            setTimeout(() => reject(new Error('Preload timeout')), timeout)\r\n          )\r\n        ]) as unknown;\r\n\r\n        if (products && products.length > 0) {\r\n          productCache.set(cacheKey, products, 2 * 60 * 1000); // 2 minute cache\r\n          this.preloadedItems.add(cacheKey);\r\n          console.log(`‚úÖ Preloaded next page with ${products.length} products`);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`‚ö†Ô∏è Failed to preload next page:`, error);\r\n      }\r\n    };\r\n\r\n    this.preloadQueue.push(preloadTask);\r\n    this.processQueue();\r\n  }\r\n\r\n  /**\r\n   * Preload essential data for faster navigation\r\n   */\r\n  async preloadEssentials() {\r\n    const preloadTask = async () => {\r\n      try {\r\n        console.log('üöÄ Preloading essential data...');\r\n        \r\n        // Preload categories if not cached\r\n        const categoryCacheKey = generateCacheKey('categories');\r\n        if (!categoryCache.has(categoryCacheKey)) {\r\n          const categories = await getCategories();\r\n          categoryCache.set(categoryCacheKey, categories);\r\n          console.log('‚úÖ Preloaded categories');\r\n        }\r\n\r\n        // Preload featured products if not cached\r\n        const featuredCacheKey = generateCacheKey('products-featured');\r\n        if (!productCache.has(featuredCacheKey)) {\r\n          const featuredProducts = await getProductsBasic({ featured: true, limit: 8 });\r\n          productCache.set(featuredCacheKey, featuredProducts);\r\n          console.log('‚úÖ Preloaded featured products');\r\n        }\r\n      } catch (error) {\r\n        console.warn('‚ö†Ô∏è Failed to preload essentials:', error);\r\n      }\r\n    };\r\n\r\n    // High priority for essentials\r\n    this.preloadQueue.unshift(preloadTask);\r\n    this.processQueue();\r\n  }\r\n\r\n  /**\r\n   * Process the preload queue\r\n   */\r\n  private async processQueue() {\r\n    if (this.isProcessing || this.preloadQueue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.isProcessing = true;\r\n\r\n    while (this.preloadQueue.length > 0) {\r\n      const task = this.preloadQueue.shift();\r\n      if (task) {\r\n        try {\r\n          await task();\r\n        } catch (error) {\r\n          console.warn('Preload task failed:', error);\r\n        }\r\n        \r\n        // Small delay between tasks to avoid overwhelming the server\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      }\r\n    }\r\n\r\n    this.isProcessing = false;\r\n  }\r\n\r\n  /**\r\n   * Clear preload cache and queue\r\n   */\r\n  clear() {\r\n    this.preloadQueue = [];\r\n    this.preloadedItems.clear();\r\n    this.isProcessing = false;\r\n    console.log('üßπ Cleared preloader cache and queue');\r\n  }\r\n\r\n  /**\r\n   * Get preloader statistics\r\n   */\r\n  getStats() {\r\n    return {\r\n      queueLength: this.preloadQueue.length,\r\n      preloadedItems: this.preloadedItems.size,\r\n      isProcessing: this.isProcessing\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Smart preload based on user behavior\r\n   */\r\n  smartPreload(context: {\r\n    currentPage?: string;\r\n    userScrollPosition?: number;\r\n    timeOnPage?: number;\r\n    previousPages?: string[];\r\n  }) {\r\n    const { currentPage, userScrollPosition = 0, timeOnPage = 0 } = context;\r\n\r\n    // If user has been on page for more than 10 seconds and scrolled, preload next page\r\n    if (timeOnPage > 10000 && userScrollPosition > 0.5) {\r\n      if (currentPage === 'products') {\r\n        this.preloadNextPage(0); // Preload next page of products\r\n      }\r\n    }\r\n\r\n    // If user is on home page, preload category products\r\n    if (currentPage === 'home' && timeOnPage > 5000) {\r\n      this.preloadEssentials();\r\n    }\r\n\r\n    // If user is viewing a product, preload related products\r\n    if (currentPage?.startsWith('product-') && timeOnPage > 3000) {\r\n      // Could implement related products preloading here\r\n      console.log('Product page detected, could preload related products');\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const dataPreloader = new DataPreloader();\r\n\r\n// Auto-preload essentials when module loads\r\nif (typeof window !== 'undefined') {\r\n  // Preload essentials after a short delay\r\n  setTimeout(() => {\r\n    dataPreloader.preloadEssentials();\r\n  }, 2000);\r\n}\r\n\r\nexport default dataPreloader;\r\n","import { supabase } from '../lib/supabase';\r\n\r\nexport interface ExportOptions {\r\n  format: 'csv' | 'json' | 'xlsx';\r\n  includeHeaders: boolean;\r\n  dateRange?: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n  filters?: Record<string, unknown>;\r\n}\r\n\r\nexport interface BulkOperationResult {\r\n  success: boolean;\r\n  processed: number;\r\n  errors: string[];\r\n  data?: Record<string, unknown>[];\r\n}\r\n\r\n// Export data from any table\r\nexport const exportTableData = async (\r\n  tableName: string,\r\n  options: ExportOptions = { format: 'csv', includeHeaders: true }\r\n): Promise<BulkOperationResult> => {\r\n  try {\r\n    let query = supabase.from(tableName).select('*');\r\n\r\n    // Apply date range filter if specified\r\n    if (options.dateRange) {\r\n      query = query\r\n        .gte('created_at', options.dateRange.start.toISOString())\r\n        .lte('created_at', options.dateRange.end.toISOString());\r\n    }\r\n\r\n    // Apply additional filters\r\n    if (options.filters) {\r\n      Object.entries(options.filters).forEach(([key, value]) => {\r\n        if (value !== null && value !== undefined && value !== '') {\r\n          query = query.eq(key, value);\r\n        }\r\n      });\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        processed: 0,\r\n        errors: [error.message]\r\n      };\r\n    }\r\n\r\n    if (!data || data.length === 0) {\r\n      return {\r\n        success: true,\r\n        processed: 0,\r\n        errors: [],\r\n        data: []\r\n      };\r\n    }\r\n\r\n    // Format data based on export format\r\n    let exportData: string | Record<string, unknown>[];\r\n    \r\n    switch (options.format) {\r\n      case 'csv':\r\n        exportData = convertToCSV(data, options.includeHeaders);\r\n        break;\r\n      case 'json':\r\n        exportData = JSON.stringify(data, null, 2);\r\n        break;\r\n      case 'xlsx':\r\n        // For XLSX, we'll return the data and let the frontend handle the conversion\r\n        exportData = data;\r\n        break;\r\n      default:\r\n        exportData = convertToCSV(data, options.includeHeaders);\r\n    }\r\n\r\n    // Trigger download\r\n    downloadData(exportData, `${tableName}_export.${options.format}`, options.format);\r\n\r\n    return {\r\n      success: true,\r\n      processed: data.length,\r\n      errors: [],\r\n      data: data\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      processed: 0,\r\n      errors: [error instanceof Error ? error.message : 'Unknown error occurred']\r\n    };\r\n  }\r\n};\r\n\r\n// Convert data to CSV format\r\nconst convertToCSV = (data: Record<string, unknown>[], includeHeaders: boolean = true): string => {\r\n  if (data.length === 0) return '';\r\n\r\n  const headers = Object.keys(data[0]);\r\n  const csvRows: string[] = [];\r\n\r\n  if (includeHeaders) {\r\n    csvRows.push(headers.join(','));\r\n  }\r\n\r\n  data.forEach(row => {\r\n    const values = headers.map(header => {\r\n      const value = row[header];\r\n      \r\n      // Handle null/undefined values\r\n      if (value === null || value === undefined) return '';\r\n      \r\n      // Handle arrays and objects\r\n      if (typeof value === 'object') {\r\n        return `\"${JSON.stringify(value).replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      \r\n      // Handle strings with commas or quotes\r\n      if (typeof value === 'string' && (value.includes(',') || value.includes('\"') || value.includes('\\n'))) {\r\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      \r\n      return value.toString();\r\n    });\r\n    \r\n    csvRows.push(values.join(','));\r\n  });\r\n\r\n  return csvRows.join('\\n');\r\n};\r\n\r\n// Download data as file\r\nconst downloadData = (data: string | Record<string, unknown>[], filename: string, format: string) => {\r\n  let blob: Blob;\r\n\r\n  switch (format) {\r\n    case 'csv':\r\n      blob = new Blob([data as string], { type: 'text/csv;charset=utf-8;' });\r\n      break;\r\n    case 'json':\r\n      blob = new Blob([data as string], { type: 'application/json;charset=utf-8;' });\r\n      break;\r\n    default:\r\n      blob = new Blob([data as string], { type: 'text/plain;charset=utf-8;' });\r\n  }\r\n\r\n  const link = document.createElement('a');\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', filename);\r\n  link.style.visibility = 'hidden';\r\n  \r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n// Bulk delete records\r\nexport const bulkDeleteRecords = async (\r\n  tableName: string,\r\n  recordIds: string[]\r\n): Promise<BulkOperationResult> => {\r\n  try {\r\n    const { error } = await supabase\r\n      .from(tableName)\r\n      .delete()\r\n      .in('id', recordIds);\r\n\r\n    if (error) {\r\n      return {\r\n        success: false,\r\n        processed: 0,\r\n        errors: [error.message]\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      processed: recordIds.length,\r\n      errors: []\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      processed: 0,\r\n      errors: [error instanceof Error ? error.message : 'Unknown error occurred']\r\n    };\r\n  }\r\n};\r\n\r\n// Bulk update records\r\nexport const bulkUpdateRecords = async (\r\n  tableName: string,\r\n  updates: Array<{ id: string; data: Record<string, unknown> }>\r\n): Promise<BulkOperationResult> => {\r\n  try {\r\n    const results = await Promise.allSettled(\r\n      updates.map(update =>\r\n        supabase\r\n          .from(tableName)\r\n          .update(update.data)\r\n          .eq('id', update.id)\r\n      )\r\n    );\r\n\r\n    const errors: string[] = [];\r\n    let processed = 0;\r\n\r\n    results.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        if (!result.value.error) {\r\n          processed++;\r\n        } else {\r\n          errors.push(`Record ${updates[index].id}: ${result.value.error.message}`);\r\n        }\r\n      } else {\r\n        errors.push(`Record ${updates[index].id}: ${result.reason}`);\r\n      }\r\n    });\r\n\r\n    return {\r\n      success: errors.length === 0,\r\n      processed,\r\n      errors\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      processed: 0,\r\n      errors: [error instanceof Error ? error.message : 'Unknown error occurred']\r\n    };\r\n  }\r\n};\r\n\r\n// Import data from CSV\r\nexport const importFromCSV = async (\r\n  tableName: string,\r\n  csvData: string,\r\n  hasHeaders: boolean = true\r\n): Promise<BulkOperationResult> => {\r\n  try {\r\n    const lines = csvData.trim().split('\\n');\r\n    if (lines.length === 0) {\r\n      return {\r\n        success: false,\r\n        processed: 0,\r\n        errors: ['No data found in CSV']\r\n      };\r\n    }\r\n\r\n    let headers: string[];\r\n    let dataLines: string[];\r\n\r\n    if (hasHeaders) {\r\n      headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\r\n      dataLines = lines.slice(1);\r\n    } else {\r\n      // If no headers, we need to get them from the table schema\r\n      const { data: schemaData } = await supabase\r\n        .from('information_schema.columns')\r\n        .select('column_name')\r\n        .eq('table_name', tableName)\r\n        .eq('table_schema', 'public');\r\n      \r\n      headers = schemaData?.map(col => col.column_name) || [];\r\n      dataLines = lines;\r\n    }\r\n\r\n    const records = dataLines.map(line => {\r\n      const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n      const record: Record<string, unknown> = {};\r\n      \r\n      headers.forEach((header, index) => {\r\n        if (values[index] !== undefined && values[index] !== '') {\r\n          record[header] = values[index];\r\n        }\r\n      });\r\n      \r\n      return record;\r\n    });\r\n\r\n    // Insert records in batches\r\n    const batchSize = 100;\r\n    const errors: string[] = [];\r\n    let processed = 0;\r\n\r\n    for (let i = 0; i < records.length; i += batchSize) {\r\n      const batch = records.slice(i, i + batchSize);\r\n      \r\n      const { error } = await supabase\r\n        .from(tableName)\r\n        .insert(batch);\r\n\r\n      if (error) {\r\n        errors.push(`Batch ${Math.floor(i / batchSize) + 1}: ${error.message}`);\r\n      } else {\r\n        processed += batch.length;\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: errors.length === 0,\r\n      processed,\r\n      errors\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      processed: 0,\r\n      errors: [error instanceof Error ? error.message : 'Unknown error occurred']\r\n    };\r\n  }\r\n};\r\n\r\n// Get table statistics\r\nexport const getTableStatistics = async (tableName: string) => {\r\n  try {\r\n    const { count, error } = await supabase\r\n      .from(tableName)\r\n      .select('*', { count: 'exact', head: true });\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    // Get recent activity (last 24 hours)\r\n    const yesterday = new Date();\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n\r\n    const { count: recentCount } = await supabase\r\n      .from(tableName)\r\n      .select('*', { count: 'exact', head: true })\r\n      .gte('created_at', yesterday.toISOString());\r\n\r\n    return {\r\n      totalRecords: count || 0,\r\n      recentRecords: recentCount || 0,\r\n      lastUpdated: new Date()\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error getting statistics for ${tableName}:`, error);\r\n    return {\r\n      totalRecords: 0,\r\n      recentRecords: 0,\r\n      lastUpdated: new Date()\r\n    };\r\n  }\r\n};\r\n","// Comprehensive validation utilities for user management\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface UserValidationData {\n  email: string;\n  name: string;\n  role: string;\n  phone?: string;\n  dateOfBirth?: string;\n}\n\n// Email validation with comprehensive checks\nexport const validateEmail = (email: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!email) {\n    errors.push('Email is required');\n    return { isValid: false, errors, warnings };\n  }\n\n  // Basic format validation\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    errors.push('Please enter a valid email address');\n  }\n\n  // Length validation\n  if (email.length > 254) {\n    errors.push('Email address is too long (maximum 254 characters)');\n  }\n\n  // Local part validation (before @)\n  const localPart = email.split('@')[0];\n  if (localPart && localPart.length > 64) {\n    errors.push('Email local part is too long (maximum 64 characters)');\n  }\n\n  // Domain validation\n  const domain = email.split('@')[1];\n  if (domain) {\n    if (domain.length > 253) {\n      errors.push('Email domain is too long (maximum 253 characters)');\n    }\n    \n    // Check for valid domain format\n    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    if (!domainRegex.test(domain)) {\n      errors.push('Email domain format is invalid');\n    }\n  }\n\n  // Common typo detection\n  const commonDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\n  const typoSuggestions: { [key: string]: string } = {\n    'gmial.com': 'gmail.com',\n    'gmai.com': 'gmail.com',\n    'yahooo.com': 'yahoo.com',\n    'hotmial.com': 'hotmail.com',\n    'outlok.com': 'outlook.com'\n  };\n\n  if (domain && typoSuggestions[domain.toLowerCase()]) {\n    warnings.push(`Did you mean ${typoSuggestions[domain.toLowerCase()]}?`);\n  }\n\n  return { isValid: errors.length === 0, errors, warnings };\n};\n\n// Name validation\nexport const validateName = (name: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!name) {\n    errors.push('Name is required');\n    return { isValid: false, errors, warnings };\n  }\n\n  if (name.length < 2) {\n    errors.push('Name must be at least 2 characters long');\n  }\n\n  if (name.length > 100) {\n    errors.push('Name is too long (maximum 100 characters)');\n  }\n\n  // Check for valid characters (letters, spaces, hyphens, apostrophes)\n  const nameRegex = /^[a-zA-Z\\s\\-'\\.]+$/;\n  if (!nameRegex.test(name)) {\n    errors.push('Name can only contain letters, spaces, hyphens, and apostrophes');\n  }\n\n  // Check for excessive spaces or special characters\n  if (name.includes('  ')) {\n    warnings.push('Name contains multiple consecutive spaces');\n  }\n\n  if (name.startsWith(' ') || name.endsWith(' ')) {\n    warnings.push('Name has leading or trailing spaces');\n  }\n\n  return { isValid: errors.length === 0, errors, warnings };\n};\n\n// Phone validation\nexport const validatePhone = (phone: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!phone) {\n    return { isValid: true, errors, warnings }; // Phone is optional\n  }\n\n  // Remove all non-digit characters for validation\n  const digitsOnly = phone.replace(/\\D/g, '');\n\n  if (digitsOnly.length < 10) {\n    errors.push('Phone number must be at least 10 digits');\n  }\n\n  if (digitsOnly.length > 15) {\n    errors.push('Phone number is too long (maximum 15 digits)');\n  }\n\n  // Check for valid phone format (international or local)\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n  if (!phoneRegex.test(digitsOnly)) {\n    errors.push('Please enter a valid phone number');\n  }\n\n  return { isValid: errors.length === 0, errors, warnings };\n};\n\n// Role validation\nexport const validateRole = (role: string): ValidationResult => {\n  const errors: string[] = [];\n  const validRoles = ['admin', 'seller', 'customer'];\n\n  if (!role) {\n    errors.push('Role is required');\n    return { isValid: false, errors };\n  }\n\n  if (!validRoles.includes(role.toLowerCase())) {\n    errors.push('Invalid role. Must be admin, seller, or customer');\n  }\n\n  return { isValid: errors.length === 0, errors };\n};\n\n// Date of birth validation\nexport const validateDateOfBirth = (dateOfBirth: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!dateOfBirth) {\n    return { isValid: true, errors, warnings }; // DOB is optional\n  }\n\n  const date = new Date(dateOfBirth);\n  const now = new Date();\n\n  if (isNaN(date.getTime())) {\n    errors.push('Please enter a valid date');\n    return { isValid: false, errors, warnings };\n  }\n\n  // Check if date is in the future\n  if (date > now) {\n    errors.push('Date of birth cannot be in the future');\n  }\n\n  // Check if person is too old (over 120 years)\n  const maxAge = new Date();\n  maxAge.setFullYear(maxAge.getFullYear() - 120);\n  if (date < maxAge) {\n    errors.push('Date of birth seems unrealistic (over 120 years ago)');\n  }\n\n  // Check if person is too young (under 13 years for COPPA compliance)\n  const minAge = new Date();\n  minAge.setFullYear(minAge.getFullYear() - 13);\n  if (date > minAge) {\n    warnings.push('User appears to be under 13 years old. Additional parental consent may be required.');\n  }\n\n  return { isValid: errors.length === 0, errors, warnings };\n};\n\n// Comprehensive user validation\nexport const validateUser = (userData: UserValidationData): ValidationResult => {\n  const allErrors: string[] = [];\n  const allWarnings: string[] = [];\n\n  // Validate each field\n  const emailResult = validateEmail(userData.email);\n  const nameResult = validateName(userData.name);\n  const roleResult = validateRole(userData.role);\n  const phoneResult = validatePhone(userData.phone || '');\n  const dobResult = validateDateOfBirth(userData.dateOfBirth || '');\n\n  // Collect all errors and warnings\n  allErrors.push(...emailResult.errors);\n  allErrors.push(...nameResult.errors);\n  allErrors.push(...roleResult.errors);\n  allErrors.push(...phoneResult.errors);\n  allErrors.push(...dobResult.errors);\n\n  allWarnings.push(...(emailResult.warnings || []));\n  allWarnings.push(...(nameResult.warnings || []));\n  allWarnings.push(...(phoneResult.warnings || []));\n  allWarnings.push(...(dobResult.warnings || []));\n\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors,\n    warnings: allWarnings\n  };\n};\n\n// Password strength validation\nexport const validatePasswordStrength = (password: string): ValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!password) {\n    errors.push('Password is required');\n    return { isValid: false, errors, warnings };\n  }\n\n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n\n  if (password.length > 128) {\n    errors.push('Password is too long (maximum 128 characters)');\n  }\n\n  // Check for character variety\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasNumbers = /\\d/.test(password);\n  const hasSpecialChars = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password);\n\n  if (!hasLowercase) {\n    warnings.push('Password should include lowercase letters');\n  }\n\n  if (!hasUppercase) {\n    warnings.push('Password should include uppercase letters');\n  }\n\n  if (!hasNumbers) {\n    warnings.push('Password should include numbers');\n  }\n\n  if (!hasSpecialChars) {\n    warnings.push('Password should include special characters');\n  }\n\n  // Check for common patterns\n  const commonPatterns = [\n    /123456/,\n    /password/i,\n    /qwerty/i,\n    /admin/i,\n    /letmein/i\n  ];\n\n  for (const pattern of commonPatterns) {\n    if (pattern.test(password)) {\n      warnings.push('Password contains common patterns that are easy to guess');\n      break;\n    }\n  }\n\n  return { isValid: errors.length === 0, errors, warnings };\n};\n\n// Sanitize input to prevent XSS\nexport const sanitizeInput = (input: string): string => {\n  if (!input) return '';\n  \n  return input\n    .replace(/[<>]/g, '') // Remove angle brackets\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\n    .replace(/on\\w+=/gi, '') // Remove event handlers\n    .trim();\n};\n\n// Rate limiting helper\nexport const createRateLimiter = (maxRequests: number, windowMs: number) => {\n  const requests = new Map<string, number[]>();\n\n  return (identifier: string): boolean => {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n\n    // Get existing requests for this identifier\n    const userRequests = requests.get(identifier) || [];\n    \n    // Filter out old requests\n    const recentRequests = userRequests.filter(time => time > windowStart);\n    \n    // Check if limit exceeded\n    if (recentRequests.length >= maxRequests) {\n      return false;\n    }\n\n    // Add current request\n    recentRequests.push(now);\n    requests.set(identifier, recentRequests);\n\n    return true;\n  };\n};\n\n// Create rate limiters for different operations\nexport const userCreationLimiter = createRateLimiter(5, 60000); // 5 requests per minute\nexport const emailSendLimiter = createRateLimiter(3, 300000); // 3 emails per 5 minutes\n","import { useEffect, useState, useCallback, useRef } from 'react';\n\n// WCAG compliance levels\nexport type WCAGLevel = 'A' | 'AA' | 'AAA';\n\n// Color contrast ratios for different WCAG levels\nexport const CONTRAST_RATIOS = {\n  A: { normal: 3, large: 3 },\n  AA: { normal: 4.5, large: 3 },\n  AAA: { normal: 7, large: 4.5 }\n} as const;\n\n// Accessibility preferences\nexport interface AccessibilityPreferences {\n  reducedMotion: boolean;\n  highContrast: boolean;\n  largeText: boolean;\n  screenReader: boolean;\n  keyboardNavigation: boolean;\n  focusVisible: boolean;\n  colorBlindness: 'none' | 'protanopia' | 'deuteranopia' | 'tritanopia';\n}\n\n// Focus management\nexport interface FocusManager {\n  trapFocus: (container: HTMLElement) => () => void;\n  restoreFocus: (element?: HTMLElement) => void;\n  moveFocus: (direction: 'next' | 'previous' | 'first' | 'last') => void;\n  getFocusableElements: (container: HTMLElement) => HTMLElement[];\n}\n\n// Announcement types for screen readers\nexport type AnnouncementPriority = 'polite' | 'assertive' | 'off';\n\n/**\n * Hook for managing accessibility preferences\n */\nexport const useAccessibilityPreferences = () => {\n  const [preferences, setPreferences] = useState<AccessibilityPreferences>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        reducedMotion: false,\n        highContrast: false,\n        largeText: false,\n        screenReader: false,\n        keyboardNavigation: false,\n        focusVisible: false,\n        colorBlindness: 'none'\n      };\n    }\n\n    return detectAccessibilityPreferences();\n  });\n\n  useEffect(() => {\n    const updatePreferences = () => {\n      setPreferences(detectAccessibilityPreferences());\n    };\n\n    // Listen for media query changes\n    const mediaQueries = [\n      window.matchMedia('(prefers-reduced-motion: reduce)'),\n      window.matchMedia('(prefers-contrast: high)'),\n      window.matchMedia('(prefers-color-scheme: dark)')\n    ];\n\n    mediaQueries.forEach(mq => {\n      mq.addEventListener('change', updatePreferences);\n    });\n\n    // Listen for storage changes (user preferences)\n    window.addEventListener('storage', updatePreferences);\n\n    return () => {\n      mediaQueries.forEach(mq => {\n        mq.removeEventListener('change', updatePreferences);\n      });\n      window.removeEventListener('storage', updatePreferences);\n    };\n  }, []);\n\n  const updatePreference = useCallback(<K extends keyof AccessibilityPreferences>(\n    key: K,\n    value: AccessibilityPreferences[K]\n  ) => {\n    setPreferences(prev => ({ ...prev, [key]: value }));\n    \n    // Save to localStorage\n    try {\n      const saved = JSON.parse(localStorage.getItem('accessibility_preferences') || '{}');\n      localStorage.setItem('accessibility_preferences', JSON.stringify({\n        ...saved,\n        [key]: value\n      }));\n    } catch (error) {\n      console.warn('Failed to save accessibility preference:', error);\n    }\n  }, []);\n\n  return {\n    preferences,\n    updatePreference\n  };\n};\n\n/**\n * Detect accessibility preferences from system and user settings\n */\nfunction detectAccessibilityPreferences(): AccessibilityPreferences {\n  const preferences: AccessibilityPreferences = {\n    reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n    highContrast: window.matchMedia('(prefers-contrast: high)').matches,\n    largeText: false,\n    screenReader: false,\n    keyboardNavigation: false,\n    focusVisible: false,\n    colorBlindness: 'none'\n  };\n\n  // Check for screen reader\n  preferences.screenReader = !!(\n    window.navigator.userAgent.match(/NVDA|JAWS|VoiceOver|ORCA|Dragon/i) ||\n    window.speechSynthesis ||\n    (window as any).speechSynthesis\n  );\n\n  // Load saved preferences\n  try {\n    const saved = JSON.parse(localStorage.getItem('accessibility_preferences') || '{}');\n    Object.assign(preferences, saved);\n  } catch (error) {\n    console.warn('Failed to load accessibility preferences:', error);\n  }\n\n  return preferences;\n}\n\n/**\n * Hook for focus management\n */\nexport const useFocusManagement = (): FocusManager => {\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n\n  const getFocusableElements = useCallback((container: HTMLElement): HTMLElement[] => {\n    const focusableSelectors = [\n      'a[href]',\n      'button:not([disabled])',\n      'input:not([disabled])',\n      'select:not([disabled])',\n      'textarea:not([disabled])',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable=\"true\"]'\n    ].join(', ');\n\n    return Array.from(container.querySelectorAll(focusableSelectors))\n      .filter(el => {\n        const element = el as HTMLElement;\n        return element.offsetWidth > 0 && \n               element.offsetHeight > 0 && \n               !element.hidden &&\n               window.getComputedStyle(element).visibility !== 'hidden';\n      }) as HTMLElement[];\n  }, []);\n\n  const trapFocus = useCallback((container: HTMLElement) => {\n    const focusableElements = getFocusableElements(container);\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    // Store current focus\n    previousFocusRef.current = document.activeElement as HTMLElement;\n\n    // Focus first element\n    if (firstElement) {\n      firstElement.focus();\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key !== 'Tab') return;\n\n      if (event.shiftKey) {\n        // Shift + Tab\n        if (document.activeElement === firstElement) {\n          event.preventDefault();\n          lastElement?.focus();\n        }\n      } else {\n        // Tab\n        if (document.activeElement === lastElement) {\n          event.preventDefault();\n          firstElement?.focus();\n        }\n      }\n    };\n\n    container.addEventListener('keydown', handleKeyDown);\n\n    // Return cleanup function\n    return () => {\n      container.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [getFocusableElements]);\n\n  const restoreFocus = useCallback((element?: HTMLElement) => {\n    const targetElement = element || previousFocusRef.current;\n    if (targetElement && document.contains(targetElement)) {\n      targetElement.focus();\n    }\n    previousFocusRef.current = null;\n  }, []);\n\n  const moveFocus = useCallback((direction: 'next' | 'previous' | 'first' | 'last') => {\n    const focusableElements = getFocusableElements(document.body);\n    const currentIndex = focusableElements.indexOf(document.activeElement as HTMLElement);\n\n    let targetIndex: number;\n    switch (direction) {\n      case 'next':\n        targetIndex = (currentIndex + 1) % focusableElements.length;\n        break;\n      case 'previous':\n        targetIndex = currentIndex <= 0 ? focusableElements.length - 1 : currentIndex - 1;\n        break;\n      case 'first':\n        targetIndex = 0;\n        break;\n      case 'last':\n        targetIndex = focusableElements.length - 1;\n        break;\n    }\n\n    focusableElements[targetIndex]?.focus();\n  }, [getFocusableElements]);\n\n  return {\n    trapFocus,\n    restoreFocus,\n    moveFocus,\n    getFocusableElements\n  };\n};\n\n/**\n * Hook for screen reader announcements\n */\nexport const useScreenReaderAnnouncements = () => {\n  const announcementRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    // Create announcement container\n    if (!announcementRef.current) {\n      const container = document.createElement('div');\n      container.setAttribute('aria-live', 'polite');\n      container.setAttribute('aria-atomic', 'true');\n      container.className = 'sr-only';\n      container.style.cssText = `\n        position: absolute !important;\n        width: 1px !important;\n        height: 1px !important;\n        padding: 0 !important;\n        margin: -1px !important;\n        overflow: hidden !important;\n        clip: rect(0, 0, 0, 0) !important;\n        white-space: nowrap !important;\n        border: 0 !important;\n      `;\n      document.body.appendChild(container);\n      announcementRef.current = container;\n    }\n\n    return () => {\n      if (announcementRef.current && document.body.contains(announcementRef.current)) {\n        document.body.removeChild(announcementRef.current);\n      }\n    };\n  }, []);\n\n  const announce = useCallback((\n    message: string, \n    priority: AnnouncementPriority = 'polite'\n  ) => {\n    if (!announcementRef.current) return;\n\n    // Update aria-live attribute\n    announcementRef.current.setAttribute('aria-live', priority);\n    \n    // Clear and set message\n    announcementRef.current.textContent = '';\n    setTimeout(() => {\n      if (announcementRef.current) {\n        announcementRef.current.textContent = message;\n      }\n    }, 100);\n  }, []);\n\n  return { announce };\n};\n\n/**\n * Hook for keyboard navigation\n */\nexport const useKeyboardNavigation = (\n  handlers: Record<string, (event: KeyboardEvent) => void>\n) => {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const key = event.key.toLowerCase();\n      const modifiers = [];\n      \n      if (event.ctrlKey) modifiers.push('ctrl');\n      if (event.altKey) modifiers.push('alt');\n      if (event.shiftKey) modifiers.push('shift');\n      if (event.metaKey) modifiers.push('meta');\n      \n      const keyCombo = modifiers.length > 0 ? `${modifiers.join('+')}+${key}` : key;\n      \n      if (handlers[keyCombo]) {\n        handlers[keyCombo](event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handlers]);\n};\n\n/**\n * Color contrast utilities\n */\nexport const colorContrast = {\n  // Convert hex to RGB\n  hexToRgb: (hex: string): { r: number; g: number; b: number } | null => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  },\n\n  // Calculate relative luminance\n  getLuminance: (r: number, g: number, b: number): number => {\n    const [rs, gs, bs] = [r, g, b].map(c => {\n      c = c / 255;\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n    return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n  },\n\n  // Calculate contrast ratio\n  getContrastRatio: (color1: string, color2: string): number => {\n    const rgb1 = colorContrast.hexToRgb(color1);\n    const rgb2 = colorContrast.hexToRgb(color2);\n    \n    if (!rgb1 || !rgb2) return 0;\n    \n    const lum1 = colorContrast.getLuminance(rgb1.r, rgb1.g, rgb1.b);\n    const lum2 = colorContrast.getLuminance(rgb2.r, rgb2.g, rgb2.b);\n    \n    const brightest = Math.max(lum1, lum2);\n    const darkest = Math.min(lum1, lum2);\n    \n    return (brightest + 0.05) / (darkest + 0.05);\n  },\n\n  // Check WCAG compliance\n  checkWCAGCompliance: (\n    foreground: string, \n    background: string, \n    level: WCAGLevel = 'AA',\n    isLargeText: boolean = false\n  ): boolean => {\n    const ratio = colorContrast.getContrastRatio(foreground, background);\n    const required = CONTRAST_RATIOS[level][isLargeText ? 'large' : 'normal'];\n    return ratio >= required;\n  }\n};\n\n/**\n * ARIA utilities\n */\nexport const ariaUtils = {\n  // Generate unique IDs for ARIA relationships\n  generateId: (prefix: string = 'aria'): string => {\n    return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n  },\n\n  // Create ARIA describedby relationship\n  createDescribedBy: (elements: HTMLElement[]): string => {\n    return elements\n      .map(el => el.id || (el.id = ariaUtils.generateId()))\n      .join(' ');\n  },\n\n  // Set ARIA expanded state\n  setExpanded: (element: HTMLElement, expanded: boolean): void => {\n    element.setAttribute('aria-expanded', expanded.toString());\n  },\n\n  // Set ARIA selected state\n  setSelected: (element: HTMLElement, selected: boolean): void => {\n    element.setAttribute('aria-selected', selected.toString());\n  },\n\n  // Set ARIA pressed state\n  setPressed: (element: HTMLElement, pressed: boolean): void => {\n    element.setAttribute('aria-pressed', pressed.toString());\n  },\n\n  // Set ARIA checked state\n  setChecked: (element: HTMLElement, checked: boolean | 'mixed'): void => {\n    element.setAttribute('aria-checked', checked.toString());\n  }\n};\n\n/**\n * Skip link utilities\n */\nexport const skipLinks = {\n  create: (target: string, text: string = 'Skip to main content'): HTMLAnchorElement => {\n    const skipLink = document.createElement('a');\n    skipLink.href = target;\n    skipLink.textContent = text;\n    skipLink.className = 'skip-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-blue-600 focus:text-white focus:rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500';\n    return skipLink;\n  },\n\n  install: (links: Array<{ target: string; text: string }>): void => {\n    const container = document.createElement('div');\n    container.className = 'skip-links';\n    \n    links.forEach(({ target, text }) => {\n      container.appendChild(skipLinks.create(target, text));\n    });\n    \n    document.body.insertBefore(container, document.body.firstChild);\n  }\n};\n\n/**\n * Accessibility testing utilities\n */\nexport const accessibilityTest = {\n  // Check for missing alt text\n  checkAltText: (container: HTMLElement = document.body): HTMLImageElement[] => {\n    const images = container.querySelectorAll('img');\n    return Array.from(images).filter(img => \n      !img.alt && \n      !img.getAttribute('aria-label') && \n      !img.getAttribute('aria-labelledby') &&\n      img.getAttribute('role') !== 'presentation'\n    );\n  },\n\n  // Check for missing form labels\n  checkFormLabels: (container: HTMLElement = document.body): HTMLInputElement[] => {\n    const inputs = container.querySelectorAll('input, select, textarea');\n    return Array.from(inputs).filter(input => {\n      const element = input as HTMLInputElement;\n      return !element.labels?.length && \n             !element.getAttribute('aria-label') && \n             !element.getAttribute('aria-labelledby') &&\n             element.type !== 'hidden';\n    });\n  },\n\n  // Check heading hierarchy\n  checkHeadingHierarchy: (container: HTMLElement = document.body): Array<{ element: HTMLElement; issue: string }> => {\n    const headings = Array.from(container.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n    const issues: Array<{ element: HTMLElement; issue: string }> = [];\n    \n    let previousLevel = 0;\n    headings.forEach(heading => {\n      const level = parseInt(heading.tagName.charAt(1));\n      \n      if (level > previousLevel + 1) {\n        issues.push({\n          element: heading as HTMLElement,\n          issue: `Heading level ${level} follows level ${previousLevel}, skipping levels`\n        });\n      }\n      \n      previousLevel = level;\n    });\n    \n    return issues;\n  },\n\n  // Generate accessibility report\n  generateReport: (container: HTMLElement = document.body) => {\n    return {\n      missingAltText: accessibilityTest.checkAltText(container),\n      missingFormLabels: accessibilityTest.checkFormLabels(container),\n      headingIssues: accessibilityTest.checkHeadingHierarchy(container),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\n","import { useState, useEffect, useCallback, useMemo } from 'react';\n\n// Enhanced breakpoint system\nexport const BREAKPOINTS = {\n  xs: 320,   // Extra small devices\n  sm: 640,   // Small devices\n  md: 768,   // Medium devices\n  lg: 1024,  // Large devices\n  xl: 1280,  // Extra large devices\n  '2xl': 1536, // 2X large devices\n  '3xl': 1920, // Ultra wide displays\n  '4xl': 2560  // 4K displays\n} as const;\n\nexport type BreakpointKey = keyof typeof BREAKPOINTS;\n\n// Device types\nexport type DeviceType = 'mobile' | 'tablet' | 'desktop' | 'tv';\n\n// Orientation types\nexport type Orientation = 'portrait' | 'landscape';\n\n// Viewport information\nexport interface ViewportInfo {\n  width: number;\n  height: number;\n  breakpoint: BreakpointKey;\n  deviceType: DeviceType;\n  orientation: Orientation;\n  pixelRatio: number;\n  isTouch: boolean;\n  isPWA: boolean;\n  isRetina: boolean;\n  aspectRatio: number;\n  safeAreaInsets: {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n  };\n}\n\n// Container sizes for different breakpoints\nexport const CONTAINER_SIZES = {\n  xs: '100%',\n  sm: '640px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1280px',\n  '2xl': '1536px',\n  '3xl': '1920px',\n  '4xl': '2560px'\n} as const;\n\n// Grid system configuration\nexport const GRID_COLUMNS = {\n  xs: 4,\n  sm: 8,\n  md: 12,\n  lg: 12,\n  xl: 12,\n  '2xl': 12,\n  '3xl': 16,\n  '4xl': 20\n} as const;\n\n// Spacing scale for responsive design\nexport const SPACING_SCALE = {\n  xs: { base: 4, scale: 1 },\n  sm: { base: 4, scale: 1.2 },\n  md: { base: 6, scale: 1.4 },\n  lg: { base: 8, scale: 1.6 },\n  xl: { base: 10, scale: 1.8 },\n  '2xl': { base: 12, scale: 2 },\n  '3xl': { base: 16, scale: 2.2 },\n  '4xl': { base: 20, scale: 2.4 }\n} as const;\n\n// Typography scale for responsive design\nexport const TYPOGRAPHY_SCALE = {\n  xs: { base: 14, scale: 1 },\n  sm: { base: 14, scale: 1.1 },\n  md: { base: 16, scale: 1.2 },\n  lg: { base: 16, scale: 1.3 },\n  xl: { base: 18, scale: 1.4 },\n  '2xl': { base: 18, scale: 1.5 },\n  '3xl': { base: 20, scale: 1.6 },\n  '4xl': { base: 22, scale: 1.7 }\n} as const;\n\n/**\n * Enhanced responsive hook with comprehensive viewport information\n */\nexport const useResponsiveDesign = () => {\n  const [viewportInfo, setViewportInfo] = useState<ViewportInfo>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        width: 1024,\n        height: 768,\n        breakpoint: 'lg' as BreakpointKey,\n        deviceType: 'desktop' as DeviceType,\n        orientation: 'landscape' as Orientation,\n        pixelRatio: 1,\n        isTouch: false,\n        isPWA: false,\n        isRetina: false,\n        aspectRatio: 1.33,\n        safeAreaInsets: { top: 0, right: 0, bottom: 0, left: 0 }\n      };\n    }\n\n    return calculateViewportInfo();\n  });\n\n  const updateViewportInfo = useCallback(() => {\n    setViewportInfo(calculateViewportInfo());\n  }, []);\n\n  useEffect(() => {\n    // Initial calculation\n    updateViewportInfo();\n\n    // Listen for resize events\n    const handleResize = debounce(updateViewportInfo, 150);\n    window.addEventListener('resize', handleResize);\n\n    // Listen for orientation changes\n    const handleOrientationChange = () => {\n      // Delay to ensure dimensions are updated\n      setTimeout(updateViewportInfo, 100);\n    };\n    window.addEventListener('orientationchange', handleOrientationChange);\n\n    // Listen for PWA installation\n    const handleBeforeInstallPrompt = () => {\n      updateViewportInfo();\n    };\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('orientationchange', handleOrientationChange);\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    };\n  }, [updateViewportInfo]);\n\n  // Responsive utilities\n  const isBreakpoint = useCallback((breakpoint: BreakpointKey) => {\n    return viewportInfo.breakpoint === breakpoint;\n  }, [viewportInfo.breakpoint]);\n\n  const isBreakpointUp = useCallback((breakpoint: BreakpointKey) => {\n    return viewportInfo.width >= BREAKPOINTS[breakpoint];\n  }, [viewportInfo.width]);\n\n  const isBreakpointDown = useCallback((breakpoint: BreakpointKey) => {\n    return viewportInfo.width < BREAKPOINTS[breakpoint];\n  }, [viewportInfo.width]);\n\n  const getResponsiveValue = useCallback(<T>(values: Partial<Record<BreakpointKey, T>>): T | undefined => {\n    const breakpoints = Object.keys(BREAKPOINTS) as BreakpointKey[];\n    const sortedBreakpoints = breakpoints.sort((a, b) => BREAKPOINTS[a] - BREAKPOINTS[b]);\n\n    // Find the largest breakpoint that matches\n    for (let i = sortedBreakpoints.length - 1; i >= 0; i--) {\n      const bp = sortedBreakpoints[i];\n      if (viewportInfo.width >= BREAKPOINTS[bp] && values[bp] !== undefined) {\n        return values[bp];\n      }\n    }\n\n    // Fallback to the smallest available value\n    for (const bp of sortedBreakpoints) {\n      if (values[bp] !== undefined) {\n        return values[bp];\n      }\n    }\n\n    return undefined;\n  }, [viewportInfo.width]);\n\n  const getContainerSize = useCallback(() => {\n    return CONTAINER_SIZES[viewportInfo.breakpoint];\n  }, [viewportInfo.breakpoint]);\n\n  const getGridColumns = useCallback(() => {\n    return GRID_COLUMNS[viewportInfo.breakpoint];\n  }, [viewportInfo.breakpoint]);\n\n  const getSpacing = useCallback((multiplier: number = 1) => {\n    const config = SPACING_SCALE[viewportInfo.breakpoint];\n    return config.base * config.scale * multiplier;\n  }, [viewportInfo.breakpoint]);\n\n  const getTypographySize = useCallback((multiplier: number = 1) => {\n    const config = TYPOGRAPHY_SCALE[viewportInfo.breakpoint];\n    return config.base * config.scale * multiplier;\n  }, [viewportInfo.breakpoint]);\n\n  return {\n    ...viewportInfo,\n    isBreakpoint,\n    isBreakpointUp,\n    isBreakpointDown,\n    getResponsiveValue,\n    getContainerSize,\n    getGridColumns,\n    getSpacing,\n    getTypographySize,\n    isMobile: viewportInfo.deviceType === 'mobile',\n    isTablet: viewportInfo.deviceType === 'tablet',\n    isDesktop: viewportInfo.deviceType === 'desktop',\n    isPortrait: viewportInfo.orientation === 'portrait',\n    isLandscape: viewportInfo.orientation === 'landscape'\n  };\n};\n\n/**\n * Calculate comprehensive viewport information\n */\nfunction calculateViewportInfo(): ViewportInfo {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const pixelRatio = window.devicePixelRatio || 1;\n  const aspectRatio = width / height;\n\n  // Determine breakpoint\n  let breakpoint: BreakpointKey = 'xs';\n  const breakpointEntries = Object.entries(BREAKPOINTS) as [BreakpointKey, number][];\n  for (const [bp, minWidth] of breakpointEntries.reverse()) {\n    if (width >= minWidth) {\n      breakpoint = bp;\n      break;\n    }\n  }\n\n  // Determine device type\n  let deviceType: DeviceType = 'desktop';\n  if (width < BREAKPOINTS.md) {\n    deviceType = 'mobile';\n  } else if (width < BREAKPOINTS.lg) {\n    deviceType = 'tablet';\n  } else if (width >= BREAKPOINTS['3xl']) {\n    deviceType = 'tv';\n  }\n\n  // Determine orientation\n  const orientation: Orientation = width > height ? 'landscape' : 'portrait';\n\n  // Check for touch support\n  const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n\n  // Check for PWA\n  const isPWA = window.matchMedia('(display-mode: standalone)').matches ||\n                window.matchMedia('(display-mode: fullscreen)').matches ||\n                (window.navigator as any).standalone === true;\n\n  // Check for retina display\n  const isRetina = pixelRatio > 1;\n\n  // Calculate safe area insets (for PWA/mobile)\n  const safeAreaInsets = {\n    top: parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-top') || '0'),\n    right: parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-right') || '0'),\n    bottom: parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-bottom') || '0'),\n    left: parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-area-inset-left') || '0')\n  };\n\n  return {\n    width,\n    height,\n    breakpoint,\n    deviceType,\n    orientation,\n    pixelRatio,\n    isTouch,\n    isPWA,\n    isRetina,\n    aspectRatio,\n    safeAreaInsets\n  };\n}\n\n/**\n * Debounce utility function\n */\nfunction debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {\n  let timeout: NodeJS.Timeout;\n  return ((...args: any[]) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  }) as T;\n}\n\n/**\n * Hook for responsive classes\n */\nexport const useResponsiveClasses = () => {\n  const { breakpoint, deviceType, orientation, isPWA, isTouch } = useResponsiveDesign();\n\n  return useMemo(() => {\n    const classes = [\n      `breakpoint-${breakpoint}`,\n      `device-${deviceType}`,\n      `orientation-${orientation}`,\n      isTouch && 'touch-device',\n      isPWA && 'pwa-mode',\n      !isTouch && 'no-touch'\n    ].filter(Boolean);\n\n    return classes.join(' ');\n  }, [breakpoint, deviceType, orientation, isPWA, isTouch]);\n};\n\n/**\n * Hook for responsive grid system\n */\nexport const useResponsiveGrid = (columns?: Partial<Record<BreakpointKey, number>>) => {\n  const { getGridColumns, getResponsiveValue } = useResponsiveDesign();\n\n  const gridColumns = useMemo(() => {\n    if (columns) {\n      return getResponsiveValue(columns) || getGridColumns();\n    }\n    return getGridColumns();\n  }, [columns, getResponsiveValue, getGridColumns]);\n\n  const getColumnSpan = useCallback((span: number | Partial<Record<BreakpointKey, number>>) => {\n    if (typeof span === 'number') {\n      return Math.min(span, gridColumns);\n    }\n    return Math.min(getResponsiveValue(span) || 1, gridColumns);\n  }, [gridColumns, getResponsiveValue]);\n\n  const getColumnWidth = useCallback((span: number | Partial<Record<BreakpointKey, number>>) => {\n    const actualSpan = getColumnSpan(span);\n    return `${(actualSpan / gridColumns) * 100}%`;\n  }, [getColumnSpan, gridColumns]);\n\n  return {\n    gridColumns,\n    getColumnSpan,\n    getColumnWidth\n  };\n};\n\n/**\n * Hook for responsive spacing\n */\nexport const useResponsiveSpacing = () => {\n  const { getSpacing } = useResponsiveDesign();\n\n  const spacing = useMemo(() => ({\n    xs: getSpacing(0.25),\n    sm: getSpacing(0.5),\n    md: getSpacing(1),\n    lg: getSpacing(1.5),\n    xl: getSpacing(2),\n    '2xl': getSpacing(3),\n    '3xl': getSpacing(4),\n    '4xl': getSpacing(6)\n  }), [getSpacing]);\n\n  return spacing;\n};\n\n/**\n * Hook for responsive typography\n */\nexport const useResponsiveTypography = () => {\n  const { getTypographySize } = useResponsiveDesign();\n\n  const typography = useMemo(() => ({\n    xs: getTypographySize(0.75),\n    sm: getTypographySize(0.875),\n    base: getTypographySize(1),\n    lg: getTypographySize(1.125),\n    xl: getTypographySize(1.25),\n    '2xl': getTypographySize(1.5),\n    '3xl': getTypographySize(1.875),\n    '4xl': getTypographySize(2.25),\n    '5xl': getTypographySize(3),\n    '6xl': getTypographySize(3.75)\n  }), [getTypographySize]);\n\n  return typography;\n};\n\n/**\n * Media query utilities\n */\nexport const mediaQueries = {\n  up: (breakpoint: BreakpointKey) => `@media (min-width: ${BREAKPOINTS[breakpoint]}px)`,\n  down: (breakpoint: BreakpointKey) => `@media (max-width: ${BREAKPOINTS[breakpoint] - 1}px)`,\n  between: (min: BreakpointKey, max: BreakpointKey) => \n    `@media (min-width: ${BREAKPOINTS[min]}px) and (max-width: ${BREAKPOINTS[max] - 1}px)`,\n  only: (breakpoint: BreakpointKey) => {\n    const breakpointKeys = Object.keys(BREAKPOINTS) as BreakpointKey[];\n    const currentIndex = breakpointKeys.indexOf(breakpoint);\n    const nextBreakpoint = breakpointKeys[currentIndex + 1];\n    \n    if (nextBreakpoint) {\n      return `@media (min-width: ${BREAKPOINTS[breakpoint]}px) and (max-width: ${BREAKPOINTS[nextBreakpoint] - 1}px)`;\n    } else {\n      return `@media (min-width: ${BREAKPOINTS[breakpoint]}px)`;\n    }\n  },\n  touch: '@media (hover: none) and (pointer: coarse)',\n  hover: '@media (hover: hover) and (pointer: fine)',\n  retina: '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  landscape: '@media (orientation: landscape)',\n  portrait: '@media (orientation: portrait)',\n  pwa: '@media (display-mode: standalone)'\n};\n\n/**\n * Responsive image utilities\n */\nexport const getResponsiveImageSizes = (\n  sizes: Partial<Record<BreakpointKey, string>>\n): string => {\n  const breakpointKeys = Object.keys(BREAKPOINTS) as BreakpointKey[];\n  const sortedBreakpoints = breakpointKeys.sort((a, b) => BREAKPOINTS[b] - BREAKPOINTS[a]);\n  \n  const sizesArray: string[] = [];\n  \n  for (const bp of sortedBreakpoints) {\n    if (sizes[bp]) {\n      if (bp === 'xs') {\n        sizesArray.push(sizes[bp]!);\n      } else {\n        sizesArray.push(`(min-width: ${BREAKPOINTS[bp]}px) ${sizes[bp]}`);\n      }\n    }\n  }\n  \n  return sizesArray.join(', ');\n};\n"],"names":["handleSupabaseError","error","pgError","code","type","message","userMessage","details","includes","detectRLSRecursionError","some","pattern","toLowerCase","_PerformanceMonitor","constructor","__publicField","this","Map","getInstance","instance","startMeasure","name","measurements","set","performance","now","endMeasure","success","startTime","get","duration","metrics","push","timestamp","Date","length","maxMetrics","shift","delete","getStats","recentMetrics","filter","m","successfulMetrics","totalRequests","successRate","averageTime","slowestOperation","fastestOperation","durations","map","reduce","sum","d","slowest","current","fastest","measureAsync","fn","result","measureSync","performanceMonitor","EnhancedCache","strategy","hitRate","totalHits","totalMisses","totalSize","entryCount","gcRuns","lastGC","Set","maxSize","maxEntries","defaultTTL","gcInterval","compressionThreshold","startGarbageCollection","key","data","options","ttl","priority","tags","compress","serializedData","serializeData","size","calculateSize","shouldEvict","evictEntries","entry","accessCount","lastAccessed","cache","updateStats","stats","isExpired","updateHitRate","queueBackgroundUpdate","deserializeData","has","clearByTags","cleared","entries","tag","clear","prefetch","fetchFn","getOrFetch","staleWhileRevalidate","cacheOptions","cachedData","freshData","compressed","JSON","stringify","newEntrySize","requiredSpace","Array","from","sort","a","b","priorityScore","low","medium","high","Math","abs","freedSpace","operation","gcTimer","setInterval","runGarbageCollection","backgroundUpdateQueue","add","setTimeout","async","destroy","clearInterval","primaryCache","productCache","categoryCache","generateCacheKey","prefix","params","sortedParams","Object","keys","join","invalidateProductCache","productId","invalidateCategoryCache","COLOR_SCHEMES","neutral","primary","secondary","warm","cool","vibrant","monochrome","TYPOGRAPHY_SCALES","compact","fontFamily","sans","serif","mono","display","fontSize","xs","lineHeight","sm","base","lg","xl","fontWeight","light","normal","semibold","bold","comfortable","spacious","BORDER_RADIUS_CONFIGS","none","default","md","full","small","large","useAdvancedTheme","preferences","setPreferences","useState","window","mode","colorScheme","fontScale","borderRadius","animationLevel","highContrast","reducedMotion","saved","localStorage","getItem","parse","loadThemePreferences","systemPreferences","setSystemPreferences","prefersDark","prefersReducedMotion","prefersHighContrast","detectSystemPreferences","themeConfig","useMemo","actualMode","baseColors","typography","colors","isDark","accent","semantic","warning","info","background","tertiary","overlay","text","inverse","disabled","border","subtle","strong","interactive","generateColorPalette","spacing","scale","sizes","generateSpacingSizes","customProperties","generateCustomProperties","updatePreferences","useCallback","updates","prev","newPreferences","setItem","saveThemePreferences","useEffect","root","document","documentElement","forEach","property","value","style","setProperty","className","replace","classList","applyThemeToDOM","mediaQueries","matchMedia","handleChange","mq","addEventListener","removeEventListener","resetToDefaults","matches","properties","SkipLink","href","children","jsx","onFocus","e","currentTarget","remove","onBlur","querySelector","mainContent","tagName","main","createElement","id","_a","parentNode","insertBefore","appendChild","event","querySelectorAll","modal","closeButton","click","initializeDatabase","productsData","productsError","supabase","select","limit","categoriesData","categoriesError","profilesData","profilesError","StorageService","initializeAllBuckets","serviceWorkerManager","setupUpdateChecking","register","isSupported","registration","navigator","serviceWorker","scope","newWorker","installing","handleServiceWorkerUpdate","handleServiceWorkerMessage","unregister","updateCheckInterval","update","clearCache","sendMessage","getCacheStats","prefetchResources","urls","getRegistration","payload","controller","Error","Promise","resolve","reject","messageChannel","MessageChannel","port1","onmessage","postMessage","port2","state","showUpdateNotification","dispatchEvent","CustomEvent","detail","catch","console","applyUpdate","waiting","location","reload","cacheManager","sw","prefetchCriticalResources","criticalResources","prefetchRoute","route","routeResources","getRouteResources","getCacheHealth","recommendations","totalEntries","cacheName","cacheData","exists","cacheStatus","then","dataPreloader","preloadProduct","timeout","force","cacheKey","preloadedItems","preloadTask","product","race","getProductById","_","preloadQueue","unshift","processQueue","preloadCategoryProducts","categoryId","products","getProductsBasic","preloadNextPage","currentOffset","nextOffset","offset","preloadEssentials","categoryCacheKey","categories","getCategories","featuredCacheKey","featuredProducts","featured","isProcessing","task","queueLength","smartPreload","context","currentPage","userScrollPosition","timeOnPage","startsWith","exportTableData","tableName","format","includeHeaders","query","dateRange","gte","start","toISOString","lte","end","filters","eq","processed","errors","exportData","convertToCSV","downloadData","headers","csvRows","row","values","header","toString","filename","blob","Blob","link","url","URL","createObjectURL","setAttribute","visibility","body","removeChild","revokeObjectURL","bulkDeleteRecords","recordIds","in","validateUser","userData","allErrors","allWarnings","emailResult","email","warnings","isValid","test","localPart","split","domain","typoSuggestions","validateEmail","nameResult","endsWith","validateName","roleResult","role","validateRole","phoneResult","phone","digitsOnly","validatePhone","dobResult","dateOfBirth","date","isNaN","getTime","maxAge","setFullYear","getFullYear","minAge","validateDateOfBirth","sanitizeInput","input","trim","useAccessibilityPreferences","largeText","screenReader","keyboardNavigation","focusVisible","colorBlindness","detectAccessibilityPreferences","updatePreference","userAgent","match","speechSynthesis","assign","useScreenReaderAnnouncements","announcementRef","useRef","container","cssText","contains","announce","textContent","accessibilityTest","checkAltText","images","img","alt","getAttribute","checkFormLabels","inputs","element","labels","checkHeadingHierarchy","headings","issues","previousLevel","heading","level","parseInt","charAt","issue","generateReport","missingAltText","missingFormLabels","headingIssues","BREAKPOINTS","CONTAINER_SIZES","GRID_COLUMNS","SPACING_SCALE","TYPOGRAPHY_SCALE","useResponsiveDesign","viewportInfo","setViewportInfo","width","height","breakpoint","deviceType","orientation","pixelRatio","isTouch","isPWA","isRetina","aspectRatio","safeAreaInsets","top","right","bottom","left","calculateViewportInfo","updateViewportInfo","handleResize","func","wait","args","clearTimeout","apply","debounce","handleOrientationChange","handleBeforeInstallPrompt","isBreakpoint","isBreakpointUp","isBreakpointDown","getResponsiveValue","sortedBreakpoints","i","bp","getContainerSize","getGridColumns","getSpacing","multiplier","config","getTypographySize","isMobile","isTablet","isDesktop","isPortrait","isLandscape","innerWidth","innerHeight","devicePixelRatio","breakpointEntries","minWidth","reverse","maxTouchPoints","standalone","getComputedStyle","getPropertyValue","useResponsiveGrid","columns","gridColumns","getColumnSpan","span","min","getColumnWidth"],"mappings":"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"}