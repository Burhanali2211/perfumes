{"version":3,"file":"ui-CFZ2Pk_Q.js","sources":["../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/html/use-html-visual-state.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../../node_modules/framer-motion/dist/es/render/svg/use-svg-visual-state.mjs","../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../../node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../../node_modules/framer-motion/dist/es/render/store.mjs","../../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../../node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../../node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../../node_modules/framer-motion/dist/es/events/event-info.mjs","../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../node_modules/framer-motion/dist/es/gestures/hover.mjs","../../node_modules/framer-motion/dist/es/gestures/press.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","../../node_modules/framer-motion/dist/es/render/components/motion/feature-bundle.mjs","../../node_modules/framer-motion/dist/es/gestures/focus.mjs","../../node_modules/framer-motion/dist/es/motion/features/layout.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = \n/* @__PURE__ */ createContext(null);\n\nexport { PresenceContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isHTMLElement } from 'motion-dom';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = isHTMLElement(parent)\n                ? parent.offsetWidth || 0\n                : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX, root }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        const parent = root ?? document.head;\n        parent.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            parent.removeChild(style);\n            if (parent.contains(style)) {\n                parent.removeChild(style);\n            }\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, root }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    let isReusedContext = true;\n    let context = useMemo(() => {\n        isReusedContext = false;\n        return {\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId) => {\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()) {\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId) => {\n                presenceChildren.set(childId, false);\n                return () => presenceChildren.delete(childId);\n            },\n        };\n    }, [isPresent, presenceChildren, onExitComplete]);\n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    if (presenceAffectsLayout && isReusedContext) {\n        context = { ...context };\n    }\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, root: root, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", root }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender?.();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && safeToRemove?.();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, root: root, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (typeof isValidProp !== \"function\")\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = /* @__PURE__ */ createContext({});\n\nexport { MotionContext };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { isCSSVariableName } from 'motion-dom';\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for (const key in correctors) {\n        scaleCorrectors[key] = correctors[key];\n        if (isCSSVariableName(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { transformProps } from 'motion-dom';\nimport { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { isMotionValue } from 'motion-dom';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { px } from 'motion-dom';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attributes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction useRender(Component, props, ref, { latestValues, }, isStatic, forwardMotionProps = false) {\n    const useVisualProps = isSVGComponent(Component)\n        ? useSVGProps\n        : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = Component !== Fragment ? { ...filteredProps, ...visualProps, ref } : {};\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    const { children } = props;\n    const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n    return createElement(Component, {\n        ...elementProps,\n        children: renderedChildren,\n    });\n}\n\nexport { useRender };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement?.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isMotionValue } from 'motion-dom';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    return isMotionValue(value) ? value.get() : value;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\n\nexport { makeUseVisualState };\n","import { isMotionValue } from 'motion-dom';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            visualElement?.getValue(key)?.liveStyle !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst useHTMLVisualState = /*@__PURE__*/ makeUseVisualState({\n    scrapeMotionValuesFromProps,\n    createRenderState: createHtmlRenderState,\n});\n\nexport { useHTMLVisualState };\n","import { isMotionValue, transformPropOrder } from 'motion-dom';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst useSVGVisualState = /*@__PURE__*/ makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n});\n\nexport { useSVGVisualState };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement =\n        createVisualElement ||\n            lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&\n        window.MotionHasOptimisedAnimation?.(optimisedAppearId));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        visualElement.scheduleRenderMicrotask();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        crossfade: layoutCrossfade,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { warning, invariant } from 'motion-utils';\nimport { forwardRef, useContext } from 'react';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { useRender } from '../render/dom/use-render.mjs';\nimport { isSVGComponent } from '../render/dom/utils/is-svg-component.mjs';\nimport { useHTMLVisualState } from '../render/html/use-html-visual-state.mjs';\nimport { useSVGVisualState } from '../render/svg/use-svg-visual-state.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent(Component, { forwardMotionProps = false } = {}, preloadedFeatures, createVisualElement) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    const useVisualState = isSVGComponent(Component)\n        ? useSVGVisualState\n        : useHTMLVisualState;\n    function MotionDOMComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, forwardMotionProps)] }));\n    }\n    MotionDOMComponent.displayName = `motion.${typeof Component === \"string\"\n        ? Component\n        : `create(${Component.displayName ?? Component.name ?? \"\"})`}`;\n    const ForwardRefMotionComponent = forwardRef(MotionDOMComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage, \"lazy-strict-mode\")\n            : invariant(false, strictMessage, \"lazy-strict-mode\");\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createMotionComponent };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { warnOnce } from 'motion-utils';\nimport { createMotionComponent } from '../../motion/index.mjs';\n\nfunction createMotionProxy(preloadedFeatures, createVisualElement) {\n    if (typeof Proxy === \"undefined\") {\n        return createMotionComponent;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const factory = (Component, options) => {\n        return createMotionComponent(Component, options, preloadedFeatures, createVisualElement);\n    };\n    /**\n     * Support for deprecated`motion(Component)` pattern\n     */\n    const deprecatedFactoryFunction = (Component, options) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return factory(Component, options);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return factory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, createMotionComponent(key, undefined, preloadedFeatures, createVisualElement));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from 'motion-dom';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { KeyframeResolver, time, frame, isMotionValue, cancelFrame, transformProps, motionValue, findValueType, complex, getAnimatableNone, microtask } from 'motion-dom';\nimport { warnOnce, isNumericalString, isZeroValueString, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\", \"reduced-motion-disabled\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n    scheduleRenderMicrotask() {\n        microtask.render(this.render);\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addEventListener(\"change\", setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isMotionValue, motionValue } from 'motion-dom';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { DOMKeyframesResolver, isMotionValue } from 'motion-dom';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    const elementStyle = element.style;\n    let key;\n    for (key in style) {\n        // CSSStyleDeclaration has [index: number]: string; in the types, so we use that as key type.\n        elementStyle[key] = style[key];\n    }\n    // Write projection styles directly to element style\n    projection?.applyProjectionStyles(elementStyle, styleProp);\n    for (key in vars) {\n        // Loop over any CSS variables and assign those.\n        // They can only be assigned using `setProperty`.\n        elementStyle.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { transformProps, defaultTransformValue, readTransformValue, isCSSVariableName } from 'motion-dom';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            return this.projection?.isProjecting\n                ? defaultTransformValue(key)\n                : readTransformValue(instance, key);\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { transformProps, getDefaultValueType } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { motionValue } from 'motion-dom';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction resolveFinalValueInKeyframes(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { MotionGlobalConfig } from 'motion-utils';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!willChange && MotionGlobalConfig.WillChange) {\n        const newWillChange = new MotionGlobalConfig.WillChange(\"auto\");\n        visualElement.addValue(\"willChange\", newWillChange);\n        newWillChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { isMotionValue } from 'motion-dom';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from 'motion-dom';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { getValueTransition, frame, JSAnimation, AsyncMotionValueAnimation } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unique transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        Object.assign(options, getDefaultTransition(name, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    options.duration && (options.duration = secondsToMilliseconds(options.duration));\n    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));\n    /**\n     * Support deprecated way to set initial value. Prefer keyframe syntax.\n     */\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (MotionGlobalConfig.instantAnimations ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If the transition type or easing has been explicitly set by the user\n     * then we don't want to allow flattening the animation.\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    return valueTransition.isSync\n        ? new JSAnimation(options)\n        : new AsyncMotionValueAnimation(options);\n};\n\nexport { animateMotionValue };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? visualElement.presenceContext?.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, forwardDelay, delayChildren, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delay = 0, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const numChildren = visualElement.variantChildren.size;\n    const maxStaggerDuration = (numChildren - 1) * staggerChildren;\n    const delayIsFunction = typeof delayChildren === \"function\";\n    const generateStaggerDuration = delayIsFunction\n        ? (i) => delayChildren(i, numChildren)\n        : // Support deprecated staggerChildren\n            staggerDirection === 1\n                ? (i = 0) => i * staggerChildren\n                : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delay +\n                (delayIsFunction ? 0 : delayChildren) +\n                generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? visualElement.presenceContext?.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            /**\n             * If the initial prop contains a transition we can use that, otherwise\n             * allow the animation function to use the visual element's default.\n             */\n            if (typeof props.initial !== \"boolean\") {\n                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)\n                    ? props.initial[0]\n                    : props.initial);\n                if (initialTransition && initialTransition.transition) {\n                    fallbackAnimation.transition = initialTransition.transition;\n                }\n            }\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget ?? null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => {\n                onExitComplete(this.id);\n            });\n        }\n    }\n    mount() {\n        const { register, onExitComplete } = this.node.presenceContext || {};\n        if (onExitComplete) {\n            onExitComplete(this.id);\n        }\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        this.node.animationState.reset();\n        this.unmountControls?.();\n    }\n}\n\nexport { AnimationFeature };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","import { mixNumber } from 'motion-dom';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { frame, isPrimaryPointer, cancelFrame, frameData } from 'motion-dom';\nimport { pipe, secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow = window, dragSnapToOrigin = false, distanceThreshold = 3, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursor.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= this.distanceThreshold;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.distanceThreshold = distanceThreshold;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        /**\n         * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPointerEvent = null;\n        /**\n         * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPanInfo = null;\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false, distanceThreshold } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.stop(event, info);\n            this.latestPointerEvent = null;\n            this.latestPanInfo = null;\n        };\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            distanceThreshold,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    /**\n     * @internal\n     */\n    stop(event, panInfo) {\n        const finalEvent = event || this.latestPointerEvent;\n        const finalPanInfo = panInfo || this.latestPanInfo;\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging || !finalPanInfo || !finalEvent)\n            return;\n        const { velocity } = finalPanInfo;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(finalEvent, finalPanInfo));\n        }\n    }\n    /**\n     * @internal\n     */\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\", \"drag-constraints-ref\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from 'motion-dom';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { complex, mixNumber } from 'motion-dom';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\n/**\n * Track whether we've taken any snapshots yet. If not,\n * we can safely skip notification of didUpdate.\n */\nlet hasTakenAnySnapshot = false;\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            if (hasTakenAnySnapshot) {\n                projection.root.didUpdate();\n            }\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        hasTakenAnySnapshot = true;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from 'motion-utils';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { mixNumber, percent, px } from 'motion-dom';\nimport { progress, circOut, noop } from 'motion-utils';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","import { statsBuffer, isSVGElement, isSVGSVGElement, frame, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            this.animationCommitId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                let innerWidth = 0;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                // Set initial innerWidth in a frame.read callback to batch the read\n                frame.read(() => {\n                    innerWidth = window.innerWidth;\n                });\n                attachResizeListener(instance, () => {\n                    const newInnerWidth = window.innerWidth;\n                    if (newInnerWidth === innerWidth)\n                        return;\n                    innerWidth = newInnerWidth;\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            /**\n             * If this is a repeat of didUpdate then ignore the animation.\n             */\n            if (this.animationId <= this.animationCommitId) {\n                this.nodes.forEach(clearIsLayoutDirty);\n                return;\n            }\n            this.animationCommitId = this.animationId;\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            else {\n                this.isUpdating = false;\n                /**\n                 * Write\n                 */\n                this.nodes.forEach(resetTransformStyle);\n                /**\n                 * Read ==================\n                 */\n                // Update layout measurements of updated children\n                this.nodes.forEach(updateLayout);\n                /**\n                 * Write\n                 */\n                // Notify listeners that the layout is updated\n                this.nodes.forEach(notifyLayoutUpdate);\n            }\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        applyProjectionStyles(targetStyle, // CSSStyleDeclaration - doesn't allow numbers to be assigned to properties\n        styleProp) {\n            if (!this.instance || this.isSVG)\n                return;\n            if (!this.isVisible) {\n                targetStyle.visibility = \"hidden\";\n                return;\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                targetStyle.visibility = \"\";\n                targetStyle.opacity = \"\";\n                targetStyle.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                targetStyle.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                if (this.options.layoutId) {\n                    targetStyle.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    targetStyle.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    targetStyle.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return;\n            }\n            targetStyle.visibility = \"\";\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            let transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                transform = transformTemplate(valuesToRender, transform);\n            }\n            targetStyle.transform = transform;\n            const { x, y } = this.projectionDelta;\n            targetStyle.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        targetStyle[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        targetStyle[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                targetStyle.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { time, frame, cancelFrame } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.setup(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","import { isMotionValue, motionValue } from 'motion-dom';\nimport { animateMotionValue } from '../interfaces/motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = latestTransform?.z || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","import { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { createProjectionNode } from './create-projection-node.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (_element, startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { createDomVisualElement } from '../../dom/create-visual-element.mjs';\nimport { createMotionProxy } from '../create-proxy.mjs';\nimport { featureBundle } from './feature-bundle.mjs';\n\nconst motion = /*@__PURE__*/ createMotionProxy(featureBundle, createDomVisualElement);\n\nexport { motion };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\n\nconst featureBundle = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n\nexport { featureBundle };\n","import { pipe } from 'motion-utils';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n"],"names":["LayoutGroupContext","createContext","useConstant","init","ref","useRef","current","isBrowser","window","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","PresenceContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PopChildMeasure","React.Component","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","parent","offsetParent","parentWidth","isHTMLElement","offsetWidth","size","sizeRef","height","offsetHeight","width","top","offsetTop","left","offsetLeft","right","componentDidUpdate","render","children","PopChild","anchorX","root","id","useId","nonce","useContext","useInsertionEffect","x","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","contains","jsx","React.cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","isReusedContext","context","useMemo","childId","set","isComplete","values","register","delete","forEach","_","key","React.useEffect","Provider","value","Map","usePresence","subscribe","safeToRemove","useCallback","getChildKey","child","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","propagate","isParentPresent","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","i","length","includes","get","join","exitingChildren","nextChildren","splice","forceRender","Fragment","has","isEveryExitComplete","isExitComplete","LazyContext","strict","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","some","name","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","isValidProp","require","default","MotionContext","isAnimationControls","v","start","isVariantLabel","Array","isArray","variantPriorityOrder","variantProps","isControllingVariants","animate","isVariantNode","Boolean","variants","useCreateMotionContext","inherit","getCurrentTreeVariants","variantLabelsAsDependency","prop","scaleCorrectors","isForcedMotionValue","layoutId","transformProps","translateAlias","y","z","transformPerspective","numTransforms","transformPropOrder","buildHTMLStyles","state","latestValues","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","transform","transformString","transformIsDefault","valueIsDefault","parseFloat","trim","buildTransform","originX","originY","originZ","createHtmlRenderState","copyRawValuesOnly","target","source","isMotionValue","useStyle","visualState","Object","assign","useInitialMotionValues","useHTMLProps","htmlProps","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","dashKeys","offset","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","styleProp","viewBox","attrs","transformBox","scale","spacing","useDashCase","keys","px","buildSVGPath","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","Component","visualProps","rawStyles","lowercaseSVGElements","isSVGComponent","indexOf","test","useRender","forwardMotionProps","filteredProps","isDom","filterProps","elementProps","getValueState","visualElement","getVelocity","resolveVariantFromProps","definition","velocity","resolveMotionValue","makeLatestValues","presenceContext","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","makeUseVisualState","config","make","scrapeMotionValuesFromProps","createRenderState","renderState","makeState","newValues","_a","getValue","liveStyle","useHTMLVisualState","scrapeMotionValuesFromProps$1","charAt","toUpperCase","substring","useSVGVisualState","motionComponentSymbol","Symbol","for","isRefObject","prototype","hasOwnProperty","call","useMotionRef","externalRef","instance","onMount","mount","unmount","camelToDash","str","replace","optimizedAppearDataAttribute","SwitchLayoutGroupContext","useVisualElement","createVisualElement","ProjectionNodeConstructor","lazyContext","reducedMotionConfig","visualElementRef","renderer","blockInitialAnimation","initialLayoutGroupConfig","projection","type","initialPromotionConfig","dragConstraints","layoutScroll","layoutRoot","layoutCrossfade","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","crossfade","createProjectionNode","isMounted","update","optimisedAppearId","wantsHandoff","MotionHandoffIsComplete","_b","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","scheduleRenderMicrotask","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","options","allowProjection","createMotionComponent","preloadedFeatures","features","loadFeatures","useVisualState","MotionDOMComponent","MeasureLayout","configAndProps","useLayoutId","layoutProjection","combined","ProjectionNode","getProjectionFunctionality","jsxs","displayName","ForwardRefMotionComponent","forwardRef","layoutGroupId","createMotionProxy","Proxy","componentCache","factory","_target","convertBoundingBoxToBox","bottom","min","max","isIdentityScale","hasScale","scaleX","scaleY","has2DTranslate","rotate","rotateX","rotateY","skewX","skewY","is2DTranslate","scalePoint","point","originPoint","applyPointDelta","translate","boxScale","applyAxisDelta","axis","applyBoxDelta","box","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","mixNumber","measureViewportBox","transformPoint","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","createBox","prefersReducedMotion","hasReducedMotionListener","visualElementStore","WeakMap","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","constructor","shouldReduceMotion","KeyframeResolver","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","triggerBuild","renderInstance","renderScheduledAt","scheduleRender","now","time","frame","baseTarget","initialValues","depth","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addEventListener","initPrefersReducedMotion","add","cancelFrame","remove","clear","feature","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","featureDefinition","Feature","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","setStaticValue","prevPresenceContext","listener","next","prev","nextValue","prevValue","addValue","motionValue","hasValue","existingValue","jump","hasAnimated","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getProps","getVariant","getDefaultTransition","getTransformPagePoint","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","readValue","getBaseTargetFromProps","readValueFromInstance","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","setBaseTarget","getBaseTarget","valueFromInitial","variant","eventName","callback","SubscriptionManager","args","microtask","DOMVisualElement","super","arguments","DOMKeyframesResolver","a","b","compareDocumentPosition","childSubscription","textContent","renderHTML","elementStyle","applyProjectionStyles","setProperty","HTMLVisualElement","isProjecting","defaultTransformValue","readTransformValue","computedStyle","getComputedStyle","getPropertyValue","camelCaseAttributes","SVGVisualElement","defaultType","getDefaultValueType","getAttribute","_styleProp","setAttribute","renderSVG","tagName","createDomVisualElement","resolveVariant","isKeyframesTarget","setMotionValue","resolveFinalValueInKeyframes","addValueToWillChange","MotionGlobalConfig","WillChange","newWillChange","getOptimisedAppearId","isNotNull","underDampedSpring","stiffness","damping","restSpeed","keyframesTransition","duration","ease","valueKey","keyframes","Math","sqrt","animateMotionValue","isHandoff","onComplete","valueTransition","getValueTransition","delay","elapsed","secondsToMilliseconds","when","_delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from","isTransitionDefined","shouldSkip","instantAnimations","skipAnimations","allowFlatten","finalKeyframe","resolvedKeyframes","filter","getFinalKeyframe","isSync","JSAnimation","AsyncMotionValueAnimation","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","targetAndTransition","transitionOverride","animations","animationTypeState","getState","currentValue","isAnimating","MotionHandoffAnimation","appearId","startTime","positionalKeys","Promise","all","then","setTarget","animateVariant","getAnimation","resolve","getChildAnimations","forwardDelay","numChildren","maxStaggerDuration","delayIsFunction","generateStaggerDuration","sort","sortByTreeOrder","animateChildren","first","last","shallowCompare","prevLength","numVariantProps","getVariantContext","reversePriorityOrder","reverse","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createState","buildResolvedTypeValues","acc","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isActive","isInherited","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","valueHasChanged","fallbackAnimation","initialTransition","fallbackTarget","shouldAnimate","setActive","setAnimateFunction","makeAnimator","reset","createTypeState","whileInView","whileHover","whileDrag","whileFocus","node","updateAnimationControlsSubscription","unmountControls","prevAnimate","prevIsPresent","exitAnimation","addDomEvent","handler","passive","removeEventListener","extractEventInfo","event","pageX","pageY","addPointerEvent","isPrimaryPointer","addPointerInfo","calcLength","calcAxisDelta","delta","origin","isNaN","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","eachAxis","getContextWindow","ownerDocument","defaultView","abs","PanSession","handlers","contextWindow","dragSnapToOrigin","distanceThreshold","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","distance2D","timestamp","frameData","onStart","onMove","handlePointerMove","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","pipe","updateHandlers","subtractPoint","lastDevicePoint","startDevicePoint","timeDelta","timestampedPoint","lastPoint","millisecondsToSeconds","currentVelocity","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","elementDragControls","VisualElementDragControls","openDragLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","latestPointerEvent","latestPanInfo","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","setDragLock","resolveConstraints","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","layoutBox","postRender","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","getAnimationState","play","finalEvent","finalPanInfo","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","startAxisValueAnimation","pause","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","progress","clamp","calcOrigin","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","read","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","correctBoxShadow","treeScale","projectionDelta","original","shadow","parse","template","createTransformer","xScale","yScale","averageScale","hasTakenAnySnapshot","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","correctors","isCSSVariable","addScaleCorrector","defaultScaleCorrectors","group","didUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","compareByDepth","FlatTree","isDirty","addUniqueItem","removeItem","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","noop","easing","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","round","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","transformAxes","resetDistortingTransform","sharedAnimationValues","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","MotionCancelOptimisedAnimation","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","animationCommitId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","subscriptionManager","hasListeners","isSVGElement","isSVGSVGElement","cancelDelay","innerWidth","resizeUnblockUpdate","newInnerWidth","timeout","checkElapsed","setup","finishAnimation","registerSharedNode","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","animationOptions","onPlay","setAnimationOrigin","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","frameSteps","process","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measuredBox","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","_c","motionValue$1","animateSingleValue","onStop","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","rotateZ","resetValues","targetStyle","visibility","pointerEvents","valuesToRender","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","buildProjectionTransform","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","string","navigator","userAgent","roundPoint","maxDistance","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","handleHoverEvent","lifecycle","handlePressEvent","HTMLButtonElement","disabled","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","motion","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","prevViewport","hasViewportOptionChanged","press","_element","endEvent","success","useGlobalTarget","globalTapTarget","onFocus","isFocusVisible","e","onBlur"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]}