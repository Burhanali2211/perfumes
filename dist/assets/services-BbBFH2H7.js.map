{"version":3,"file":"services-BbBFH2H7.js","sources":["../../src/services/recentlyViewedService.ts","../../src/services/storageService.ts","../../src/services/emailService.ts","../../src/services/paymentService.ts"],"sourcesContent":["import { Product } from '../types';\r\n\r\nconst RECENTLY_VIEWED_KEY = 'recentlyViewed';\r\nconst MAX_RECENTLY_VIEWED = 20;\r\n\r\nexport interface RecentlyViewedItem {\r\n  productId: string;\r\n  viewedAt: number;\r\n  sessionId: string;\r\n}\r\n\r\nclass RecentlyViewedService {\r\n  private sessionId: string;\r\n\r\n  constructor() {\r\n    // Generate a session ID for this browsing session\r\n    this.sessionId = this.generateSessionId();\r\n  }\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Add a product to recently viewed list\r\n   */\r\n  addProduct(productId: string): void {\r\n    try {\r\n      const recentlyViewed = this.getRecentlyViewed();\r\n      \r\n      // Remove existing entry if it exists\r\n      const filteredItems = recentlyViewed.filter(item => item.productId !== productId);\r\n      \r\n      // Add new entry at the beginning\r\n      const newItem: RecentlyViewedItem = {\r\n        productId,\r\n        viewedAt: Date.now(),\r\n        sessionId: this.sessionId\r\n      };\r\n      \r\n      const updatedItems = [newItem, ...filteredItems].slice(0, MAX_RECENTLY_VIEWED);\r\n      \r\n      localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(updatedItems));\r\n      \r\n      // Dispatch custom event for components to listen to\r\n      window.dispatchEvent(new CustomEvent('recentlyViewedUpdated', {\r\n        detail: { productId, items: updatedItems }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error adding product to recently viewed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recently viewed products\r\n   */\r\n  getRecentlyViewed(): RecentlyViewedItem[] {\r\n    try {\r\n      const stored = localStorage.getItem(RECENTLY_VIEWED_KEY);\r\n      if (!stored) return [];\r\n      \r\n      const items: RecentlyViewedItem[] = JSON.parse(stored);\r\n      \r\n      // Filter out items older than 30 days\r\n      const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\r\n      const validItems = items.filter(item => item.viewedAt > thirtyDaysAgo);\r\n      \r\n      // Update storage if we filtered out old items\r\n      if (validItems.length !== items.length) {\r\n        localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(validItems));\r\n      }\r\n      \r\n      return validItems;\r\n    } catch (error) {\r\n      console.error('Error getting recently viewed products:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recently viewed product IDs only\r\n   */\r\n  getRecentlyViewedIds(): string[] {\r\n    return this.getRecentlyViewed().map(item => item.productId);\r\n  }\r\n\r\n  /**\r\n   * Remove a product from recently viewed\r\n   */\r\n  removeProduct(productId: string): void {\r\n    try {\r\n      const recentlyViewed = this.getRecentlyViewed();\r\n      const filteredItems = recentlyViewed.filter(item => item.productId !== productId);\r\n      \r\n      localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(filteredItems));\r\n      \r\n      window.dispatchEvent(new CustomEvent('recentlyViewedUpdated', {\r\n        detail: { productId, items: filteredItems, action: 'removed' }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error removing product from recently viewed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all recently viewed products\r\n   */\r\n  clearAll(): void {\r\n    try {\r\n      localStorage.removeItem(RECENTLY_VIEWED_KEY);\r\n      \r\n      window.dispatchEvent(new CustomEvent('recentlyViewedUpdated', {\r\n        detail: { items: [], action: 'cleared' }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error clearing recently viewed products:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recently viewed products with full product data\r\n   */\r\n  getRecentlyViewedProducts(allProducts: Product[]): Product[] {\r\n    const recentlyViewedIds = this.getRecentlyViewedIds();\r\n    \r\n    // Maintain the order from recently viewed\r\n    return recentlyViewedIds\r\n      .map(id => allProducts.find(product => product.id === id))\r\n      .filter((product): product is Product => product !== undefined);\r\n  }\r\n\r\n  /**\r\n   * Get analytics data for recently viewed products\r\n   */\r\n  getAnalytics(): {\r\n    totalViewed: number;\r\n    uniqueProducts: number;\r\n    averageViewsPerSession: number;\r\n    topViewedCategories: { category: string; count: number }[];\r\n    viewingPatterns: { hour: number; count: number }[];\r\n  } {\r\n    const items = this.getRecentlyViewed();\r\n    const uniqueProducts = new Set(items.map(item => item.productId)).size;\r\n    const sessions = new Set(items.map(item => item.sessionId)).size;\r\n    \r\n    // Calculate viewing patterns by hour\r\n    const hourCounts: Record<number, number> = {};\r\n    items.forEach(item => {\r\n      const hour = new Date(item.viewedAt).getHours();\r\n      hourCounts[hour] = (hourCounts[hour] || 0) + 1;\r\n    });\r\n    \r\n    const viewingPatterns = Object.entries(hourCounts)\r\n      .map(([hour, count]) => ({ hour: parseInt(hour), count }))\r\n      .sort((a, b) => a.hour - b.hour);\r\n    \r\n    return {\r\n      totalViewed: items.length,\r\n      uniqueProducts,\r\n      averageViewsPerSession: sessions > 0 ? items.length / sessions : 0,\r\n      topViewedCategories: [], // Would need product data to calculate\r\n      viewingPatterns\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get recommendations based on recently viewed products\r\n   */\r\n  getViewingBasedRecommendations(allProducts: Product[], maxRecommendations: number = 8): Product[] {\r\n    const recentlyViewedProducts = this.getRecentlyViewedProducts(allProducts);\r\n    \r\n    if (recentlyViewedProducts.length === 0) {\r\n      // Return popular products if no viewing history\r\n      return allProducts\r\n        .filter(p => p.featured || p.rating >= 4.0)\r\n        .sort((a, b) => b.rating - a.rating)\r\n        .slice(0, maxRecommendations);\r\n    }\r\n    \r\n    // Get categories and brands from recently viewed\r\n    const viewedCategories = [...new Set(recentlyViewedProducts.map(p => p.category))];\r\n    const viewedBrands = [...new Set(recentlyViewedProducts.map(p => p.brand).filter(Boolean))];\r\n    const viewedIds = new Set(recentlyViewedProducts.map(p => p.id));\r\n    \r\n    // Score products based on similarity to viewing history\r\n    const scoredProducts = allProducts\r\n      .filter(product => !viewedIds.has(product.id))\r\n      .map(product => {\r\n        let score = 0;\r\n        \r\n        // Category match\r\n        if (viewedCategories.includes(product.category)) score += 30;\r\n        \r\n        // Brand match\r\n        if (product.brand && viewedBrands.includes(product.brand)) score += 20;\r\n        \r\n        // Rating boost\r\n        score += product.rating * 10;\r\n        \r\n        // Featured product boost\r\n        if (product.featured) score += 15;\r\n        \r\n        // Price similarity to viewed products\r\n        const avgViewedPrice = recentlyViewedProducts.reduce((sum, p) => sum + p.price, 0) / recentlyViewedProducts.length;\r\n        const priceDiff = Math.abs(product.price - avgViewedPrice) / avgViewedPrice;\r\n        if (priceDiff <= 0.5) score += 10; // Within 50% of average viewed price\r\n        \r\n        return { product, score };\r\n      })\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, maxRecommendations)\r\n      .map(item => item.product);\r\n    \r\n    return scoredProducts;\r\n  }\r\n\r\n  /**\r\n   * Check if a product was recently viewed\r\n   */\r\n  isRecentlyViewed(productId: string): boolean {\r\n    return this.getRecentlyViewedIds().includes(productId);\r\n  }\r\n\r\n  /**\r\n   * Get the last viewed timestamp for a product\r\n   */\r\n  getLastViewedTime(productId: string): number | null {\r\n    const items = this.getRecentlyViewed();\r\n    const item = items.find(item => item.productId === productId);\r\n    return item ? item.viewedAt : null;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const recentlyViewedService = new RecentlyViewedService();\r\n\r\n// Export hook for React components\r\nexport const useRecentlyViewed = () => {\r\n  return {\r\n    addProduct: (productId: string) => recentlyViewedService.addProduct(productId),\r\n    getRecentlyViewed: () => recentlyViewedService.getRecentlyViewed(),\r\n    getRecentlyViewedIds: () => recentlyViewedService.getRecentlyViewedIds(),\r\n    getRecentlyViewedProducts: (allProducts: Product[]) => recentlyViewedService.getRecentlyViewedProducts(allProducts),\r\n    removeProduct: (productId: string) => recentlyViewedService.removeProduct(productId),\r\n    clearAll: () => recentlyViewedService.clearAll(),\r\n    isRecentlyViewed: (productId: string) => recentlyViewedService.isRecentlyViewed(productId),\r\n    getLastViewedTime: (productId: string) => recentlyViewedService.getLastViewedTime(productId),\r\n    getViewingBasedRecommendations: (allProducts: Product[], maxRecommendations?: number) => \r\n      recentlyViewedService.getViewingBasedRecommendations(allProducts, maxRecommendations),\r\n    getAnalytics: () => recentlyViewedService.getAnalytics()\r\n  };\r\n};\r\n","import { supabase } from '../lib/supabase';\r\n\r\nexport interface UploadResult {\r\n  url: string;\r\n  path: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface UploadProgress {\r\n  loaded: number;\r\n  total: number;\r\n  percentage: number;\r\n}\r\n\r\nexport class StorageService {\r\n  // Define all required buckets for the e-commerce platform\r\n  private static readonly BUCKETS = {\r\n    PRODUCTS: 'products',\r\n    CATEGORIES: 'categories',\r\n    COLLECTIONS: 'collections',\r\n    COLLECTION_BANNERS: 'collection-banners',\r\n    USERS: 'users',\r\n    MARKETING: 'marketing'\r\n  } as const;\r\n\r\n  private static readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\n  private static readonly ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n\r\n  /**\r\n   * Get the appropriate bucket name based on folder\r\n   */\r\n  private static getBucketName(folder: string): string {\r\n    if (folder.startsWith('products')) return this.BUCKETS.PRODUCTS;\r\n    if (folder.startsWith('categories')) return this.BUCKETS.CATEGORIES;\r\n    if (folder.startsWith('collections/banners')) return this.BUCKETS.COLLECTION_BANNERS;\r\n    if (folder.startsWith('collections')) return this.BUCKETS.COLLECTIONS;\r\n    if (folder.startsWith('users')) return this.BUCKETS.USERS;\r\n    if (folder.startsWith('marketing')) return this.BUCKETS.MARKETING;\r\n\r\n    // Default to products bucket\r\n    return this.BUCKETS.PRODUCTS;\r\n  }\r\n\r\n  /**\r\n   * Upload an image file to Supabase storage\r\n   */\r\n  static async uploadImage(\r\n    file: File,\r\n    folder: string = 'products',\r\n    onProgress?: (progress: UploadProgress) => void\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      // Validate file\r\n      const validation = this.validateFile(file);\r\n      if (!validation.isValid) {\r\n        return { url: '', path: '', error: validation.error };\r\n      }\r\n\r\n      // Get appropriate bucket name\r\n      const bucketName = this.getBucketName(folder);\r\n\r\n      // Ensure all buckets exist\r\n      await this.initializeAllBuckets();\r\n\r\n      // Generate unique filename\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\r\n      const filePath = `${folder}/${fileName}`;\r\n\r\n      // Simulate progress if callback provided\r\n      if (onProgress) {\r\n        onProgress({ loaded: 0, total: file.size, percentage: 0 });\r\n      }\r\n\r\n      // Standard upload - simplified approach\r\n      const { data, error } = await supabase.storage\r\n        .from(bucketName)\r\n        .upload(filePath, file, {\r\n          cacheControl: '3600',\r\n          upsert: false\r\n        });\r\n\r\n      if (error) {\r\n        // If bucket doesn't exist, try to create it and retry\r\n        if (error.message?.includes('Bucket not found') || (error as any).status === 400) {\r\n          await this.initializeAllBuckets();\r\n          const retryResult = await supabase.storage\r\n            .from(bucketName)\r\n            .upload(filePath, file, {\r\n              cacheControl: '3600',\r\n              upsert: false\r\n            });\r\n\r\n          if (retryResult.error) {\r\n            return { url: '', path: '', error: retryResult.error.message };\r\n          }\r\n\r\n          const { data: urlData } = supabase.storage\r\n            .from(bucketName)\r\n            .getPublicUrl(retryResult.data.path);\r\n\r\n          return {\r\n            url: urlData.publicUrl,\r\n            path: retryResult.data.path,\r\n          };\r\n        }\r\n        return { url: '', path: '', error: error.message };\r\n      }\r\n\r\n      // Simulate progress completion\r\n      if (onProgress) {\r\n        onProgress({ loaded: file.size, total: file.size, percentage: 100 });\r\n      }\r\n\r\n      // Get public URL\r\n      const { data: urlData } = supabase.storage\r\n        .from(bucketName)\r\n        .getPublicUrl(data.path);\r\n\r\n      const result = { url: urlData.publicUrl, path: data.path };\r\n      return result;\r\n    } catch (error) {\r\n      return {\r\n        url: '',\r\n        path: '',\r\n        error: error instanceof Error ? error.message : 'Upload failed'\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Delete an image from storage\r\n   */\r\n  static async deleteImage(path: string, folder: string = 'products'): Promise<boolean> {\r\n    try {\r\n      const bucketName = this.getBucketName(folder);\r\n      const { error } = await supabase.storage\r\n        .from(bucketName)\r\n        .remove([path]);\r\n\r\n      if (error) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate file before upload\r\n   */\r\n  private static validateFile(file: File): { isValid: boolean; error?: string } {\r\n    // Check file size\r\n    if (file.size > this.MAX_FILE_SIZE) {\r\n      const msg = `File size must be less than ${this.MAX_FILE_SIZE / 1024 / 1024}MB`;\r\n      return { isValid: false, error: msg };\r\n    }\r\n\r\n    // Check file type\r\n    if (!this.ALLOWED_TYPES.includes(file.type)) {\r\n      const msg = 'Only JPEG, PNG, and WebP images are allowed';\r\n      return { isValid: false, error: msg };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Get optimized image URL with transformations\r\n   */\r\n  static getOptimizedImageUrl(\r\n    url: string,\r\n    options: { width?: number; height?: number; quality?: number } = {}\r\n  ): string {\r\n    if (!url) return url;\r\n\r\n    // If it's already a Supabase storage URL, we can add transformations\r\n    if (url.includes('supabase')) {\r\n      const params = new URLSearchParams();\r\n\r\n      if (options.width) params.append('width', options.width.toString());\r\n      if (options.height) params.append('height', options.height.toString());\r\n      if (options.quality) params.append('quality', options.quality.toString());\r\n\r\n      if (params.toString()) {\r\n        return `${url}?${params.toString()}`;\r\n      }\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Create a single storage bucket if it doesn't exist\r\n   */\r\n  private static async createBucketIfNotExists(bucketName: string): Promise<boolean> {\r\n    try {\r\n      // Check if bucket exists\r\n      const { data: buckets, error: listError } = await supabase.storage.listBuckets();\r\n\r\n      if (listError) {\r\n        return false;\r\n      }\r\n\r\n      const bucketExists = buckets?.some(bucket => bucket.name === bucketName);\r\n\r\n      if (!bucketExists) {\r\n        // Create bucket\r\n        const { error: createError } = await supabase.storage.createBucket(bucketName, {\r\n          public: true,\r\n          allowedMimeTypes: this.ALLOWED_TYPES,\r\n          fileSizeLimit: this.MAX_FILE_SIZE\r\n        });\r\n\r\n        if (createError) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize all required storage buckets\r\n   */\r\n  static async initializeAllBuckets(): Promise<boolean> {\r\n    try {\r\n      const bucketNames = Object.values(this.BUCKETS);\r\n      const results = await Promise.all(\r\n        bucketNames.map(bucketName => this.createBucketIfNotExists(bucketName))\r\n      );\r\n\r\n      const allSuccessful = results.every(result => result);\r\n      return allSuccessful;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Legacy method for backward compatibility\r\n   */\r\n  static async initializeBucket(): Promise<boolean> {\r\n    return this.initializeAllBuckets();\r\n  }\r\n}\r\n\r\n\r\n// Expose for debugging in DevTools: window.__StorageService\r\ntry { if (typeof window !== 'undefined') { (window as any).__StorageService = StorageService; } } catch {}\r\n","/**\n * Email Service for User Management\n * Handles email sending for user creation, confirmation, and notifications\n */\n\nimport { supabase } from '../lib/supabase';\n\nexport interface EmailTemplate {\n  subject: string;\n  htmlContent: string;\n  textContent: string;\n}\n\nexport interface UserCreationEmailData {\n  email: string;\n  name: string;\n  password: string;\n  role: string;\n  confirmationUrl?: string;\n}\n\nexport interface EmailServiceResponse {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\nclass EmailService {\n  private readonly fromEmail = 'noreply@sufiessences.com';\n  private readonly fromName = 'Sufi Essences Admin';\n\n  /**\n   * Generate user creation email template\n   */\n  private generateUserCreationTemplate(data: UserCreationEmailData): EmailTemplate {\n    const { name, email, password, role, confirmationUrl } = data;\n    \n    const subject = `Welcome to Sufi Essences - Your Account Has Been Created`;\n    \n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to Sufi Essences</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }\n          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }\n          .credentials { background: #fff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }\n          .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Welcome to Sufi Essences</h1>\n            <p>Your account has been created successfully</p>\n          </div>\n          <div class=\"content\">\n            <h2>Hello ${name},</h2>\n            <p>Your administrator has created an account for you on Sufi Essences with the role of <strong>${role}</strong>.</p>\n            \n            <div class=\"credentials\">\n              <h3>Your Login Credentials:</h3>\n              <p><strong>Email:</strong> ${email}</p>\n              <p><strong>Temporary Password:</strong> <code>${password}</code></p>\n            </div>\n            \n            <div class=\"warning\">\n              <strong>Important:</strong> Please change your password after your first login for security purposes.\n            </div>\n            \n            ${confirmationUrl ? `\n              <p>Please click the button below to confirm your email address and activate your account:</p>\n              <a href=\"${confirmationUrl}\" class=\"button\">Confirm Email Address</a>\n              <p>If the button doesn't work, copy and paste this link into your browser:</p>\n              <p><a href=\"${confirmationUrl}\">${confirmationUrl}</a></p>\n            ` : `\n              <p>Your account is ready to use. You can log in immediately with the credentials above.</p>\n              <a href=\"${window.location.origin}/login\" class=\"button\">Login to Your Account</a>\n            `}\n            \n            <h3>What's Next?</h3>\n            <ul>\n              <li>Log in to your account using the credentials above</li>\n              <li>Complete your profile information</li>\n              <li>Change your password for security</li>\n              <li>Explore the platform features available to your role</li>\n            </ul>\n            \n            <p>If you have any questions or need assistance, please don't hesitate to contact our support team.</p>\n            \n            <p>Best regards,<br>The Sufi Essences Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Sufi Essences Admin Panel</p>\n            <p>If you didn't expect this email, please contact our support team immediately.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nWelcome to Sufi Essences\n\nHello ${name},\n\nYour administrator has created an account for you on Sufi Essences with the role of ${role}.\n\nYour Login Credentials:\nEmail: ${email}\nTemporary Password: ${password}\n\nIMPORTANT: Please change your password after your first login for security purposes.\n\n${confirmationUrl ? `\nPlease confirm your email address by visiting this link:\n${confirmationUrl}\n` : `\nYour account is ready to use. You can log in immediately at:\n${window.location.origin}/login\n`}\n\nWhat's Next:\n- Log in to your account using the credentials above\n- Complete your profile information\n- Change your password for security\n- Explore the platform features available to your role\n\nIf you have any questions or need assistance, please contact our support team.\n\nBest regards,\nThe Sufi Essences Team\n\n---\nThis email was sent from Sufi Essences Admin Panel\nIf you didn't expect this email, please contact our support team immediately.\n    `;\n\n    return { subject, htmlContent, textContent };\n  }\n\n  /**\n   * Send email using Netlify Functions with SendGrid\n   */\n  private async sendEmail(\n    to: string,\n    template: EmailTemplate,\n    metadata?: Record<string, any>\n  ): Promise<EmailServiceResponse> {\n    try {\n      // Use Netlify function for email sending\n      const response = await fetch('/.netlify/functions/send-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          to,\n          from: this.fromEmail,\n          fromName: this.fromName,\n          subject: template.subject,\n          html: template.htmlContent,\n          text: template.textContent,\n          metadata\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Email sending failed');\n      }\n\n      return { success: true, messageId: result.messageId };\n    } catch (error) {\n      console.error('Email service error:', error);\n\n      // Fallback: Log email to console in development\n      if (import.meta.env.DEV) {\n        console.log('=== EMAIL WOULD BE SENT ===');\n        console.log('To:', to);\n        console.log('Subject:', template.subject);\n        console.log('Content:', template.textContent);\n        console.log('========================');\n        return { success: true, messageId: 'dev-mode-' + Date.now() };\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown email error'\n      };\n    }\n  }\n\n  /**\n   * Send user creation email with credentials\n   */\n  async sendUserCreationEmail(data: UserCreationEmailData): Promise<EmailServiceResponse> {\n    const template = this.generateUserCreationTemplate(data);\n    return this.sendEmail(data.email, template, {\n      type: 'user_creation',\n      role: data.role,\n      hasConfirmation: !!data.confirmationUrl\n    });\n  }\n\n  /**\n   * Send order confirmation email\n   */\n  async sendOrderConfirmationEmail(data: {\n    email: string;\n    name: string;\n    orderId: string;\n    items: Array<{\n      name: string;\n      quantity: number;\n      price: number;\n      image?: string;\n    }>;\n    subtotal: number;\n    gst: number;\n    shipping: number;\n    total: number;\n    shippingAddress: {\n      street: string;\n      city: string;\n      state: string;\n      zipCode: string;\n      country: string;\n    };\n    paymentMethod: string;\n  }): Promise<EmailServiceResponse> {\n    const template = this.generateOrderConfirmationTemplate(data);\n    return this.sendEmail(data.email, template, {\n      type: 'order_confirmation',\n      orderId: data.orderId,\n      total: data.total\n    });\n  }\n\n  /**\n   * Send order status update email\n   */\n  async sendOrderStatusUpdateEmail(data: {\n    email: string;\n    name: string;\n    orderId: string;\n    status: string;\n    trackingNumber?: string;\n  }): Promise<EmailServiceResponse> {\n    const template = this.generateOrderStatusTemplate(data);\n    return this.sendEmail(data.email, template, {\n      type: 'order_status_update',\n      orderId: data.orderId,\n      status: data.status\n    });\n  }\n\n  /**\n   * Send welcome email to new users\n   */\n  async sendWelcomeEmail(data: {\n    email: string;\n    name: string;\n  }): Promise<EmailServiceResponse> {\n    const template = this.generateWelcomeTemplate(data);\n    return this.sendEmail(data.email, template, {\n      type: 'welcome',\n      userEmail: data.email\n    });\n  }\n\n  /**\n   * Send email confirmation reminder\n   */\n  async sendConfirmationReminder(\n    email: string,\n    name: string,\n    confirmationUrl: string\n  ): Promise<EmailServiceResponse> {\n    const template: EmailTemplate = {\n      subject: 'Please Confirm Your Email Address - Sufi Essences',\n      htmlContent: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Email Confirmation Required</h2>\n          <p>Hello ${name},</p>\n          <p>Please confirm your email address to complete your account setup:</p>\n          <a href=\"${confirmationUrl}\" style=\"background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0;\">Confirm Email</a>\n          <p>If the button doesn't work, copy and paste this link: ${confirmationUrl}</p>\n        </div>\n      `,\n      textContent: `\nEmail Confirmation Required\n\nHello ${name},\n\nPlease confirm your email address to complete your account setup by visiting:\n${confirmationUrl}\n\nBest regards,\nThe Sufi Essences Team\n      `\n    };\n\n    return this.sendEmail(email, template, {\n      type: 'confirmation_reminder'\n    });\n  }\n\n  /**\n   * Send password reset email\n   */\n  async sendPasswordResetEmail(\n    email: string,\n    name: string,\n    newPassword: string\n  ): Promise<EmailServiceResponse> {\n    const template: EmailTemplate = {\n      subject: 'Your Password Has Been Reset - Sufi Essences',\n      htmlContent: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2>Password Reset</h2>\n          <p>Hello ${name},</p>\n          <p>Your password has been reset by an administrator.</p>\n          <div style=\"background: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0;\">\n            <p><strong>New Password:</strong> <code>${newPassword}</code></p>\n          </div>\n          <p><strong>Important:</strong> Please change this password after logging in.</p>\n          <a href=\"${window.location.origin}/login\" style=\"background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0;\">Login Now</a>\n        </div>\n      `,\n      textContent: `\nPassword Reset\n\nHello ${name},\n\nYour password has been reset by an administrator.\n\nNew Password: ${newPassword}\n\nIMPORTANT: Please change this password after logging in.\n\nLogin at: ${window.location.origin}/login\n\nBest regards,\nThe Sufi Essences Team\n      `\n    };\n\n    return this.sendEmail(email, template, {\n      type: 'password_reset'\n    });\n  }\n\n  /**\n   * Generate order confirmation email template\n   */\n  private generateOrderConfirmationTemplate(data: any): EmailTemplate {\n    const itemsHtml = data.items.map((item: any) => `\n      <tr>\n        <td style=\"padding: 10px; border-bottom: 1px solid #eee;\">\n          <div style=\"display: flex; align-items: center;\">\n            ${item.image ? `<img src=\"${item.image}\" alt=\"${item.name}\" style=\"width: 50px; height: 50px; object-fit: cover; margin-right: 10px; border-radius: 4px;\">` : ''}\n            <div>\n              <strong>${item.name}</strong><br>\n              <small>Quantity: ${item.quantity}</small>\n            </div>\n          </div>\n        </td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #eee; text-align: right;\">\n          ₹${(item.price * item.quantity).toFixed(2)}\n        </td>\n      </tr>\n    `).join('');\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Order Confirmation - Sufi Essences</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #8B5A3C, #A0522D); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: white; padding: 30px; border: 1px solid #ddd; }\n          .footer { background: #f8f9fa; padding: 20px; text-align: center; border-radius: 0 0 8px 8px; }\n          .order-summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }\n          .total-row { font-weight: bold; font-size: 18px; color: #8B5A3C; }\n          table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n          .btn { background: #8B5A3C; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 10px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>🌸 Order Confirmed!</h1>\n            <p>Thank you for your purchase from Sufi Essences</p>\n          </div>\n\n          <div class=\"content\">\n            <p>Dear ${data.name},</p>\n\n            <p>Your order has been confirmed and is being prepared for shipment. Here are your order details:</p>\n\n            <div class=\"order-summary\">\n              <h3>Order #${data.orderId}</h3>\n              <p><strong>Payment Method:</strong> ${data.paymentMethod}</p>\n              <p><strong>Shipping Address:</strong><br>\n                ${data.shippingAddress.street}<br>\n                ${data.shippingAddress.city}, ${data.shippingAddress.state} ${data.shippingAddress.zipCode}<br>\n                ${data.shippingAddress.country}\n              </p>\n            </div>\n\n            <h3>Order Items:</h3>\n            <table>\n              ${itemsHtml}\n              <tr>\n                <td style=\"padding: 10px; text-align: right;\"><strong>Subtotal:</strong></td>\n                <td style=\"padding: 10px; text-align: right;\"><strong>₹${data.subtotal.toFixed(2)}</strong></td>\n              </tr>\n              <tr>\n                <td style=\"padding: 10px; text-align: right;\">GST (18%):</td>\n                <td style=\"padding: 10px; text-align: right;\">₹${data.gst.toFixed(2)}</td>\n              </tr>\n              <tr>\n                <td style=\"padding: 10px; text-align: right;\">Shipping:</td>\n                <td style=\"padding: 10px; text-align: right;\">${data.shipping === 0 ? 'FREE' : '₹' + data.shipping.toFixed(2)}</td>\n              </tr>\n              <tr class=\"total-row\">\n                <td style=\"padding: 15px; text-align: right; border-top: 2px solid #8B5A3C;\">Total:</td>\n                <td style=\"padding: 15px; text-align: right; border-top: 2px solid #8B5A3C;\">₹${data.total.toFixed(2)}</td>\n              </tr>\n            </table>\n\n            <p>We'll send you another email with tracking information once your order ships.</p>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${window.location.origin}/orders\" class=\"btn\">Track Your Order</a>\n            </div>\n          </div>\n\n          <div class=\"footer\">\n            <p>Thank you for choosing Sufi Essences - Premium Kashmiri Perfumes</p>\n            <p>If you have any questions, contact us at orders@sufiessences.com</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nOrder Confirmation - Sufi Essences\n\nDear ${data.name},\n\nYour order #${data.orderId} has been confirmed!\n\nOrder Details:\n${data.items.map((item: any) => `- ${item.name} (Qty: ${item.quantity}) - ₹${(item.price * item.quantity).toFixed(2)}`).join('\\n')}\n\nSubtotal: ₹${data.subtotal.toFixed(2)}\nGST (18%): ₹${data.gst.toFixed(2)}\nShipping: ${data.shipping === 0 ? 'FREE' : '₹' + data.shipping.toFixed(2)}\nTotal: ₹${data.total.toFixed(2)}\n\nShipping Address:\n${data.shippingAddress.street}\n${data.shippingAddress.city}, ${data.shippingAddress.state} ${data.shippingAddress.zipCode}\n${data.shippingAddress.country}\n\nWe'll send you tracking information once your order ships.\n\nThank you for choosing Sufi Essences!\n    `;\n\n    return {\n      subject: `Order Confirmation #${data.orderId} - Sufi Essences`,\n      htmlContent,\n      textContent\n    };\n  }\n}\n\nexport const emailService = new EmailService();\n","/**\n * Razorpay Payment Service for Sufi Essences\n * Handles payment processing for Indian market with UPI, cards, wallets, etc.\n */\n\nimport { CartItem } from '../types';\n\n// Razorpay types\ninterface RazorpayOptions {\n  key: string;\n  amount: number;\n  currency: string;\n  name: string;\n  description: string;\n  image?: string;\n  order_id: string;\n  handler: (response: RazorpayResponse) => void;\n  prefill: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  notes: Record<string, string>;\n  theme: {\n    color: string;\n  };\n  modal: {\n    ondismiss: () => void;\n  };\n}\n\ninterface RazorpayResponse {\n  razorpay_payment_id: string;\n  razorpay_order_id: string;\n  razorpay_signature: string;\n}\n\ninterface PaymentOrder {\n  id: string;\n  amount: number;\n  currency: string;\n  status: string;\n}\n\ninterface PaymentData {\n  amount: number;\n  currency: string;\n  items: CartItem[];\n  customerInfo: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  shippingAddress: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n}\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nclass PaymentService {\n  private razorpayKeyId: string;\n  private isTestMode: boolean;\n\n  constructor() {\n    this.razorpayKeyId = import.meta.env.VITE_RAZORPAY_KEY_ID || '';\n    this.isTestMode = import.meta.env.VITE_APP_ENV !== 'production';\n    \n    if (!this.razorpayKeyId) {\n      console.warn('Razorpay Key ID not configured');\n    }\n  }\n\n  /**\n   * Load Razorpay script dynamically\n   */\n  private async loadRazorpayScript(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (window.Razorpay) {\n        resolve(true);\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  }\n\n  /**\n   * Calculate GST (18% for perfumes in India)\n   */\n  private calculateGST(amount: number): number {\n    const gstRate = parseFloat(import.meta.env.VITE_GST_RATE || '0.18');\n    return Math.round(amount * gstRate * 100) / 100;\n  }\n\n  /**\n   * Calculate shipping charges based on location\n   */\n  private calculateShipping(state: string, amount: number): number {\n    const freeShippingThreshold = parseFloat(import.meta.env.VITE_FREE_SHIPPING_THRESHOLD || '2000');\n    \n    if (amount >= freeShippingThreshold) {\n      return 0;\n    }\n\n    // Kashmir gets special rates\n    if (state.toLowerCase().includes('kashmir') || state.toLowerCase().includes('jammu')) {\n      return parseFloat(import.meta.env.VITE_KASHMIR_SHIPPING_RATE || '50');\n    }\n\n    // Domestic shipping\n    return parseFloat(import.meta.env.VITE_DOMESTIC_SHIPPING_RATE || '100');\n  }\n\n  /**\n   * Create payment order on backend\n   */\n  private async createPaymentOrder(paymentData: PaymentData): Promise<PaymentOrder> {\n    try {\n      // Calculate totals\n      const subtotal = paymentData.amount;\n      const gst = this.calculateGST(subtotal);\n      const shipping = this.calculateShipping(paymentData.shippingAddress.state, subtotal);\n      const total = subtotal + gst + shipping;\n\n      const orderData = {\n        amount: Math.round(total * 100), // Razorpay expects amount in paise\n        currency: paymentData.currency,\n        receipt: `order_${Date.now()}`,\n        notes: {\n          customer_name: paymentData.customerInfo.name,\n          customer_email: paymentData.customerInfo.email,\n          items_count: paymentData.items.length.toString(),\n          subtotal: subtotal.toString(),\n          gst: gst.toString(),\n          shipping: shipping.toString(),\n          total: total.toString()\n        }\n      };\n\n      // Call Netlify function to create Razorpay order\n      const response = await fetch('/.netlify/functions/create-payment-order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to create payment order');\n      }\n\n      return result.order;\n    } catch (error) {\n      console.error('Error creating payment order:', error);\n      throw new Error('Failed to create payment order');\n    }\n  }\n\n  /**\n   * Process payment using Razorpay\n   */\n  async processPayment(paymentData: PaymentData): Promise<{ success: boolean; paymentId?: string; error?: string }> {\n    try {\n      // Load Razorpay script\n      const scriptLoaded = await this.loadRazorpayScript();\n      if (!scriptLoaded) {\n        throw new Error('Failed to load Razorpay script');\n      }\n\n      // Create payment order\n      const order = await this.createPaymentOrder(paymentData);\n\n      return new Promise((resolve) => {\n        const options: RazorpayOptions = {\n          key: this.razorpayKeyId,\n          amount: order.amount,\n          currency: order.currency,\n          name: 'Sufi Essences',\n          description: 'Premium Kashmiri Perfumes & Attars',\n          image: '/logo.png', // Add your logo\n          order_id: order.id,\n          handler: (response: RazorpayResponse) => {\n            // Payment successful\n            this.verifyPayment(response)\n              .then(() => {\n                resolve({\n                  success: true,\n                  paymentId: response.razorpay_payment_id\n                });\n              })\n              .catch((error) => {\n                resolve({\n                  success: false,\n                  error: error.message\n                });\n              });\n          },\n          prefill: {\n            name: paymentData.customerInfo.name,\n            email: paymentData.customerInfo.email,\n            contact: paymentData.customerInfo.phone\n          },\n          notes: {\n            address: `${paymentData.shippingAddress.street}, ${paymentData.shippingAddress.city}`,\n            state: paymentData.shippingAddress.state\n          },\n          theme: {\n            color: '#8B5A3C' // Brand color for Sufi Essences\n          },\n          modal: {\n            ondismiss: () => {\n              resolve({\n                success: false,\n                error: 'Payment cancelled by user'\n              });\n            }\n          }\n        };\n\n        const razorpay = new window.Razorpay(options);\n        razorpay.open();\n      });\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Payment processing failed'\n      };\n    }\n  }\n\n  /**\n   * Verify payment signature on backend\n   */\n  private async verifyPayment(response: RazorpayResponse): Promise<boolean> {\n    try {\n      // Validate that we have the required fields\n      if (!response.razorpay_payment_id || !response.razorpay_order_id || !response.razorpay_signature) {\n        throw new Error('Invalid payment response');\n      }\n\n      // Call Netlify function to verify payment signature\n      const verificationResponse = await fetch('/.netlify/functions/verify-payment', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(response)\n      });\n\n      if (!verificationResponse.ok) {\n        throw new Error(`HTTP error! status: ${verificationResponse.status}`);\n      }\n\n      const result = await verificationResponse.json();\n\n      if (!result.success || !result.verified) {\n        throw new Error(result.error || 'Payment verification failed');\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      throw new Error('Payment verification failed');\n    }\n  }\n\n  /**\n   * Get supported payment methods\n   */\n  getSupportedPaymentMethods() {\n    return [\n      {\n        id: 'card',\n        name: 'Credit/Debit Card',\n        description: 'Visa, Mastercard, RuPay',\n        icon: '💳'\n      },\n      {\n        id: 'upi',\n        name: 'UPI',\n        description: 'Google Pay, PhonePe, Paytm',\n        icon: '📱'\n      },\n      {\n        id: 'netbanking',\n        name: 'Net Banking',\n        description: 'All major banks',\n        icon: '🏦'\n      },\n      {\n        id: 'wallet',\n        name: 'Wallets',\n        description: 'Paytm, Mobikwik, etc.',\n        icon: '👛'\n      },\n      {\n        id: 'cod',\n        name: 'Cash on Delivery',\n        description: 'Pay when you receive',\n        icon: '💵'\n      }\n    ];\n  }\n\n  /**\n   * Format currency for display\n   */\n  formatCurrency(amount: number): string {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(amount);\n  }\n\n  /**\n   * Check if payment gateway is configured\n   */\n  isConfigured(): boolean {\n    return !!this.razorpayKeyId;\n  }\n}\n\nexport const paymentService = new PaymentService();\nexport default paymentService;\n"],"names":["RECENTLY_VIEWED_KEY","recentlyViewedService","constructor","__publicField","this","sessionId","generateSessionId","Date","now","Math","random","toString","substr","addProduct","productId","filteredItems","getRecentlyViewed","filter","item","updatedItems","viewedAt","slice","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","detail","items","error","stored","getItem","parse","thirtyDaysAgo","validItems","length","getRecentlyViewedIds","map","removeProduct","action","clearAll","removeItem","getRecentlyViewedProducts","allProducts","id","find","product","getAnalytics","uniqueProducts","Set","size","sessions","hourCounts","forEach","hour","getHours","viewingPatterns","Object","entries","count","parseInt","sort","a","b","totalViewed","averageViewsPerSession","topViewedCategories","getViewingBasedRecommendations","maxRecommendations","recentlyViewedProducts","p","featured","rating","viewedCategories","category","viewedBrands","brand","Boolean","viewedIds","has","score","includes","avgViewedPrice","reduce","sum","price","abs","isRecentlyViewed","getLastViewedTime","StorageService","getBucketName","folder","startsWith","BUCKETS","PRODUCTS","CATEGORIES","COLLECTION_BANNERS","COLLECTIONS","USERS","MARKETING","uploadImage","file","onProgress","validation","validateFile","isValid","url","path","bucketName","initializeAllBuckets","fileExt","name","split","pop","filePath","substring","loaded","total","percentage","data","supabase","storage","from","upload","cacheControl","upsert","_a","message","status","retryResult","urlData","getPublicUrl","publicUrl","Error","deleteImage","remove","MAX_FILE_SIZE","ALLOWED_TYPES","type","getOptimizedImageUrl","options","params","URLSearchParams","width","append","height","quality","createBucketIfNotExists","buckets","listError","listBuckets","some","bucket","createError","createBucket","public","allowedMimeTypes","fileSizeLimit","bucketNames","values","results","Promise","all","every","result","initializeBucket","__StorageService","emailService","generateUserCreationTemplate","email","password","role","confirmationUrl","subject","htmlContent","location","origin","textContent","sendEmail","to","template","metadata","response","fetch","method","headers","body","fromEmail","fromName","html","text","ok","json","success","messageId","sendUserCreationEmail","hasConfirmation","sendOrderConfirmationEmail","generateOrderConfirmationTemplate","orderId","sendOrderStatusUpdateEmail","generateOrderStatusTemplate","sendWelcomeEmail","generateWelcomeTemplate","userEmail","sendConfirmationReminder","sendPasswordResetEmail","newPassword","itemsHtml","image","quantity","toFixed","join","paymentMethod","shippingAddress","street","city","state","zipCode","country","subtotal","gst","shipping","paymentService","razorpayKeyId","isTestMode","loadRazorpayScript","resolve","Razorpay","script","document","createElement","src","onload","onerror","appendChild","calculateGST","amount","gstRate","parseFloat","round","calculateShipping","toLowerCase","createPaymentOrder","paymentData","orderData","currency","receipt","notes","customer_name","customerInfo","customer_email","items_count","order","processPayment","key","description","order_id","handler","verifyPayment","then","paymentId","razorpay_payment_id","catch","prefill","contact","phone","address","theme","color","modal","ondismiss","open","razorpay_order_id","razorpay_signature","verificationResponse","verified","getSupportedPaymentMethods","icon","formatCurrency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","isConfigured"],"mappings":"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"}