var g=Object.defineProperty;var u=(s,e,r)=>e in s?g(s,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[e]=r;var n=(s,e,r)=>u(s,typeof e!="symbol"?e+"":e,r);class p{constructor(){n(this,"registration",null);n(this,"updateCheckInterval",null);this.setupUpdateChecking()}async register(){if(!this.isSupported())return console.warn("Service Workers are not supported in this browser"),null;try{return console.log("üîß Registering Service Worker..."),this.registration=await navigator.serviceWorker.register("/sw.js",{scope:"/"}),console.log("‚úÖ Service Worker registered successfully:",this.registration),this.registration.addEventListener("updatefound",()=>{var r;const e=(r=this.registration)==null?void 0:r.installing;e&&(console.log("üîÑ Service Worker update found"),this.handleServiceWorkerUpdate(e))}),navigator.serviceWorker.addEventListener("message",e=>{this.handleServiceWorkerMessage(e)}),this.registration}catch(e){return console.error("‚ùå Service Worker registration failed:",e),null}}async unregister(){if(!this.registration)return!1;try{const e=await this.registration.unregister();return console.log("üóëÔ∏è Service Worker unregistered:",e),this.registration=null,this.updateCheckInterval&&(clearInterval(this.updateCheckInterval),this.updateCheckInterval=null),e}catch(e){return console.error("‚ùå Service Worker unregistration failed:",e),!1}}async update(){if(!this.registration){console.warn("No service worker registration found");return}try{await this.registration.update(),console.log("üîÑ Service Worker update check completed")}catch(e){console.error("‚ùå Service Worker update failed:",e)}}async clearCache(){return this.sendMessage("CLEAR_CACHE")}async getCacheStats(){return(await this.sendMessage("CACHE_STATS")).stats}async prefetchResources(e){return this.sendMessage("PREFETCH_RESOURCES",{urls:e})}isSupported(){return"serviceWorker"in navigator}getRegistration(){return this.registration}async sendMessage(e,r){if(!navigator.serviceWorker.controller)throw new Error("No service worker controller available");return new Promise((o,a)=>{try{const t=new MessageChannel;t.port1.onmessage=i=>{var d;try{(d=i.data)!=null&&d.error?a(new Error(i.data.error)):o(i.data)}catch(h){console.warn("XrayWrapper: Message handling error:",h),o(null)}};const l={type:String(e),payload:r?JSON.parse(JSON.stringify(r)):void 0};try{navigator.serviceWorker.controller.postMessage(l,[t.port2])}catch(i){if(navigator.userAgent.includes("Firefox")&&navigator.serviceWorker.controller.wrappedJSObject)navigator.serviceWorker.controller.wrappedJSObject.postMessage(l,[t.port2]);else throw i}}catch(t){console.warn("XrayWrapper: Service worker message failed:",t),a(t)}})}handleServiceWorkerUpdate(e){e.addEventListener("statechange",()=>{e.state==="installed"&&(navigator.serviceWorker.controller?(console.log("üÜï New Service Worker available"),this.showUpdateNotification()):console.log("üéâ Service Worker installed for the first time"))})}handleServiceWorkerMessage(e){const{type:r,payload:o}=e.data;switch(r){case"CACHE_UPDATED":console.log("üì¶ Cache updated:",o);break;case"OFFLINE_READY":console.log("üì¥ App ready for offline use");break;case"UPDATE_AVAILABLE":console.log("üîÑ Update available"),this.showUpdateNotification();break;default:console.log("üì® SW Message:",e.data)}}showUpdateNotification(){console.log("üîî Update notification: New version available"),window.dispatchEvent(new CustomEvent("sw-update-available",{detail:{registration:this.registration}}))}setupUpdateChecking(){this.updateCheckInterval=setInterval(()=>{this.registration&&this.update().catch(console.error)},1800*1e3)}async applyUpdate(){!this.registration||!this.registration.waiting||(this.registration.waiting.postMessage({type:"SKIP_WAITING"}),window.location.reload())}}class f{constructor(e){n(this,"sw");this.sw=e}async prefetchCriticalResources(){const e=["/assets/css/index.css","/assets/js/vendor.js","/assets/js/main.js"];try{await this.sw.prefetchResources(e),console.log("üöÄ Critical resources prefetched")}catch(r){console.error("‚ùå Failed to prefetch critical resources:",r)}}async prefetchRoute(e){const r=this.getRouteResources(e);try{await this.sw.prefetchResources(r),console.log(`üìç Prefetched resources for route: ${e}`)}catch(o){console.error(`‚ùå Failed to prefetch route ${e}:`,o)}}async getCacheHealth(){try{const e=await this.sw.getCacheStats(),r=[];let o=0;return Object.entries(e).forEach(([a,t])=>{o+=t.entryCount||0,t.entryCount>100&&r.push(`${a} cache has many entries (${t.entryCount})`),t.exists||r.push(`${a} cache is not properly initialized`)}),{totalSize:o,cacheStatus:e,recommendations:r}}catch(e){return console.error("‚ùå Failed to get cache health:",e),{totalSize:0,cacheStatus:{},recommendations:["Failed to get cache statistics"]}}}getRouteResources(e){return{"/products":["/api/products","/api/categories"],"/dashboard":["/api/dashboard/analytics","/api/user/profile"],"/checkout":["/api/payment/methods","/api/shipping/options"]}[e]||[]}}const c=new p,v=new f(c);if(typeof window<"u"){const s=()=>{c.register().then(r=>{r&&(console.log("üéØ Service Worker registration completed"),setTimeout(()=>{v.prefetchCriticalResources().catch(console.error)},5e3))}).catch(console.error)};window.addEventListener("load",()=>{setTimeout(s,3e3)});let e;window.addEventListener("online",()=>{clearTimeout(e),e=setTimeout(()=>{console.log("üåê Back online - checking for updates"),c.update().catch(console.error)},1e3)}),window.addEventListener("offline",()=>{console.log("üì¥ Gone offline - using cached resources")})}export{f as CacheManager,v as cacheManager,c as default,c as serviceWorkerManager};
