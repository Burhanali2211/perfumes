
PERFUME SITE ERROR CHECK REPORT
Generated: 2025-09-23T02:44:07.197Z

DEV SERVER STATUS: RUNNING ✅
Port: 5174

FRAMER-MOTION CHECK: FAILED ❌
src\components\Address\AddressForm.tsx:import { motion } from 'framer-motion';
src\components\Address\AddressManagement.tsx:import { motion } from 'framer-motion';
src\components\Auth\SocialAuthProvider.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\AccessibilityDashboard.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\BulkProductImport.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\CategoryManagement.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Dashboard\Admin\CouponManagement.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\DatabaseSchemaViewer.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\InventoryManagement.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\OrderManagement.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\OrderManager.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Dashboard\Admin\ProductManagement.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Dashboard\Admin\ReportCharts.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\Admin\ThemeCustomizationDashboard.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\CustomerDashboard.tsx:import { motion } from 'framer-motion';
src\components\Dashboard\SellerDashboard.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Home\FeaturedProducts.tsx:// FeaturedProducts component without framer-motion for better performance
src\components\Home\RecentlyViewed.tsx:import { motion } from 'framer-motion';
src\components\Home\Testimonials.tsx:import { motion } from 'framer-motion';
src\components\Home\TrendingSection.tsx:// TrendingSection without framer-motion animations for better performance
src\components\Home\TrustSignalsSection.tsx:import { motion } from 'framer-motion';
src\components\Layout\ResponsiveLayout.tsx:import { motion } from 'framer-motion';
src\components\Mobile\MobileCheckoutForms.tsx:import { motion } from 'framer-motion';
src\components\Mobile\MobileProductCarousel.tsx:// Removed framer-motion imports
src\components\Mobile\MobileTouchButton.tsx:import { motion } from 'framer-motion';
src\components\Navigation\AdvancedNavigationSidebar.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Order\OrderTracking.tsx:import { motion } from 'framer-motion';
src\components\Payment\RazorpayPayment.tsx:import { motion } from 'framer-motion';
src\components\Product\AttrFilters.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Product\ProductDetails.tsx:import { motion } from 'framer-motion';
src\components\Product\ProductFilters.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Product\ProductForm.tsx:import { motion } from 'framer-motion';
src\components\Product\ProductionProductForm.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Product\ProductRecommendations.tsx:import { motion } from 'framer-motion';
src\components\Product\ReviewForm.tsx:import { motion } from 'framer-motion';
src\components\Settings\AdminSettings.tsx:import { motion } from 'framer-motion';
src\components\Settings\NotificationSettings.tsx:import { motion } from 'framer-motion';
src\components\Settings\PaymentSettings.tsx:import { motion } from 'framer-motion';
src\components\Settings\ProfileSettings.tsx:import { motion } from 'framer-motion';
src\components\Settings\SecuritySettings.tsx:import { motion } from 'framer-motion';
src\components\Settings\SettingsSection.tsx:import { motion } from 'framer-motion';
src\components\Trust\ProductPageTrustSignals.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Trust\SocialProof.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\components\Trust\TrustBadges.tsx:import { motion } from 'framer-motion';
src\components\Trust\TrustSignals.tsx:import { motion } from 'framer-motion';
src\pages\CategoriesPage.tsx:import { motion } from 'framer-motion';
src\pages\CheckoutPage.tsx:import { motion } from 'framer-motion';
src\pages\CollectionsPage.tsx:import { motion } from 'framer-motion';
src\pages\ComparePage.tsx:import { motion } from 'framer-motion';
src\pages\DealsPage.tsx:import { motion } from 'framer-motion';
src\pages\HomePage.tsx:                                {/* Optimized CTA Button - removed framer-motion for better performance */}
src\pages\HomePage.tsx:                {/* Optimized Bottom CTA - removed framer-motion */}
src\pages\HomePage.tsx:// Optimized Brand Story Section - removed framer-motion animations
src\pages\NotFoundPage.tsx:import { motion } from 'framer-motion';
src\pages\OrdersPage.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\pages\ProductDetailPage.tsx:import { motion } from 'framer-motion';
src\pages\ProductionProfilePage.tsx:import { motion, AnimatePresence } from 'framer-motion';
src\pages\SettingsPage.tsx:import { motion } from 'framer-motion';


DUPLICATE REACT IMPORTS: FAILED ❌
[
  [
    "src\\App.tsx",
    [
      "src\\App.tsx:1:import React, { Suspense, useEffect, lazy, memo } from 'react';",
      "src\\App.tsx:2:import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';",
      "src\\App.tsx:3:import '@/styles/pwa-responsive.css';",
      "src\\App.tsx:4:import { CombinedProvider } from '@/contexts/CombinedProvider';",
      "src\\App.tsx:5:import { Layout } from '@/components/Layout/Layout';",
      "src\\App.tsx:6:import { DatabaseErrorOverlay } from '@/components/Common/DatabaseErrorOverlay';",
      "src\\App.tsx:7:import { ErrorBoundary } from '@/components/Common/ErrorBoundary';",
      "src\\App.tsx:8:import { ScrollToTop } from '@/components/Common/ScrollToTop';",
      "src\\App.tsx:9:import { PageLoader } from '@/components/Common/UniversalLoader';",
      "src\\App.tsx:10:import { GlobalMediaErrorHandler } from '@/components/Common/MediaErrorHandler';",
      "src\\App.tsx:11:import { SkipLink } from '@/utils/accessibilityEnhancements';",
      "src\\App.tsx:12:import { initializeDatabase } from '@/utils/database/init';",
      "src\\App.tsx:15:const HomePage = React.lazy(() => import('@/pages/HomePage'));",
      "src\\App.tsx:16:const ProductsPage = React.lazy(() => import('@/pages/ProductsPage'));",
      "src\\App.tsx:17:const ProductDetailPage = React.lazy(() => import('@/pages/ProductDetailPage'));",
      "src\\App.tsx:18:const SearchPage = React.lazy(() => import('@/pages/SearchPage'));",
      "src\\App.tsx:19:const WishlistPage = React.lazy(() => import('@/pages/WishlistPage'));",
      "src\\App.tsx:20:const ComparePage = React.lazy(() => import('@/pages/ComparePage'));",
      "src\\App.tsx:21:const NewArrivalsPage = React.lazy(() => import('@/pages/NewArrivalsPage'));",
      "src\\App.tsx:22:const DealsPage = React.lazy(() => import('@/pages/DealsPage'));",
      "src\\App.tsx:23:const CategoriesPage = React.lazy(() => import('@/pages/CategoriesPage'));",
      "src\\App.tsx:24:const CollectionsPage = React.lazy(() => import('@/pages/CollectionsPage'));",
      "src\\App.tsx:25:const AuthPage = React.lazy(() => import('@/pages/AuthPage'));",
      "src\\App.tsx:26:const NotFoundPage = React.lazy(() => import('@/pages/NotFoundPage'));",
      "src\\App.tsx:29:const DashboardPage = React.lazy(() =>",
      "src\\App.tsx:30:  import('./pages/DashboardPage.tsx').then(module => ({ default: module.default }))",
      "src\\App.tsx:32:const ProfilePage = React.lazy(() =>",
      "src\\App.tsx:33:  import('./pages/ProductionProfilePage.tsx').then(module => ({ default: module.default }))",
      "src\\App.tsx:35:const CheckoutPage = React.lazy(() =>",
      "src\\App.tsx:36:  import('./pages/CheckoutPage.tsx').then(module => ({ default: module.default }))",
      "src\\App.tsx:38:const OrdersPage = React.lazy(() =>",
      "src\\App.tsx:39:  import('./pages/OrdersPage.tsx').then(module => ({ default: module.default }))",
      "src\\App.tsx:41:const SettingsPage = React.lazy(() =>",
      "src\\App.tsx:42:  import('./pages/SettingsPage.tsx').then(module => ({ default: module.default }))",
      "src\\App.tsx:96:      const { initializeAccessibility } = await import('./utils/accessibilityEnhancements');"
    ]
  ],
  [
    "src\\components\\Address\\AddressForm.tsx",
    [
      "src\\components\\Address\\AddressForm.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Address\\AddressForm.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Address\\AddressForm.tsx:3:import { useAddresses } from '../../contexts/AddressContext';\r",
      "src\\components\\Address\\AddressForm.tsx:4:import { Address } from '../../types';\r",
      "src\\components\\Address\\AddressForm.tsx:11:export const AddressForm: React.FC<AddressFormProps> = ({ address, onClose }) => {\r",
      "src\\components\\Address\\AddressForm.tsx:42:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r",
      "src\\components\\Address\\AddressForm.tsx:50:  const handleSubmit = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Address\\AddressManagement.tsx",
    [
      "src\\components\\Address\\AddressManagement.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Address\\AddressManagement.tsx:2:import { Plus, Edit, Trash2, MapPin, Star } from 'lucide-react';\r",
      "src\\components\\Address\\AddressManagement.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Address\\AddressManagement.tsx:4:import { useAddresses } from '../../contexts/AddressContext';\r",
      "src\\components\\Address\\AddressManagement.tsx:5:import { Address } from '../../types';\r",
      "src\\components\\Address\\AddressManagement.tsx:6:import { Modal } from '../Common/Modal';\r",
      "src\\components\\Address\\AddressManagement.tsx:7:import { AddressForm } from './AddressForm';\r",
      "src\\components\\Address\\AddressManagement.tsx:9:export const AddressManagement: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Auth\\AuthModal.tsx",
    [
      "src\\components\\Auth\\AuthModal.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Auth\\AuthModal.tsx:2:import {\r",
      "src\\components\\Auth\\AuthModal.tsx:7:import { useAuth } from '@/contexts/AuthContext';\r",
      "src\\components\\Auth\\AuthModal.tsx:8:import { useNotification } from '@/contexts/NotificationContext';\r",
      "src\\components\\Auth\\AuthModal.tsx:34:export const AuthModal: React.FC<AuthModalProps> = ({\r",
      "src\\components\\Auth\\AuthModal.tsx:177:  const handleSubmit = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Auth\\MobileAuthView.tsx",
    [
      "src\\components\\Auth\\MobileAuthView.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Auth\\MobileAuthView.tsx:2:import {\r",
      "src\\components\\Auth\\MobileAuthView.tsx:8:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Auth\\MobileAuthView.tsx:27:export const MobileAuthView: React.FC<MobileAuthViewProps> = ({\r",
      "src\\components\\Auth\\MobileAuthView.tsx:98:  const handleSubmit = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Auth\\PasswordResetFlow.tsx",
    [
      "src\\components\\Auth\\PasswordResetFlow.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Auth\\PasswordResetFlow.tsx:3:import {\r",
      "src\\components\\Auth\\PasswordResetFlow.tsx:7:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Auth\\PasswordResetFlow.tsx:24:export const PasswordResetFlow: React.FC<PasswordResetFlowProps> = ({\r",
      "src\\components\\Auth\\PasswordResetFlow.tsx:102:      const { resetPassword } = await import('../../contexts/AuthContext');\r",
      "src\\components\\Auth\\PasswordResetFlow.tsx:176:      const { updatePassword } = await import('../../contexts/AuthContext');\r"
    ]
  ],
  [
    "src\\components\\Auth\\ResponsiveAuthButton.tsx",
    [
      "src\\components\\Auth\\ResponsiveAuthButton.tsx:1:import React from 'react';\r",
      "src\\components\\Auth\\ResponsiveAuthButton.tsx:2:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Auth\\ResponsiveAuthButton.tsx:3:import { useMobileAuth } from '../../hooks/useMobileAuth';\r",
      "src\\components\\Auth\\ResponsiveAuthButton.tsx:4:import { LogIn, LogOut, Smartphone } from 'lucide-react';\r",
      "src\\components\\Auth\\ResponsiveAuthButton.tsx:13:export const ResponsiveAuthButton: React.FC<ResponsiveAuthButtonProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Auth\\SocialAuthProvider.tsx",
    [
      "src\\components\\Auth\\SocialAuthProvider.tsx:1:import React from 'react';\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:3:import { Chrome, Facebook, Apple, Github, Twitter } from 'lucide-react';\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:4:import { supabase } from '../../lib/supabase';\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:5:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:18:  icon: React.ComponentType<{ className?: string }>;\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:73:export const SocialAuthProvider: React.FC<SocialAuthProviderProps> = ({\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:164:export const AuthCallback: React.FC = () => {\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:167:  React.useEffect(() => {\r",
      "src\\components\\Auth\\SocialAuthProvider.tsx:215:export const SocialAuthButton: React.FC<SocialAuthButtonProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Cart\\CartSidebar.tsx",
    [
      "src\\components\\Cart\\CartSidebar.tsx:1:import React from 'react';\r",
      "src\\components\\Cart\\CartSidebar.tsx:2:import { X, Minus, Plus, ShoppingBag } from 'lucide-react';\r",
      "src\\components\\Cart\\CartSidebar.tsx:3:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Cart\\CartSidebar.tsx:4:import { Link } from 'react-router-dom';\r",
      "src\\components\\Cart\\CartSidebar.tsx:11:export const CartSidebar: React.FC<CartSidebarProps> = ({ isOpen, onClose }) => {\r"
    ]
  ],
  [
    "src\\components\\Category\\CategoryDisplayCard.tsx",
    [
      "src\\components\\Category\\CategoryDisplayCard.tsx:1:import React from 'react';\r",
      "src\\components\\Category\\CategoryDisplayCard.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Category\\CategoryDisplayCard.tsx:3:import { Category } from '../../types';\r",
      "src\\components\\Category\\CategoryDisplayCard.tsx:4:import { ArrowRight } from 'lucide-react';\r",
      "src\\components\\Category\\CategoryDisplayCard.tsx:5:import { useMobileDetection } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Category\\CategoryDisplayCard.tsx:11:export const CategoryDisplayCard: React.FC<CategoryDisplayCardProps> = ({ category }) => {\r"
    ]
  ],
  [
    "src\\components\\Common\\AdminDesignSystem.tsx",
    [
      "src\\components\\Common\\AdminDesignSystem.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:2:import { LucideIcon } from 'lucide-react';\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:98:  children: React.ReactNode;\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:102:  actions?: React.ReactNode;\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:112:  actions?: React.ReactNode;\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:175:export const AdminCard: React.FC<AdminCardProps> = ({\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:221:export const AdminHeader: React.FC<AdminHeaderProps> = ({\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:265:export const AdminMetricCard: React.FC<AdminMetricCardProps> = ({\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:334:  const [debouncedValue, setDebouncedValue] = React.useState(value);\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:336:  React.useEffect(() => {\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:351:  deps: React.DependencyList\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:353:  return React.useCallback(callback, deps);\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:387:  const [screenSize, setScreenSize] = React.useState<'sm' | 'md' | 'lg' | 'xl' | '2xl'>('lg');\r",
      "src\\components\\Common\\AdminDesignSystem.tsx:389:  React.useEffect(() => {\r"
    ]
  ],
  [
    "src\\components\\Common\\AdminErrorBoundary.tsx",
    [
      "src\\components\\Common\\AdminErrorBoundary.tsx:1:import React, { Component, ErrorInfo, ReactNode } from 'react';\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:2:import { AlertTriangle, RefreshCw, Home, Bug, Shield, WifiOff, Database, Send, Copy, CheckCircle } from 'lucide-react';\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:3:import { useNetworkStatus } from '../../utils/networkResilience';\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:6:  children: ReactNode;\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:7:  fallback?: ReactNode;\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:77:    if (message.includes('chunk') || message.includes('loading') || stack.includes('import')) {\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:447:  Component: React.ComponentType<P>,\r",
      "src\\components\\Common\\AdminErrorBoundary.tsx:448:  fallback?: ReactNode\r"
    ]
  ],
  [
    "src\\components\\Common\\Button.tsx",
    [
      "src\\components\\Common\\Button.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\Button.tsx:2:import { LucideIcon } from 'lucide-react';\r",
      "src\\components\\Common\\Button.tsx:3:import { designTokens } from '@/lib/design-tokens';\r",
      "src\\components\\Common\\Button.tsx:6:  children: React.ReactNode;\r",
      "src\\components\\Common\\Button.tsx:19:export const Button: React.FC<ButtonProps> = ({\r",
      "src\\components\\Common\\Button.tsx:88:export const Badge: React.FC<BadgeProps> = ({\r",
      "src\\components\\Common\\Button.tsx:114:  children: React.ReactNode;\r",
      "src\\components\\Common\\Button.tsx:118:export const Tooltip: React.FC<TooltipProps> = ({\r",
      "src\\components\\Common\\Button.tsx:123:  const [isVisible, setIsVisible] = React.useState(false);\r"
    ]
  ],
  [
    "src\\components\\Common\\DatabaseErrorOverlay.tsx",
    [
      "src\\components\\Common\\DatabaseErrorOverlay.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\DatabaseErrorOverlay.tsx:2:import { AlertTriangle, X, Database, RefreshCw } from 'lucide-react';\r",
      "src\\components\\Common\\DatabaseErrorOverlay.tsx:3:import { useError } from '../../contexts/ErrorContext';\r",
      "src\\components\\Common\\DatabaseErrorOverlay.tsx:4:import { detectRLSRecursionError, generateRLSFixSuggestion } from '../../utils/errorHandling';\r",
      "src\\components\\Common\\DatabaseErrorOverlay.tsx:6:export const DatabaseErrorOverlay: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Common\\ErrorBoundary.tsx",
    [
      "src\\components\\Common\\ErrorBoundary.tsx:1:import React, { Component, ReactNode } from 'react';\r",
      "src\\components\\Common\\ErrorBoundary.tsx:2:import { AlertTriangle, RefreshCw, Home } from 'lucide-react';\r",
      "src\\components\\Common\\ErrorBoundary.tsx:15:  children: ReactNode;\r",
      "src\\components\\Common\\ErrorBoundary.tsx:16:  fallback?: ReactNode;\r",
      "src\\components\\Common\\ErrorBoundary.tsx:66:    if (!shouldIgnore && import.meta.env.PROD) {\r",
      "src\\components\\Common\\ErrorBoundary.tsx:140:  Component: React.ComponentType<P>,\r",
      "src\\components\\Common\\ErrorBoundary.tsx:141:  fallback?: ReactNode\r"
    ]
  ],
  [
    "src\\components\\Common\\ErrorFallback.tsx",
    [
      "src\\components\\Common\\ErrorFallback.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\ErrorFallback.tsx:2:import { AlertTriangle, RefreshCw, WifiOff, Database, Clock } from 'lucide-react';\r",
      "src\\components\\Common\\ErrorFallback.tsx:13:export const ErrorFallback: React.FC<ErrorFallbackProps> = ({\r",
      "src\\components\\Common\\ErrorFallback.tsx:108:export const ProductGridError: React.FC<ProductGridErrorProps> = ({\r",
      "src\\components\\Common\\ErrorFallback.tsx:148:export const NetworkStatus: React.FC<NetworkStatusProps> = ({ isOnline, onRetry }) => {\r"
    ]
  ],
  [
    "src\\components\\Common\\ImageUpload.tsx",
    [
      "src\\components\\Common\\ImageUpload.tsx:1:import React, { useState, useRef, useCallback } from 'react';\r",
      "src\\components\\Common\\ImageUpload.tsx:2:import { Upload, X, Link, CheckCircle, Image as ImageIcon } from 'lucide-react';\r",
      "src\\components\\Common\\ImageUpload.tsx:4:import { StorageService, UploadProgress } from '../../services/storageService';\r",
      "src\\components\\Common\\ImageUpload.tsx:5:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Common\\ImageUpload.tsx:21:export const ImageUpload: React.FC<ImageUploadProps> = ({\r",
      "src\\components\\Common\\ImageUpload.tsx:42:  const handleDragOver = useCallback((e: React.DragEvent) => {\r",
      "src\\components\\Common\\ImageUpload.tsx:49:  const handleDragLeave = useCallback((e: React.DragEvent) => {\r",
      "src\\components\\Common\\ImageUpload.tsx:54:  const handleDrop = useCallback((e: React.DragEvent) => {\r",
      "src\\components\\Common\\ImageUpload.tsx:74:  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Common\\LazyImage.tsx",
    [
      "src\\components\\Common\\LazyImage.tsx:1:import React, { useState, useRef, useEffect } from 'react';\r",
      "src\\components\\Common\\LazyImage.tsx:2:import { performanceMonitor } from '../../utils/performance';\r",
      "src\\components\\Common\\LazyImage.tsx:23:export const LazyImage: React.FC<LazyImageProps> = ({ \r"
    ]
  ],
  [
    "src\\components\\Common\\LoadingSpinner.tsx",
    [
      "src\\components\\Common\\LoadingSpinner.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\LoadingSpinner.tsx:2:import { Loader, WifiOff, AlertCircle, CheckCircle } from 'lucide-react';\r",
      "src\\components\\Common\\LoadingSpinner.tsx:19:export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\r",
      "src\\components\\Common\\LoadingSpinner.tsx:132:export const ProgressiveLoading: React.FC<ProgressiveLoadingProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Common\\MediaErrorHandler.tsx",
    [
      "src\\components\\Common\\MediaErrorHandler.tsx:1:import React, { useState, useRef, useEffect } from 'react';\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:2:import { AlertTriangle, RefreshCw } from 'lucide-react';\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:14:  placeholder?: React.ReactNode;\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:20:export const SafeImage: React.FC<MediaErrorHandlerProps> = ({\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:38:  const handleError = (event: React.SyntheticEvent<HTMLImageElement, Event>) => {\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:134:export const ImagePlaceholder: React.FC<{ size?: 'sm' | 'md' | 'lg' }> = ({ size = 'md' }) => {\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:165:export const SafeVideo: React.FC<SafeVideoProps> = ({\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:181:  const handleError = (event: React.SyntheticEvent<HTMLVideoElement, Event>) => {\r",
      "src\\components\\Common\\MediaErrorHandler.tsx:233:export const GlobalMediaErrorHandler: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Common\\Modal.tsx",
    [
      "src\\components\\Common\\Modal.tsx:1:import React, { ReactNode } from 'react';\r",
      "src\\components\\Common\\Modal.tsx:2:import { X } from 'lucide-react';\r",
      "src\\components\\Common\\Modal.tsx:8:  children: ReactNode;\r",
      "src\\components\\Common\\Modal.tsx:12:export const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, size = 'md' }) => {\r",
      "src\\components\\Common\\Modal.tsx:21:  React.useEffect(() => {\r"
    ]
  ],
  [
    "src\\components\\Common\\NetworkStatusProvider.tsx",
    [
      "src\\components\\Common\\NetworkStatusProvider.tsx:1:import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';",
      "src\\components\\Common\\NetworkStatusProvider.tsx:3:import { WifiOff, Wifi, AlertTriangle, CheckCircle, Clock } from 'lucide-react';",
      "src\\components\\Common\\NetworkStatusProvider.tsx:4:import { useNetworkStatus, useGracefulDegradation } from '../../utils/networkResilience';",
      "src\\components\\Common\\NetworkStatusProvider.tsx:28:  children: ReactNode;",
      "src\\components\\Common\\NetworkStatusProvider.tsx:33:export const NetworkStatusProvider: React.FC<NetworkStatusProviderProps> = ({",
      "src\\components\\Common\\NetworkStatusProvider.tsx:146:    icon: React.ReactNode;",
      "src\\components\\Common\\NetworkStatusProvider.tsx:157:const NetworkStatusBar: React.FC<NetworkStatusBarProps> = ({",
      "src\\components\\Common\\NetworkStatusProvider.tsx:203:export const ConnectionQualityIndicator: React.FC<{"
    ]
  ],
  [
    "src\\components\\Common\\ProductImage.tsx",
    [
      "src\\components\\Common\\ProductImage.tsx:1:import React from 'react';\r",
      "src\\components\\Common\\ProductImage.tsx:14:export const ProductImage: React.FC<ProductImageProps> = ({\r",
      "src\\components\\Common\\ProductImage.tsx:21:    const [imageError, setImageError] = React.useState(false);\r",
      "src\\components\\Common\\ProductImage.tsx:22:    const [currentImage, setCurrentImage] = React.useState(0);\r"
    ]
  ],
  [
    "src\\components\\Common\\ResponsiveContainer.tsx",
    [
      "src\\components\\Common\\ResponsiveContainer.tsx:1:import React, { useState, useEffect } from 'react';",
      "src\\components\\Common\\ResponsiveContainer.tsx:2:import { Menu, X } from 'lucide-react';",
      "src\\components\\Common\\ResponsiveContainer.tsx:5:  children: React.ReactNode;",
      "src\\components\\Common\\ResponsiveContainer.tsx:22:export const ResponsiveContainer: React.FC<ResponsiveContainerProps> = ({"
    ]
  ],
  [
    "src\\components\\Common\\ResponsiveTable.tsx",
    [
      "src\\components\\Common\\ResponsiveTable.tsx:1:import React, { useEffect, useState } from 'react';\r",
      "src\\components\\Common\\ResponsiveTable.tsx:6:  render?: (value: unknown, record: T) => React.ReactNode;\r"
    ]
  ],
  [
    "src\\components\\Common\\ScrollToTop.tsx",
    [
      "src\\components\\Common\\ScrollToTop.tsx:1:import { useEffect } from 'react';\r",
      "src\\components\\Common\\ScrollToTop.tsx:2:import { useLocation } from 'react-router-dom';\r",
      "src\\components\\Common\\ScrollToTop.tsx:9:export const ScrollToTop: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Common\\UniversalLoader.tsx",
    [
      "src\\components\\Common\\UniversalLoader.tsx:1:import React, { memo } from 'react';\r",
      "src\\components\\Common\\UniversalLoader.tsx:2:import { Loader, AlertCircle, CheckCircle, WifiOff, RefreshCw } from 'lucide-react';\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx",
    [
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:1:import React, { useState, useEffect, useMemo } from 'react';",
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:2:import { motion } from 'framer-motion';",
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:3:import { Eye, Zap, ZapOff, Type, Palette, MousePointer, Keyboard, Shield, AlertTriangle, CheckCircle, Settings, BarChart3, Accessibility, Monitor, Smartphone, Tablet } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:4:import { ",
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:10:import { useResponsiveDesign } from '../../../utils/responsiveDesign';",
      "src\\components\\Dashboard\\Admin\\AccessibilityDashboard.tsx:31:export const AccessibilityDashboard: React.FC<AccessibilityDashboardProps> = ({ "
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx",
    [
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:2:import { FileText, BarChart3, Download, Settings, Plus, Play, Eye, Edit, Trash2, Copy, RefreshCw, Save, Search } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:6:import { EnhancedButton } from '../../Common/EnhancedButton';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:7:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:8:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\AdvancedReports.tsx:50:export const AdvancedReports: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx",
    [
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:2:import { TrendingUp, DollarSign, Users, ShoppingCart, Package, Download, RefreshCw, ArrowUp, ArrowDown, Eye } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:4:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:5:import { ErrorFallback } from '../../Common/ErrorFallback';\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:38:export const AnalyticsDashboard: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:60:      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r",
      "src\\components\\Dashboard\\Admin\\AnalyticsDashboard.tsx:61:      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\AuditLogs.tsx",
    [
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:2:import { FileText, Search, Download, Eye, User, Activity, Shield, AlertTriangle, Info, CheckCircle, XCircle, Settings, Users, Package, ShoppingCart, RefreshCw, ChevronDown, ChevronUp } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:6:import { EnhancedButton } from '../../Common/EnhancedButton';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:7:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:8:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:37:export const AuditLogs: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:402:                  <React.Fragment key={log.id}>\r",
      "src\\components\\Dashboard\\Admin\\AuditLogs.tsx:479:                  </React.Fragment>\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx",
    [
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:1:import React, { useState, useRef } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:3:import {\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:12:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:13:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:36:export const BulkProductImport: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:38:  const [importResult, setImportResult] = useState<ImportResult | null>(null);\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:54:    a.download = 'product_import_template.csv';\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:118:  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:215:        showNotification(`Successfully imported ${result.success} products!`, 'success');\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:219:        showNotification(`${result.failed} products failed to import`, 'error');\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:244:            <li>• Upload your CSV file and preview the data before importing</li>\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:245:            <li>• Categories must exist in the system before importing products</li>\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:295:                  Found {previewData.length} products. Review and confirm to import.\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:363:        {importResult && (\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:372:                    <strong>{importResult.success}</strong> products imported successfully\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:376:                {importResult.failed > 0 && (\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:380:                      <strong>{importResult.failed}</strong> products failed to import\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:386:              {importResult.errors.length > 0 && (\r",
      "src\\components\\Dashboard\\Admin\\BulkProductImport.tsx:390:                    {importResult.errors.map((error, index) => (\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:1:import React, { useState, useMemo, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:2:import { useProducts } from '../../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:3:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:4:import { Category } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:6:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:7:import { ImageUpload } from '../../Common/ImageUpload';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:8:import { StorageService } from '../../../services/storageService';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:9:import { Edit, Trash2, Plus, Package, Image, Search, Filter, Download, RefreshCw, CheckSquare, Square, Eye, Copy, SortAsc, SortDesc, FolderTree, Tag } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:10:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:11:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:12:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:13:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:15:export const CategoryManagement: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:288:  const handleSubmit = async (e: React.FormEvent) => {\r",
      "src\\components\\Dashboard\\Admin\\CategoryManagement.tsx:331:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:1:import React, { useState, useMemo, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:2:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:3:import { useCollections } from '../../../contexts/CollectionContext';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:4:import { Collection } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:6:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:7:import { ImageUpload } from '../../Common/ImageUpload';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:8:import { StorageService } from '../../../services/storageService';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:9:import { Plus, Search, Download, Edit, Trash2, Eye, Copy, RefreshCw, Calendar, Tag, Crown, Zap, Award, Sparkles, Gift, Star, ChevronDown, ChevronUp } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:15:export const CollectionManagement: React.FC<CollectionManagementProps> = ({ className = '' }) => {\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:216:  const handleSubmit = async (e: React.FormEvent) => {\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:247:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r",
      "src\\components\\Dashboard\\Admin\\CollectionManagement.tsx:260:  const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:1:import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:2:import { Database, Users, Package, ShoppingCart, CreditCard, MapPin, Star, Tag, Truck, Settings, Activity, BarChart3, TrendingUp, Eye, Download, Filter, Search, RefreshCw, GitBranch, DollarSign, Clock, AlertTriangle, ArrowUp, ArrowDown, Minus, Bell } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:4:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:5:import { ErrorFallback } from '../../Common/ErrorFallback';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:6:import { UniversalTableManager } from './UniversalTableManager';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:7:import { DatabaseSchemaViewer } from './DatabaseSchemaViewer';\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:8:import {\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:16:  icon: React.ReactNode;\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:59:export const ComprehensiveAdminDashboard: React.FC = memo(() => {\r",
      "src\\components\\Dashboard\\Admin\\ComprehensiveAdminDashboard.tsx:61:  if (import.meta.env.DEV) {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\CouponManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:1:import React, { useState, useEffect, useMemo } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:2:import { useProducts } from '../../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:3:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:4:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:5:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:6:import { Edit, Trash2, Plus, Search, Tag, Percent, Hash, Clock, AlertCircle, CheckCircle, XCircle } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:7:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:8:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:9:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:10:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:29:export const CouponManagement: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:296:  const handleSubmit = async (e: React.FormEvent) => {\r",
      "src\\components\\Dashboard\\Admin\\CouponManagement.tsx:348:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\DatabaseSchemaViewer.tsx",
    [
      "src\\components\\Dashboard\\Admin\\DatabaseSchemaViewer.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\DatabaseSchemaViewer.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\DatabaseSchemaViewer.tsx:3:import {\r",
      "src\\components\\Dashboard\\Admin\\DatabaseSchemaViewer.tsx:35:export const DatabaseSchemaViewer: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:2:import { useProducts } from '../../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:3:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:4:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:5:import { Edit, Plus, Search, Package, AlertTriangle, TrendingUp } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:6:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:7:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:8:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:35:export const InventoryManagement: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\InventoryManagement.tsx:127:  const handleSubmitAdjustment = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:2:import { Megaphone, TrendingUp, Target, BarChart3, Plus, Search, Edit, Trash2, Eye, Play, Pause, Copy, DollarSign, Gift, RefreshCw } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:6:import { EnhancedButton } from '../../Common/EnhancedButton';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:7:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:8:import { ImageUpload } from '../../Common/ImageUpload';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:9:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\MarketingManagement.tsx:60:export const MarketingManagement: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\OrderManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:1:import React, { useState, useEffect } from 'react';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:2:import { Package, Eye, Edit, Truck, CheckCircle, XCircle, Clock, AlertTriangle } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:3:import { motion } from 'framer-motion';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:5:import { orderManagementService } from '../../../services/orderManagementService';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:6:import { Order, OrderStatus } from '../../../types';",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:12:export const OrderManagement: React.FC<OrderManagementProps> = ({ className = '' }) => {",
      "src\\components\\Dashboard\\Admin\\OrderManagement.tsx:339:const OrderUpdateModal: React.FC<OrderUpdateModalProps> = ({"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\OrderManager.tsx",
    [
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:1:import React, { useState, useEffect, useMemo } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:2:import { Package, Clock, CheckCircle, XCircle, Search, Filter, Eye, Edit, Download, RefreshCw, CheckSquare, Square, Calendar, DollarSign, User, FileText, SortAsc, SortDesc } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:4:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:5:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:6:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:7:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:8:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:9:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\OrderManager.tsx:32:export const OrderManager: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:1:import React, { useState, useEffect, useMemo, useCallback } from 'react';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:2:import { Users, UserPlus, Search, Filter, Download, Edit, X, CheckCircle, Clock } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:3:import { ResponsiveContainer, useViewport, usePWAInstall } from '../../Common/ResponsiveContainer';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:4:import { useSecurity } from '../../Security/SecurityProvider';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:5:import { validateUser, validateEmail, sanitizeInput } from '../../../utils/validation';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:6:import {",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:13:import { createUser, updateUser, deleteUser } from '../../../lib/crudOperations';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:14:import { User } from '../../../types';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:15:import { LoadingSpinner } from '../../Common/LoadingSpinner';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:16:import { useNotification } from '../../../contexts/NotificationContext';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:17:import { EnhancedButton } from '../../Common/EnhancedButton';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:18:import { Modal } from '../../Common/Modal';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:19:import { UserManagementTable } from './UserManagementTable';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:20:import { UserFormModal } from './UserFormModal';",
      "src\\components\\Dashboard\\Admin\\ProductionUserManagement.tsx:40:const ProductionUserManagement: React.FC = () => {"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ProductManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:1:import React, { useState, useMemo } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:2:import { useProducts } from '../../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:3:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:4:import { Product } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:6:import { EnhancedProductForm } from '../../Product/EnhancedProductForm';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:7:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:8:import { Edit, Trash2, Plus, Package, Search, Filter, Download, CheckSquare, Square, Eye, Copy, RefreshCw, SortAsc, SortDesc } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:9:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:10:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:11:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:12:import { EmptyState, CardSkeleton } from '../../Common/EnhancedLoadingStates';\r",
      "src\\components\\Dashboard\\Admin\\ProductManagement.tsx:14:export const ProductManagement: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ProductManager.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:2:import { Plus, Edit, Trash2, Package, Search } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:3:import { useProducts } from '../../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:4:import { useAuth } from '../../../contexts/AuthContext';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:5:import { Product } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:6:import { ProductForm } from '../../Product/ProductForm';\r",
      "src\\components\\Dashboard\\Admin\\ProductManager.tsx:8:export const ProductManager: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ReportCharts.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:2:import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:4:import { DollarSign, Users, Package, TrendingUp, AlertTriangle, Clock } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:5:import { getDashboardAnalytics } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:6:import { DashboardAnalytics, Order } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\ReportCharts.tsx:31:export const ReportCharts: React.FC<ReportChartsProps> = ({ analytics: propAnalytics }) => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\SalesTracker.tsx",
    [
      "src\\components\\Dashboard\\Admin\\SalesTracker.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\SalesTracker.tsx:2:import { DollarSign, TrendingUp, ShoppingCart, Users, Calendar } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\SalesTracker.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\SalesTracker.tsx:19:export const SalesTracker: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:2:import { Settings, Globe, Mail, Shield, CreditCard, Save, AlertCircle, Eye, EyeOff, Search, Download, Upload, RotateCcw } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:6:import { EnhancedButton } from '../../Common/EnhancedButton';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:7:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:8:import { AdminErrorBoundary } from '../../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:33:export const SettingsManagement: React.FC = () => {\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:66:  const [importFile, setImportFile] = useState<File | null>(null);\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:181:    if (!importFile) return;\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:184:      const text = await importFile.text();\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:185:      let importedData;\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:187:      if (importFile.type === 'application/json') {\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:188:        importedData = JSON.parse(text);\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:190:        // Handle CSV import\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:192:        importedData = {};\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:196:            importedData[key] = value;\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:204:        if (importedData[key] !== undefined) {\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:205:          validatedSettings[key as keyof SystemSettings] = importedData[key];\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:217:        message: 'Settings imported successfully. Please review and save changes.'\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:223:        message: 'Failed to import settings. Please check the file format.'\r",
      "src\\components\\Dashboard\\Admin\\SettingsManagement.tsx:890:                disabled={!importFile}\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx",
    [
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:1:import React, { useState, useMemo } from 'react';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:2:import { motion } from 'framer-motion';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:3:import { Palette, Type, Zap, Monitor, Sun, Contrast, RotateCcw, Download, Eye, Settings, Layout, Smartphone, Tablet } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:4:import { useTheme } from '../../../contexts/ThemeContext';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:5:import { useResponsiveDesign } from '../../../utils/responsiveDesign';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:6:import { ResponsiveContainer, ResponsiveGrid, ResponsiveGridItem } from '../../Layout/ResponsiveLayout';",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:15:  preview: React.ReactNode;",
      "src\\components\\Dashboard\\Admin\\ThemeCustomizationDashboard.tsx:18:export const ThemeCustomizationDashboard: React.FC<ThemeCustomizationDashboardProps> = ({"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx",
    [
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:1:import React, { useState, useEffect, useCallback } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:2:import { Search, Filter, Download, Plus, Edit, Trash2, ChevronLeft, RefreshCw, Save, X, AlertTriangle } from 'lucide-react';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:3:import { supabase } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:4:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:5:import { ErrorFallback } from '../../Common/ErrorFallback';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:6:import { exportTableData, bulkDeleteRecords } from '../../../utils/dataExport';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:7:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\UniversalTableManager.tsx:40:export const UniversalTableManager: React.FC<TableManagerProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx",
    [
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:1:import React, { useState } from 'react';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:2:import { UserPlus, Mail, CheckCircle, AlertCircle, Copy, Send, Eye, EyeOff, ArrowRight, ArrowLeft, User, Shield, Settings } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:3:import { createUser } from '../../../lib/crudOperations';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:4:import { useNotification } from '../../../contexts/NotificationContext';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:5:import { EnhancedButton } from '../../Common/EnhancedButton';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:6:import { Modal } from '../../Common/Modal';",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:23:  icon: React.ReactNode;",
      "src\\components\\Dashboard\\Admin\\UserCreationWorkflow.tsx:33:export const UserCreationWorkflow: React.FC<UserCreationWorkflowProps> = ({"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\UserFormModal.tsx",
    [
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:1:import React from 'react';",
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:2:import { Eye, EyeOff, Mail, User, Phone, Calendar, Shield } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:3:import { Modal } from '../../Common/Modal';",
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:4:import { EnhancedButton } from '../../Common/EnhancedButton';",
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:29:export const UserFormModal: React.FC<UserFormModalProps> = ({",
      "src\\components\\Dashboard\\Admin\\UserFormModal.tsx:41:  const handleSubmit = (e: React.FormEvent) => {"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\UserManagement.tsx",
    [
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:2:import { getAllUsers, updateUserRole, deleteUsersBulk, updateUsersBulk } from '../../../lib/supabase';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:3:import { createUser, updateUser, deleteUser } from '../../../lib/crudOperations';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:4:import { User } from '../../../types';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:5:import { LoadingSpinner } from '../../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:6:import { useNotification } from '../../../contexts/NotificationContext';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:7:import { ResponsiveTable } from '../../Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:8:import { EnhancedButton } from '../../Common/EnhancedButton';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:9:import { Modal } from '../../Common/Modal';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:10:import { ImageUpload } from '../../Common/ImageUpload';\r",
      "src\\components\\Dashboard\\Admin\\UserManagement.tsx:12:export const UserManagement: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx",
    [
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:1:import React from 'react';",
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:2:import { Edit, Trash2, CheckCircle, Send, Users } from 'lucide-react';",
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:3:import { User } from '../../../types';",
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:15:  getStatusBadge: (user: User) => React.ReactNode;",
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:16:  getRoleBadge: (role: string) => React.ReactNode;",
      "src\\components\\Dashboard\\Admin\\UserManagementTable.tsx:19:export const UserManagementTable: React.FC<UserManagementTableProps> = ({"
    ]
  ],
  [
    "src\\components\\Dashboard\\AdminDashboard.tsx",
    [
      "src\\components\\Dashboard\\AdminDashboard.tsx:1:import React, { useState, useEffect, useCallback, useMemo, memo, Suspense, lazy } from 'react';\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:2:import {\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:22:import { AdminErrorBoundary } from '../Common/AdminErrorBoundary';\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:23:import { LoadingSpinner } from '../Common/LoadingSpinner';\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:27:  import('./Admin/ComprehensiveAdminDashboard').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:33:  import('./Admin/ProductionUserManagement')\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:37:  import('./Admin/ProductManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:43:  import('./Admin/OrderManager').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:49:  import('./Admin/CategoryManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:55:  import('./Admin/CollectionManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:61:  import('./Admin/CouponManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:67:  import('./Admin/SettingsManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:73:  import('./Admin/AnalyticsDashboard').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:79:  import('./Admin/AdvancedReports').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:85:  import('./Admin/MarketingManagement').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:93:  import('./Admin/AuditLogs').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:99:  import('./Admin/AccessibilityDashboard').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:105:  import('./Admin/ThemeCustomizationDashboard').then(module => ({\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:112:  icon: React.ReactNode;\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:113:  component: React.ComponentType;\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:143:  component: React.ComponentType;\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:157:export const AdminDashboard: React.FC = memo(() => {\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:180:        await import('./Admin/ComprehensiveAdminDashboard');\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:185:            import('./Admin/ProductionUserManagement'),\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:186:            import('./Admin/ProductManagement'),\r",
      "src\\components\\Dashboard\\AdminDashboard.tsx:187:            import('./Admin/OrderManager')\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\CustomerDashboard.tsx",
    [
      "src\\components\\Dashboard\\CustomerDashboard.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:2:import { Package, Heart, CreditCard, MapPin, User, Bell } from 'lucide-react';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:4:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:5:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:6:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:7:import { getOrders } from '../../lib/supabase';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:8:import { Order } from '../../types';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:9:import { ResponsiveTable } from '../../components/Common/ResponsiveTable';\r",
      "src\\components\\Dashboard\\CustomerDashboard.tsx:11:export const CustomerDashboard: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\SellerDashboard.tsx",
    [
      "src\\components\\Dashboard\\SellerDashboard.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:2:import { Package, ShoppingCart, BarChart3, Settings, FileText, TrendingUp, Star, Tag, Megaphone, CreditCard, ChevronLeft, ChevronRight, Home, DollarSign, Plus, Edit, Trash2 } from 'lucide-react';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:3:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:4:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:5:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:6:import { Product } from '../../types';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:7:import { Modal } from '../Common/Modal';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:8:import { ProductForm } from '../Product/ProductForm';\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:11:const SellerOverview: React.FC = () => {\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:67:const SellerAnalytics: React.FC = () => (\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:91:const SellerProductsManagement: React.FC = () => {\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:193:const SellerOrders: React.FC = () => (\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:200:const SellerPromotions: React.FC = () => (\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:218:const SellerReviews: React.FC = () => (\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:225:const SellerSettings: React.FC = () => (\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:246:  icon: React.ReactNode;\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:261:export const SellerDashboard: React.FC = () => {\r",
      "src\\components\\Dashboard\\SellerDashboard.tsx:375:export const SellerDashboardBasic: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Dashboard\\utils\\performanceOptimizations.ts",
    [
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:6:import { useCallback, useRef, useMemo, useEffect } from 'react';",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:25:  deps: React.DependencyList,",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:54:  deps: React.DependencyList",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:78:  deps: React.DependencyList",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:172:  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:184:export const preloadComponent = async (importFn: () => Promise<any>) => {",
      "src\\components\\Dashboard\\utils\\performanceOptimizations.ts:186:    await importFn();"
    ]
  ],
  [
    "src\\components\\Home\\CategorySection.tsx",
    [
      "src\\components\\Home\\CategorySection.tsx:1:import React from 'react';\r",
      "src\\components\\Home\\CategorySection.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Home\\CategorySection.tsx:3:import { ArrowRight } from 'lucide-react';\r",
      "src\\components\\Home\\CategorySection.tsx:4:import { Category } from '../../types';\r",
      "src\\components\\Home\\CategorySection.tsx:10:export const CategorySection: React.FC<CategorySectionProps> = ({ categories }) => {\r"
    ]
  ],
  [
    "src\\components\\Home\\FeaturedProducts.tsx",
    [
      "src\\components\\Home\\FeaturedProducts.tsx:1:import React, { useState, useEffect, memo } from 'react';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:2:import { Product } from '../../types';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:3:import { ProductCard } from '../Product/ProductCard';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:4:import { ProductDetails } from '../Product/ProductDetails';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:5:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:6:import { LoadingSpinner } from '../Common/LoadingSpinner';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:7:import { MobileFeaturedCarousel } from '../Mobile/MobileProductCarousel';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:8:import { useMobileDetection } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Home\\FeaturedProducts.tsx:11:export const FeaturedProducts: React.FC = memo(() => {\r"
    ]
  ],
  [
    "src\\components\\Home\\Hero.tsx",
    [
      "src\\components\\Home\\Hero.tsx:1:import React, { useState, useEffect, useRef } from 'react';\r",
      "src\\components\\Home\\Hero.tsx:2:import { ArrowRight, ShieldCheck, Truck, RefreshCw } from 'lucide-react';\r",
      "src\\components\\Home\\Hero.tsx:3:import { Link } from 'react-router-dom';\r",
      "src\\components\\Home\\Hero.tsx:5:export const Hero: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Home\\NewsletterSection.tsx",
    [
      "src\\components\\Home\\NewsletterSection.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Home\\NewsletterSection.tsx:2:import { Mail, CheckCircle } from 'lucide-react';\r",
      "src\\components\\Home\\NewsletterSection.tsx:3:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Home\\NewsletterSection.tsx:5:export const NewsletterSection: React.FC = () => {\r",
      "src\\components\\Home\\NewsletterSection.tsx:10:  const handleSubmit = (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Home\\PromoBanner.tsx",
    [
      "src\\components\\Home\\PromoBanner.tsx:1:import React from 'react';\r",
      "src\\components\\Home\\PromoBanner.tsx:2:import { ArrowRight, Gift, Clock, Truck, Shield } from 'lucide-react';\r",
      "src\\components\\Home\\PromoBanner.tsx:3:import { Link } from 'react-router-dom';\r",
      "src\\components\\Home\\PromoBanner.tsx:5:export const PromoBanner: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Home\\RecentlyViewed.tsx",
    [
      "src\\components\\Home\\RecentlyViewed.tsx:1:import React from 'react';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:3:import { Eye, ArrowRight, X } from 'lucide-react';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:4:import { Link } from 'react-router-dom';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:5:import { useRecommendations } from '../../contexts/RecommendationsContext';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:6:import { ProductRecommendations } from '../Product/ProductRecommendations';\r",
      "src\\components\\Home\\RecentlyViewed.tsx:15:export const RecentlyViewed: React.FC<RecentlyViewedProps> = ({\r",
      "src\\components\\Home\\RecentlyViewed.tsx:92:export const RecentlyViewedCompact: React.FC<{\r"
    ]
  ],
  [
    "src\\components\\Home\\Testimonials.tsx",
    [
      "src\\components\\Home\\Testimonials.tsx:1:import React, { useState, useRef, useEffect } from 'react';\r",
      "src\\components\\Home\\Testimonials.tsx:2:import { Star, Quote, ChevronLeft, ChevronRight } from 'lucide-react';\r",
      "src\\components\\Home\\Testimonials.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Home\\Testimonials.tsx:4:import { useSwipeGesture } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Home\\Testimonials.tsx:5:import { SafeImage } from '../Common/MediaErrorHandler';\r",
      "src\\components\\Home\\Testimonials.tsx:82:const TestimonialCard: React.FC<{ testimonial: typeof testimonialsData[0], isFeatured?: boolean }> = ({\r",
      "src\\components\\Home\\Testimonials.tsx:130:const TestimonialCarousel: React.FC = () => {\r",
      "src\\components\\Home\\Testimonials.tsx:263:export const Testimonials: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Home\\TrendingSection.tsx",
    [
      "src\\components\\Home\\TrendingSection.tsx:1:import React, { useState, memo } from 'react';\r",
      "src\\components\\Home\\TrendingSection.tsx:2:import { TrendingUp, ArrowRight } from 'lucide-react';\r",
      "src\\components\\Home\\TrendingSection.tsx:3:import { Product } from '../../types';\r",
      "src\\components\\Home\\TrendingSection.tsx:4:import { ProductCard } from '../Product/ProductCard';\r",
      "src\\components\\Home\\TrendingSection.tsx:5:import { ProductDetails } from '../Product/ProductDetails';\r",
      "src\\components\\Home\\TrendingSection.tsx:6:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Home\\TrendingSection.tsx:7:import { MobileCompactCarousel } from '../Mobile/MobileProductCarousel';\r",
      "src\\components\\Home\\TrendingSection.tsx:8:import { useMobileDetection } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Home\\TrendingSection.tsx:11:export const TrendingSection: React.FC = memo(() => {\r"
    ]
  ],
  [
    "src\\components\\Home\\TrustSignalsSection.tsx",
    [
      "src\\components\\Home\\TrustSignalsSection.tsx:1:import React from 'react';\r",
      "src\\components\\Home\\TrustSignalsSection.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Home\\TrustSignalsSection.tsx:3:import { Shield, Award, Truck, RefreshCw, CreditCard, Users, CheckCircle, Star } from 'lucide-react';\r",
      "src\\components\\Home\\TrustSignalsSection.tsx:5:export const TrustSignalsSection: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\Breadcrumbs.tsx",
    [
      "src\\components\\Layout\\Breadcrumbs.tsx:1:import React from 'react';\r",
      "src\\components\\Layout\\Breadcrumbs.tsx:2:import { Link, useLocation } from 'react-router-dom';\r",
      "src\\components\\Layout\\Breadcrumbs.tsx:3:import { ChevronRight, Home } from 'lucide-react';\r",
      "src\\components\\Layout\\Breadcrumbs.tsx:16:export const Breadcrumbs: React.FC<BreadcrumbsProps> = ({ items, className = '' }) => {\r",
      "src\\components\\Layout\\Breadcrumbs.tsx:97:  const [breadcrumbs, setBreadcrumbs] = React.useState<BreadcrumbItem[]>([]);\r"
    ]
  ],
  [
    "src\\components\\Layout\\CompareTray.tsx",
    [
      "src\\components\\Layout\\CompareTray.tsx:1:import React from 'react';\r",
      "src\\components\\Layout\\CompareTray.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Layout\\CompareTray.tsx:3:import { X, GitCompare } from 'lucide-react';\r",
      "src\\components\\Layout\\CompareTray.tsx:4:import { useCompare } from '../../contexts/CompareContext';\r",
      "src\\components\\Layout\\CompareTray.tsx:6:export const CompareTray: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\Footer.tsx",
    [
      "src\\components\\Layout\\Footer.tsx:1:import React from 'react';\r",
      "src\\components\\Layout\\Footer.tsx:2:import { Facebook, Twitter, Instagram, Youtube, Mail, Phone, MapPin } from 'lucide-react';\r",
      "src\\components\\Layout\\Footer.tsx:3:import logo from '../../assets/images/logo.png';\r",
      "src\\components\\Layout\\Footer.tsx:5:export const Footer: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\Header.tsx",
    [
      "src\\components\\Layout\\Header.tsx:1:import React, { useState, useEffect, useRef } from 'react';\r",
      "src\\components\\Layout\\Header.tsx:2:import { Link, useLocation, useNavigate } from 'react-router-dom';\r",
      "src\\components\\Layout\\Header.tsx:3:import { Search, ShoppingCart, User, Menu, Heart, LogOut, Settings, Package, ChevronDown, Sparkles } from 'lucide-react';\r",
      "src\\components\\Layout\\Header.tsx:4:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Layout\\Header.tsx:5:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Layout\\Header.tsx:6:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Layout\\Header.tsx:7:import { SearchOverlay } from './SearchOverlay';\r",
      "src\\components\\Layout\\Header.tsx:9:import MobileNavigation from './MobileNavigation';\r",
      "src\\components\\Layout\\Header.tsx:10:import logo from '../../assets/images/optimized/logo-optimized.webp';\r",
      "src\\components\\Layout\\Header.tsx:19:const OptimizedLogo = React.memo(() => {\r",
      "src\\components\\Layout\\Header.tsx:67:export const Header: React.FC<HeaderProps> = ({ onAuthClick, onCartClick }) => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\Layout.tsx",
    [
      "src\\components\\Layout\\Layout.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Layout\\Layout.tsx:2:import { useLocation } from 'react-router-dom';\r",
      "src\\components\\Layout\\Layout.tsx:3:import { Header } from './Header';\r",
      "src\\components\\Layout\\Layout.tsx:4:import { Footer } from './Footer';\r",
      "src\\components\\Layout\\Layout.tsx:5:import { CartSidebar } from '../Cart/CartSidebar';\r",
      "src\\components\\Layout\\Layout.tsx:6:import { CompareTray } from './CompareTray';\r",
      "src\\components\\Layout\\Layout.tsx:10:  children: React.ReactNode;\r",
      "src\\components\\Layout\\Layout.tsx:13:export const Layout: React.FC<LayoutProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\Logo.tsx",
    [
      "src\\components\\Layout\\Logo.tsx:1:import React from 'react';\r",
      "src\\components\\Layout\\Logo.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Layout\\Logo.tsx:3:import logo from '../../assets/images/logo.png';\r",
      "src\\components\\Layout\\Logo.tsx:5:export const Logo: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\MobileNavigation.tsx",
    [
      "src\\components\\Layout\\MobileNavigation.tsx:1:import React, { useState, useEffect, useRef } from 'react';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:2:import { Link, useLocation, useNavigate } from 'react-router-dom';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:3:import { X, Home, Package, Star, Tag, User, ShoppingCart, Heart, ChevronRight, LogOut, Settings, Package as PackageIcon } from 'lucide-react';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:4:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:5:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:6:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:8:import { useSwipeGesture } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Layout\\MobileNavigation.tsx:19:  icon: React.ReactNode;\r",
      "src\\components\\Layout\\MobileNavigation.tsx:27:const MobileNavigation: React.FC<MobileNavigationProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Layout\\NavDropdown.tsx",
    [
      "src\\components\\Layout\\NavDropdown.tsx:1:import React from 'react';\r",
      "src\\components\\Layout\\NavDropdown.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Layout\\NavDropdown.tsx:3:import { ChevronRight } from 'lucide-react';\r",
      "src\\components\\Layout\\NavDropdown.tsx:15:export const NavDropdown: React.FC<NavDropdownProps> = ({ items }) => {\r"
    ]
  ],
  [
    "src\\components\\Layout\\ResponsiveLayout.tsx",
    [
      "src\\components\\Layout\\ResponsiveLayout.tsx:1:import React, { useEffect, useState, useMemo } from 'react';",
      "src\\components\\Layout\\ResponsiveLayout.tsx:2:import { motion } from 'framer-motion';",
      "src\\components\\Layout\\ResponsiveLayout.tsx:3:import { ",
      "src\\components\\Layout\\ResponsiveLayout.tsx:9:import { ",
      "src\\components\\Layout\\ResponsiveLayout.tsx:34:  children: React.ReactNode;",
      "src\\components\\Layout\\ResponsiveLayout.tsx:47:  children: React.ReactNode;",
      "src\\components\\Layout\\ResponsiveLayout.tsx:57:  children: React.ReactNode;",
      "src\\components\\Layout\\ResponsiveLayout.tsx:111:export const ResponsiveLayout: React.FC<ResponsiveLayoutProps> = ({",
      "src\\components\\Layout\\ResponsiveLayout.tsx:257:export const ResponsiveContainer: React.FC<ResponsiveContainerProps> = ({",
      "src\\components\\Layout\\ResponsiveLayout.tsx:268:    const styles: React.CSSProperties = {};",
      "src\\components\\Layout\\ResponsiveLayout.tsx:302:export const ResponsiveGrid: React.FC<{",
      "src\\components\\Layout\\ResponsiveLayout.tsx:303:  children: React.ReactNode;",
      "src\\components\\Layout\\ResponsiveLayout.tsx:312:    const styles: React.CSSProperties = {",
      "src\\components\\Layout\\ResponsiveLayout.tsx:331:export const ResponsiveGridItem: React.FC<ResponsiveGridItemProps> = ({",
      "src\\components\\Layout\\ResponsiveLayout.tsx:347:    const styles: React.CSSProperties = {",
      "src\\components\\Layout\\ResponsiveLayout.tsx:373:export const ResponsiveStack: React.FC<{",
      "src\\components\\Layout\\ResponsiveLayout.tsx:374:  children: React.ReactNode;",
      "src\\components\\Layout\\ResponsiveLayout.tsx:395:    const styles: React.CSSProperties = {",
      "src\\components\\Layout\\ResponsiveLayout.tsx:423:export const ResponsiveAspectRatio: React.FC<{",
      "src\\components\\Layout\\ResponsiveLayout.tsx:424:  children: React.ReactNode;"
    ]
  ],
  [
    "src\\components\\Layout\\SearchOverlay.tsx",
    [
      "src\\components\\Layout\\SearchOverlay.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Layout\\SearchOverlay.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Layout\\SearchOverlay.tsx:3:import { Search, X, TrendingUp } from 'lucide-react';\r",
      "src\\components\\Layout\\SearchOverlay.tsx:5:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Layout\\SearchOverlay.tsx:7:import { Product } from '../../types';\r",
      "src\\components\\Layout\\SearchOverlay.tsx:14:export const SearchOverlay: React.FC<SearchOverlayProps> = ({ isOpen, onClose }) => {\r"
    ]
  ],
  [
    "src\\components\\Mobile\\MobileCheckout.tsx",
    [
      "src\\components\\Mobile\\MobileCheckout.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:3:import { ArrowLeft, ArrowRight, CreditCard, CheckCircle, Lock, Smartphone, Apple } from 'lucide-react';\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:4:import { MobileTouchButton } from './MobileTouchButton';\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:5:import { useMobileDetection } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:12:  children: React.ReactNode;\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:18:export const MobileCheckoutLayout: React.FC<MobileCheckoutProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:90:  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:94:  icon?: React.ComponentType<{ className?: string }>;\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:97:export const MobileFormInput: React.FC<MobileFormInputProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:154:  icon: React.ComponentType<{ className?: string }>;\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:164:export const MobilePaymentSelector: React.FC<MobilePaymentSelectorProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:245:export const MobileStepNavigation: React.FC<MobileStepNavigationProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckout.tsx:289:export const MobileSecurityIndicator: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Mobile\\MobileCheckoutForms.tsx",
    [
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:3:import { \r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:14:import { MobileFormInput, MobileSecurityIndicator } from './MobileCheckout';\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:18:  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:22:export const MobileShippingForm: React.FC<MobileShippingFormProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:166:  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:171:export const MobilePaymentForm: React.FC<MobilePaymentFormProps> = ({\r",
      "src\\components\\Mobile\\MobileCheckoutForms.tsx:311:export const MobileOrderSummary: React.FC<MobileOrderSummaryProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Mobile\\MobileProductCard.tsx",
    [
      "src\\components\\Mobile\\MobileProductCard.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:3:import { Heart, ShoppingCart, Star, GitCompare } from 'lucide-react';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:5:import { Product } from '../../types';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:6:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:7:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:8:import { useCompare } from '../../contexts/CompareContext';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:9:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:10:import { MobileTouchButton, MobileIconButton } from './MobileTouchButton';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:11:import { useSwipeGesture } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:12:import ProductImage from '../Common/ProductImage';\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:19:export const MobileProductCard: React.FC<MobileProductCardProps> = ({\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:47:  const handleAddToCart = (e: React.MouseEvent) => {\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:56:  const handleWishlistToggle = (e: React.MouseEvent) => {\r",
      "src\\components\\Mobile\\MobileProductCard.tsx:66:  const handleCompareToggle = (e: React.MouseEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Mobile\\MobileProductCarousel.tsx",
    [
      "src\\components\\Mobile\\MobileProductCarousel.tsx:1:import React, { useState, useRef, useEffect } from 'react';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:2:import { ChevronLeft, ChevronRight } from 'lucide-react';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:3:// Removed framer-motion imports\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:4:import { Product } from '../../types';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:5:import { MobileProductCard } from './MobileProductCard';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:6:import { MobileIconButton } from './MobileTouchButton';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:7:import { useSwipeGesture } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:19:export const MobileProductCarousel: React.FC<MobileProductCarouselProps> = ({\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:171:export const MobileFeaturedCarousel: React.FC<{\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:190:export const MobileCompactCarousel: React.FC<{\r",
      "src\\components\\Mobile\\MobileProductCarousel.tsx:213:export const MobileProductGrid: React.FC<MobileProductGridProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Mobile\\MobileTouchButton.tsx",
    [
      "src\\components\\Mobile\\MobileTouchButton.tsx:1:import React from 'react';\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:3:import { LucideIcon } from 'lucide-react';\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:14:  children: React.ReactNode;\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:15:  onClick?: (e: React.MouseEvent) => void;\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:28:export const MobileTouchButton: React.FC<MobileTouchButtonProps> = ({\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:70:  const handleClick = (e: React.MouseEvent) => {\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:110:  onClick?: (e: React.MouseEvent) => void;\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:119:export const MobileIconButton: React.FC<MobileIconButtonProps> = ({\r",
      "src\\components\\Mobile\\MobileTouchButton.tsx:192:export const MobileFAB: React.FC<MobileFABProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx",
    [
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:1:import React, { useState, useEffect, useMemo, useCallback } from 'react';",
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:2:import { motion, AnimatePresence } from 'framer-motion';",
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:3:import { Search, Star, Clock, TrendingUp, Filter, ChevronDown, ChevronRight, MoreHorizontal, Activity } from 'lucide-react';",
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:4:import {",
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:9:import { NavigationItem } from '../../utils/navigationEnhancement';",
      "src\\components\\Navigation\\AdvancedNavigationSidebar.tsx:24:export const AdvancedNavigationSidebar: React.FC<AdvancedNavigationSidebarProps> = ({"
    ]
  ],
  [
    "src\\components\\Navigation\\RouteGuard.tsx",
    [
      "src\\components\\Navigation\\RouteGuard.tsx:1:import React from 'react';",
      "src\\components\\Navigation\\RouteGuard.tsx:5:  children: React.ReactNode;",
      "src\\components\\Navigation\\RouteGuard.tsx:7:  fallback?: React.ReactNode;",
      "src\\components\\Navigation\\RouteGuard.tsx:10:export const RouteGuard: React.FC<RouteGuardProps> = ({ children, requiredRole, fallback }) => {"
    ]
  ],
  [
    "src\\components\\Order\\OrderTracking.tsx",
    [
      "src\\components\\Order\\OrderTracking.tsx:1:import React from 'react';\r",
      "src\\components\\Order\\OrderTracking.tsx:2:import { CheckCircle, Truck, Package, Clock } from 'lucide-react';\r",
      "src\\components\\Order\\OrderTracking.tsx:3:import { TrackingEvent } from '../../types';\r",
      "src\\components\\Order\\OrderTracking.tsx:4:import { motion } from 'framer-motion';\r",
      "src\\components\\Order\\OrderTracking.tsx:10:export const OrderTracking: React.FC<OrderTrackingProps> = ({ history }) => {\r"
    ]
  ],
  [
    "src\\components\\Payment\\RazorpayPayment.tsx",
    [
      "src\\components\\Payment\\RazorpayPayment.tsx:1:import React, { useState } from 'react';",
      "src\\components\\Payment\\RazorpayPayment.tsx:2:import { CreditCard, Smartphone, Building, Wallet, Banknote, Shield, CheckCircle } from 'lucide-react';",
      "src\\components\\Payment\\RazorpayPayment.tsx:3:import { motion } from 'framer-motion';",
      "src\\components\\Payment\\RazorpayPayment.tsx:4:import { useNotification } from '../../contexts/NotificationContext';",
      "src\\components\\Payment\\RazorpayPayment.tsx:5:import { paymentService } from '../../services/paymentService';",
      "src\\components\\Payment\\RazorpayPayment.tsx:6:import { CartItem } from '../../types';",
      "src\\components\\Payment\\RazorpayPayment.tsx:28:export const RazorpayPayment: React.FC<RazorpayPaymentProps> = ({"
    ]
  ],
  [
    "src\\components\\Product\\AdvancedFilters.tsx",
    [
      "src\\components\\Product\\AdvancedFilters.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\AdvancedFilters.tsx:2:import { Filter, X, ChevronDown, ChevronUp, Crown, Sparkles, Clock, DollarSign, Package, MapPin, Flower2, Droplets } from 'lucide-react';\r",
      "src\\components\\Product\\AdvancedFilters.tsx:71:export const AdvancedFilters: React.FC<AdvancedFiltersProps> = ({\r",
      "src\\components\\Product\\AdvancedFilters.tsx:130:    const FilterSection: React.FC<{\r",
      "src\\components\\Product\\AdvancedFilters.tsx:132:        icon: React.ReactNode;\r",
      "src\\components\\Product\\AdvancedFilters.tsx:134:        children: React.ReactNode;\r",
      "src\\components\\Product\\AdvancedFilters.tsx:164:    const QuickFilterButton: React.FC<{\r",
      "src\\components\\Product\\AdvancedFilters.tsx:168:        icon?: React.ReactNode;\r"
    ]
  ],
  [
    "src\\components\\Product\\AttrFilters.tsx",
    [
      "src\\components\\Product\\AttrFilters.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\AttrFilters.tsx:2:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Product\\AttrFilters.tsx:3:import { \r",
      "src\\components\\Product\\AttrFilters.tsx:17:import { Category } from '../../types';\r",
      "src\\components\\Product\\AttrFilters.tsx:89:export const AttrFilters: React.FC<AttrFiltersProps> = ({\r",
      "src\\components\\Product\\AttrFilters.tsx:146:  const FilterSection: React.FC<{\r",
      "src\\components\\Product\\AttrFilters.tsx:148:    icon: React.ReactNode;\r",
      "src\\components\\Product\\AttrFilters.tsx:150:    children: React.ReactNode;\r",
      "src\\components\\Product\\AttrFilters.tsx:190:  const QuickFilterButton: React.FC<{\r",
      "src\\components\\Product\\AttrFilters.tsx:194:    icon?: React.ReactNode;\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductCard.tsx",
    [
      "src\\components\\Product\\ProductCard.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\ProductCard.tsx:2:import { Star, Heart, ShoppingCart, GitCompare } from 'lucide-react';\r",
      "src\\components\\Product\\ProductCard.tsx:3:import { Product } from '../../types';\r",
      "src\\components\\Product\\ProductCard.tsx:4:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Product\\ProductCard.tsx:5:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Product\\ProductCard.tsx:6:import { useCompare } from '../../contexts/CompareContext';\r",
      "src\\components\\Product\\ProductCard.tsx:7:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Product\\ProductCard.tsx:8:import { Link } from 'react-router-dom';\r",
      "src\\components\\Product\\ProductCard.tsx:9:import { dataPreloader } from '../../utils/preloader';\r",
      "src\\components\\Product\\ProductCard.tsx:10:import { MiniTrustIndicators, TrendingIndicator } from '../Trust';\r",
      "src\\components\\Product\\ProductCard.tsx:11:import { useAddToCartWithAuth } from '../../hooks/useAddToCartWithAuth';\r",
      "src\\components\\Product\\ProductCard.tsx:12:import { useAddToWishlistWithAuth } from '../../hooks/useAddToWishlistWithAuth';\r",
      "src\\components\\Product\\ProductCard.tsx:13:import { useAddToCompareWithAuth } from '../../hooks/useAddToCompareWithAuth';\r",
      "src\\components\\Product\\ProductCard.tsx:14:import ProductImage from '../Common/ProductImage';\r",
      "src\\components\\Product\\ProductCard.tsx:20:export const ProductCard: React.FC<ProductCardProps> = ({ product }) => {\r",
      "src\\components\\Product\\ProductCard.tsx:29:  const handleWishlistToggle = (e: React.MouseEvent) => {\r",
      "src\\components\\Product\\ProductCard.tsx:35:  const handleCompareToggle = (e: React.MouseEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductDetails.tsx",
    [
      "src\\components\\Product\\ProductDetails.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\ProductDetails.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Product\\ProductDetails.tsx:3:import { X, Star, Heart, ShoppingCart, Minus, Plus, Share2, Shield, Truck, RotateCcw } from 'lucide-react';\r",
      "src\\components\\Product\\ProductDetails.tsx:4:import { Product } from '../../types';\r",
      "src\\components\\Product\\ProductDetails.tsx:5:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Product\\ProductDetails.tsx:6:import { useAddToCartWithAuth } from '../../hooks/useAddToCartWithAuth';\r",
      "src\\components\\Product\\ProductDetails.tsx:7:import { useAddToWishlistWithAuth } from '../../hooks/useAddToWishlistWithAuth';\r",
      "src\\components\\Product\\ProductDetails.tsx:15:export const ProductDetails: React.FC<ProductDetailsProps> = ({ product, isOpen, onClose }) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductFilters.tsx",
    [
      "src\\components\\Product\\ProductFilters.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Product\\ProductFilters.tsx:2:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Product\\ProductFilters.tsx:3:import { Filter, X, ChevronDown, ChevronUp, Star, DollarSign, Package, Tag, Shield } from 'lucide-react';\r",
      "src\\components\\Product\\ProductFilters.tsx:4:import { Category } from '../../types';\r",
      "src\\components\\Product\\ProductFilters.tsx:31:export const ProductFilters: React.FC<ProductFiltersProps> = ({\r",
      "src\\components\\Product\\ProductFilters.tsx:87:  const FilterSection: React.FC<{\r",
      "src\\components\\Product\\ProductFilters.tsx:89:    icon: React.ReactNode;\r",
      "src\\components\\Product\\ProductFilters.tsx:91:    children: React.ReactNode;\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductForm.tsx",
    [
      "src\\components\\Product\\ProductForm.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Product\\ProductForm.tsx:2:import { Product } from '../../types';\r",
      "src\\components\\Product\\ProductForm.tsx:3:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Product\\ProductForm.tsx:4:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Product\\ProductForm.tsx:5:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Product\\ProductForm.tsx:6:import { motion } from 'framer-motion';\r",
      "src\\components\\Product\\ProductForm.tsx:13:export const ProductForm: React.FC<ProductFormProps> = ({ product, onClose }) => {\r",
      "src\\components\\Product\\ProductForm.tsx:80:  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r",
      "src\\components\\Product\\ProductForm.tsx:127:const handleSubmit = (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductionProductForm.tsx",
    [
      "src\\components\\Product\\ProductionProductForm.tsx:1:import React, { useState, useCallback, useRef } from 'react';",
      "src\\components\\Product\\ProductionProductForm.tsx:2:import { motion, AnimatePresence } from 'framer-motion';",
      "src\\components\\Product\\ProductionProductForm.tsx:3:import { Save, X, Upload, Video, Tag, DollarSign, Package, Star, Info, Plus, Eye, EyeOff } from 'lucide-react';",
      "src\\components\\Product\\ProductionProductForm.tsx:4:import { useNotification } from '../../contexts/NotificationContext';",
      "src\\components\\Product\\ProductionProductForm.tsx:5:import { useAuth } from '../../contexts/AuthContext';",
      "src\\components\\Product\\ProductionProductForm.tsx:64:export const ProductionProductForm: React.FC<ProductionProductFormProps> = ({",
      "src\\components\\Product\\ProductionProductForm.tsx:178:      const { StorageService } = await import('../../services/storageService');",
      "src\\components\\Product\\ProductionProductForm.tsx:213:  const handleSubmit = useCallback(async (e: React.FormEvent) => {"
    ]
  ],
  [
    "src\\components\\Product\\ProductListCard.tsx",
    [
      "src\\components\\Product\\ProductListCard.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\ProductListCard.tsx:2:import { Star, Heart, ShoppingCart, GitCompare } from 'lucide-react';\r",
      "src\\components\\Product\\ProductListCard.tsx:3:import { Product } from '../../types';\r",
      "src\\components\\Product\\ProductListCard.tsx:4:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Product\\ProductListCard.tsx:5:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Product\\ProductListCard.tsx:6:import { useCompare } from '../../contexts/CompareContext';\r",
      "src\\components\\Product\\ProductListCard.tsx:7:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Product\\ProductListCard.tsx:8:import { Link } from 'react-router-dom';\r",
      "src\\components\\Product\\ProductListCard.tsx:9:import { dataPreloader } from '../../utils/preloader';\r",
      "src\\components\\Product\\ProductListCard.tsx:10:import { MiniTrustIndicators } from '../Trust';\r",
      "src\\components\\Product\\ProductListCard.tsx:16:export const ProductListCard: React.FC<ProductListCardProps> = ({ product }) => {\r",
      "src\\components\\Product\\ProductListCard.tsx:23:  const handleAddToCart = (e: React.MouseEvent) => {\r",
      "src\\components\\Product\\ProductListCard.tsx:32:  const handleWishlistToggle = (e: React.MouseEvent) => {\r",
      "src\\components\\Product\\ProductListCard.tsx:38:  const handleCompareToggle = (e: React.MouseEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductRecommendations.tsx",
    [
      "src\\components\\Product\\ProductRecommendations.tsx:1:import React, { useState, useEffect, useMemo } from 'react';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:3:import {\r",
      "src\\components\\Product\\ProductRecommendations.tsx:13:import { Link } from 'react-router-dom';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:14:import { Product } from '../../types';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:15:import { useProducts } from '../../contexts/ProductContext';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:16:import { useCart } from '../../contexts/CartContext';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:17:import { useWishlist } from '../../contexts/WishlistContext';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:18:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:19:import { MobileCompactCarousel } from '../Mobile/MobileProductCarousel';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:20:import { useMobileDetection } from '../../hooks/useMobileGestures';\r",
      "src\\components\\Product\\ProductRecommendations.tsx:38:export const ProductRecommendations: React.FC<ProductRecommendationsProps> = ({\r",
      "src\\components\\Product\\ProductRecommendations.tsx:208:  const handleAddToCart = (product: Product, e: React.MouseEvent) => {\r",
      "src\\components\\Product\\ProductRecommendations.tsx:219:  const handleWishlistToggle = (product: Product, e: React.MouseEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ProductReview.tsx",
    [
      "src\\components\\Product\\ProductReview.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\ProductReview.tsx:2:import { Star, ThumbsUp, Shield } from 'lucide-react';\r",
      "src\\components\\Product\\ProductReview.tsx:3:import { Review } from '../../types';\r",
      "src\\components\\Product\\ProductReview.tsx:10:export const ProductReview: React.FC<ProductReviewProps> = ({ review, onHelpful }) => {\r"
    ]
  ],
  [
    "src\\components\\Product\\ReviewForm.tsx",
    [
      "src\\components\\Product\\ReviewForm.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Product\\ReviewForm.tsx:2:import { Star, Upload, X } from 'lucide-react';\r",
      "src\\components\\Product\\ReviewForm.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Product\\ReviewForm.tsx:4:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Product\\ReviewForm.tsx:10:export const ReviewForm: React.FC<ReviewFormProps> = ({ onSubmit }) => {\r",
      "src\\components\\Product\\ReviewForm.tsx:18:  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r",
      "src\\components\\Product\\ReviewForm.tsx:37:  const handleSubmit = (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Profile\\SimpleProfilePage.tsx",
    [
      "src\\components\\Profile\\SimpleProfilePage.tsx:1:import React, { useState, useRef } from 'react';\r",
      "src\\components\\Profile\\SimpleProfilePage.tsx:2:import { User, Camera, Edit3, Save, X, LogOut, Package, Heart } from 'lucide-react';\r",
      "src\\components\\Profile\\SimpleProfilePage.tsx:3:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Profile\\SimpleProfilePage.tsx:4:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Profile\\SimpleProfilePage.tsx:21:export const SimpleProfilePage: React.FC = () => {\r",
      "src\\components\\Profile\\SimpleProfilePage.tsx:70:  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Security\\SecurityProvider.tsx",
    [
      "src\\components\\Security\\SecurityProvider.tsx:1:import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';",
      "src\\components\\Security\\SecurityProvider.tsx:2:import { useAuth } from '../../contexts/AuthContext';",
      "src\\components\\Security\\SecurityProvider.tsx:3:import { useNotification } from '../../contexts/NotificationContext';",
      "src\\components\\Security\\SecurityProvider.tsx:26:  children: ReactNode;",
      "src\\components\\Security\\SecurityProvider.tsx:31:export const SecurityProvider: React.FC<SecurityProviderProps> = ({ children }) => {",
      "src\\components\\Security\\SecurityProvider.tsx:70:    if (!isSecure && import.meta.env.MODE === 'production') {",
      "src\\components\\Security\\SecurityProvider.tsx:299:  Component: React.ComponentType<P>,"
    ]
  ],
  [
    "src\\components\\Settings\\AdminSettings.tsx",
    [
      "src\\components\\Settings\\AdminSettings.tsx:1:import React, { useState } from 'react';\r",
      "src\\components\\Settings\\AdminSettings.tsx:2:import { Database, Shield, Globe, Save } from 'lucide-react';\r",
      "src\\components\\Settings\\AdminSettings.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\AdminSettings.tsx:4:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Settings\\AdminSettings.tsx:6:export const AdminSettings: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Settings\\NotificationSettings.tsx",
    [
      "src\\components\\Settings\\NotificationSettings.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:2:import { Bell, Mail, Smartphone, Save, AlertCircle } from 'lucide-react';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:4:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:5:import { getUserPreferences, updateUserPreferences } from '../../lib/supabase';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:6:import { UserPreferences } from '../../types';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:7:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Settings\\NotificationSettings.tsx:9:export const NotificationSettings: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Settings\\PaymentSettings.tsx",
    [
      "src\\components\\Settings\\PaymentSettings.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:2:import { CreditCard, Plus, Edit, Trash2, Star, AlertCircle } from 'lucide-react';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:4:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:5:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:6:import {\r",
      "src\\components\\Settings\\PaymentSettings.tsx:11:import { PaymentMethod } from '../../types';\r",
      "src\\components\\Settings\\PaymentSettings.tsx:13:export const PaymentSettings: React.FC = () => {\r"
    ]
  ],
  [
    "src\\components\\Settings\\ProfileSettings.tsx",
    [
      "src\\components\\Settings\\ProfileSettings.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:2:import { Camera, Save, User, Mail, Phone, Calendar, Check } from 'lucide-react';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:4:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:5:import { updateUserProfile } from '../../lib/supabase';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:6:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Settings\\ProfileSettings.tsx:8:export const ProfileSettings: React.FC = () => {\r",
      "src\\components\\Settings\\ProfileSettings.tsx:77:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r",
      "src\\components\\Settings\\ProfileSettings.tsx:98:  const handleSubmit = async (e: React.FormEvent) => {\r",
      "src\\components\\Settings\\ProfileSettings.tsx:140:  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r"
    ]
  ],
  [
    "src\\components\\Settings\\SecuritySettings.tsx",
    [
      "src\\components\\Settings\\SecuritySettings.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:2:import { Lock, Shield, AlertTriangle, Smartphone, Mail } from 'lucide-react';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:4:import { useAuth } from '../../contexts/AuthContext';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:5:import { useNotification } from '../../contexts/NotificationContext';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:6:import { getUserSecuritySettings, updateUserSecuritySettings } from '../../lib/supabase';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:7:import { UserSecuritySettings } from '../../types';\r",
      "src\\components\\Settings\\SecuritySettings.tsx:9:export const SecuritySettings: React.FC = () => {\r",
      "src\\components\\Settings\\SecuritySettings.tsx:51:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r",
      "src\\components\\Settings\\SecuritySettings.tsx:103:  const handlePasswordChange = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\components\\Settings\\SettingsSection.tsx",
    [
      "src\\components\\Settings\\SettingsSection.tsx:1:import React, { ReactNode } from 'react';\r",
      "src\\components\\Settings\\SettingsSection.tsx:2:import { motion } from 'framer-motion';\r",
      "src\\components\\Settings\\SettingsSection.tsx:3:import { AlertCircle, Check } from 'lucide-react';\r",
      "src\\components\\Settings\\SettingsSection.tsx:8:  icon?: ReactNode;\r",
      "src\\components\\Settings\\SettingsSection.tsx:9:  children: ReactNode;\r",
      "src\\components\\Settings\\SettingsSection.tsx:17:export const SettingsSection: React.FC<SettingsSectionProps> = ({\r",
      "src\\components\\Settings\\SettingsSection.tsx:81:export const SettingsButton: React.FC<{\r",
      "src\\components\\Settings\\SettingsSection.tsx:85:  icon?: ReactNode;\r",
      "src\\components\\Settings\\SettingsSection.tsx:86:  children: ReactNode;\r",
      "src\\components\\Settings\\SettingsSection.tsx:140:export const FormField: React.FC<{\r",
      "src\\components\\Settings\\SettingsSection.tsx:145:  children: ReactNode;\r"
    ]
  ],
  [
    "src\\components\\Trust\\ProductPageTrustSignals.tsx",
    [
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:2:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:3:import { \r",
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:20:export const ProductPageTrustSignals: React.FC<ProductPageTrustSignalsProps> = ({ \r",
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:176:export const RecentPurchaseNotification: React.FC<RecentPurchaseNotificationProps> = ({\r",
      "src\\components\\Trust\\ProductPageTrustSignals.tsx:231:export const UrgencyIndicator: React.FC<UrgencyIndicatorProps> = ({\r"
    ]
  ],
  [
    "src\\components\\Trust\\SocialProof.tsx",
    [
      "src\\components\\Trust\\SocialProof.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\components\\Trust\\SocialProof.tsx:2:import { Eye, ShoppingBag, Users, Star, TrendingUp, Clock } from 'lucide-react';\r",
      "src\\components\\Trust\\SocialProof.tsx:3:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\components\\Trust\\SocialProof.tsx:50:export const SocialProof: React.FC<SocialProofProps> = ({\r",
      "src\\components\\Trust\\SocialProof.tsx:164:export const ReviewSummary: React.FC<{\r",
      "src\\components\\Trust\\SocialProof.tsx:207:export const TrendingIndicator: React.FC<{\r",
      "src\\components\\Trust\\SocialProof.tsx:233:export const StockUrgency: React.FC<{\r"
    ]
  ],
  [
    "src\\components\\Trust\\TrustBadges.tsx",
    [
      "src\\components\\Trust\\TrustBadges.tsx:1:import React from 'react';\r",
      "src\\components\\Trust\\TrustBadges.tsx:2:import { Shield, Lock, CreditCard, Award, CheckCircle, Globe } from 'lucide-react';\r",
      "src\\components\\Trust\\TrustBadges.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Trust\\TrustBadges.tsx:46:export const TrustBadges: React.FC<TrustBadgeProps> = ({ \r",
      "src\\components\\Trust\\TrustBadges.tsx:101:export const SecurityGuarantee: React.FC<{ className?: string }> = ({ className = '' }) => {\r",
      "src\\components\\Trust\\TrustBadges.tsx:149:export const PaymentBadges: React.FC<{ className?: string }> = ({ className = '' }) => {\r",
      "src\\components\\Trust\\TrustBadges.tsx:178:export const CredibilityIndicators: React.FC<{ className?: string }> = ({ className = '' }) => {\r"
    ]
  ],
  [
    "src\\components\\Trust\\TrustSignals.tsx",
    [
      "src\\components\\Trust\\TrustSignals.tsx:1:import React from 'react';\r",
      "src\\components\\Trust\\TrustSignals.tsx:2:import { Shield, Truck, RotateCcw, Headphones, Award, Clock } from 'lucide-react';\r",
      "src\\components\\Trust\\TrustSignals.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\components\\Trust\\TrustSignals.tsx:6:  icon: React.ElementType;\r",
      "src\\components\\Trust\\TrustSignals.tsx:50:export const TrustSignals: React.FC<TrustSignalsProps> = ({\r",
      "src\\components\\Trust\\TrustSignals.tsx:115:export const ProductTrustSignals: React.FC<{ className?: string }> = ({ className = '' }) => {\r",
      "src\\components\\Trust\\TrustSignals.tsx:127:export const CheckoutTrustSignals: React.FC<{ className?: string }> = ({ className = '' }) => {\r",
      "src\\components\\Trust\\TrustSignals.tsx:175:export const HomepageTrustSection: React.FC<{ className?: string }> = ({ className = '' }) => {\r",
      "src\\components\\Trust\\TrustSignals.tsx:227:export const MiniTrustIndicators: React.FC<{ \r"
    ]
  ],
  [
    "src\\contexts\\AddressContext.tsx",
    [
      "src\\contexts\\AddressContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useCallback, useEffect } from 'react';\r",
      "src\\contexts\\AddressContext.tsx:2:import { Address, AddressContextType } from '../types';\r",
      "src\\contexts\\AddressContext.tsx:3:import {\r",
      "src\\contexts\\AddressContext.tsx:10:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\AddressContext.tsx:11:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\AddressContext.tsx:21:export const AddressProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\AuthContext.tsx",
    [
      "src\\contexts\\AuthContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\r",
      "src\\contexts\\AuthContext.tsx:2:import { User, AuthContextType } from '../types';\r",
      "src\\contexts\\AuthContext.tsx:3:import { supabase, getProfileForUser, updateUserProfile } from '../lib/supabase';\r",
      "src\\contexts\\AuthContext.tsx:4:import { createUser } from '../lib/crudOperations';\r",
      "src\\contexts\\AuthContext.tsx:5:import { AuthChangeEvent, Session } from '@supabase/supabase-js';\r",
      "src\\contexts\\AuthContext.tsx:6:import { useError } from './ErrorContext';\r",
      "src\\contexts\\AuthContext.tsx:8:import { MobileAuthView } from '../components/Auth/MobileAuthView';\r",
      "src\\contexts\\AuthContext.tsx:21:  children: ReactNode;\r",
      "src\\contexts\\AuthContext.tsx:24:export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r",
      "src\\contexts\\AuthContext.tsx:54:        if (import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true') {\r",
      "src\\contexts\\AuthContext.tsx:56:          const directLoginRole = import.meta.env.VITE_DIRECT_LOGIN_DEFAULT_ROLE || 'admin';\r",
      "src\\contexts\\AuthContext.tsx:100:        if (import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true' && session?.user) {\r",
      "src\\contexts\\AuthContext.tsx:102:          const directLoginRole = import.meta.env.VITE_DIRECT_LOGIN_DEFAULT_ROLE || 'admin';\r",
      "src\\contexts\\AuthContext.tsx:157:      if (import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true') {\r",
      "src\\contexts\\AuthContext.tsx:159:        const directLoginRole = import.meta.env.VITE_DIRECT_LOGIN_DEFAULT_ROLE || 'admin';\r",
      "src\\contexts\\AuthContext.tsx:247:      const { emailService } = await import('../services/emailService');\r"
    ]
  ],
  [
    "src\\contexts\\AuthModalContext.tsx",
    [
      "src\\contexts\\AuthModalContext.tsx:1:import React, { createContext, useContext, useState, ReactNode } from 'react';\r",
      "src\\contexts\\AuthModalContext.tsx:2:import { createPortal } from 'react-dom';\r",
      "src\\contexts\\AuthModalContext.tsx:3:import { Product } from '../types';\r",
      "src\\contexts\\AuthModalContext.tsx:4:import { AuthModal } from '../components/Auth/AuthModal';\r",
      "src\\contexts\\AuthModalContext.tsx:25:  children: ReactNode;\r",
      "src\\contexts\\AuthModalContext.tsx:28:export const AuthModalProvider: React.FC<AuthModalProviderProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\CartContext.tsx",
    [
      "src\\contexts\\CartContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';\r",
      "src\\contexts\\CartContext.tsx:2:import { CartItem, Product, CartContextType } from '../types';\r",
      "src\\contexts\\CartContext.tsx:3:import {\r",
      "src\\contexts\\CartContext.tsx:10:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\CartContext.tsx:11:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\CartContext.tsx:21:export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\CollectionContext.tsx",
    [
      "src\\contexts\\CollectionContext.tsx:1:import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r",
      "src\\contexts\\CollectionContext.tsx:2:import { Collection } from '../types';\r",
      "src\\contexts\\CollectionContext.tsx:3:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\CollectionContext.tsx:151:  children: ReactNode;\r",
      "src\\contexts\\CollectionContext.tsx:154:export const CollectionProvider: React.FC<CollectionProviderProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\CombinedProvider.tsx",
    [
      "src\\contexts\\CombinedProvider.tsx:1:import React, { memo, ReactNode } from 'react';\r",
      "src\\contexts\\CombinedProvider.tsx:2:import { AuthProvider } from './AuthContext';\r",
      "src\\contexts\\CombinedProvider.tsx:3:import { CartProvider } from './CartContext';\r",
      "src\\contexts\\CombinedProvider.tsx:4:import { WishlistProvider } from './WishlistContext';\r",
      "src\\contexts\\CombinedProvider.tsx:5:import { NotificationProvider } from './NotificationContext';\r",
      "src\\contexts\\CombinedProvider.tsx:6:import { ProductProvider } from './ProductContext';\r",
      "src\\contexts\\CombinedProvider.tsx:7:import { CollectionProvider } from './CollectionContext';\r",
      "src\\contexts\\CombinedProvider.tsx:8:import { CompareProvider } from './CompareContext';\r",
      "src\\contexts\\CombinedProvider.tsx:9:import { ErrorProvider } from './ErrorContext';\r",
      "src\\contexts\\CombinedProvider.tsx:10:import { OrderProvider } from './OrderContext';\r",
      "src\\contexts\\CombinedProvider.tsx:11:import { AddressProvider } from './AddressContext';\r",
      "src\\contexts\\CombinedProvider.tsx:12:import { RecommendationsProvider } from './RecommendationsContext';\r",
      "src\\contexts\\CombinedProvider.tsx:13:import { ThemeProvider } from './ThemeContext';\r",
      "src\\contexts\\CombinedProvider.tsx:14:import { AuthModalProvider } from './AuthModalContext';\r",
      "src\\contexts\\CombinedProvider.tsx:16:import { SecurityProvider } from '../components/Security/SecurityProvider';\r",
      "src\\contexts\\CombinedProvider.tsx:19:    children: ReactNode;\r"
    ]
  ],
  [
    "src\\contexts\\CompareContext.tsx",
    [
      "src\\contexts\\CompareContext.tsx:1:import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\r",
      "src\\contexts\\CompareContext.tsx:2:import { Product, CompareContextType } from '../types';\r",
      "src\\contexts\\CompareContext.tsx:3:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\CompareContext.tsx:4:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\CompareContext.tsx:17:  children: ReactNode;\r",
      "src\\contexts\\CompareContext.tsx:20:export const CompareProvider: React.FC<CompareProviderProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\ErrorContext.tsx",
    [
      "src\\contexts\\ErrorContext.tsx:1:import React, { createContext, useContext, useState, ReactNode } from 'react';\r",
      "src\\contexts\\ErrorContext.tsx:17:export const ErrorProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\GlobalStateManager.tsx",
    [
      "src\\contexts\\GlobalStateManager.tsx:1:import React, { createContext, useContext, ReactNode, useReducer, useCallback, useMemo, useEffect } from 'react';",
      "src\\contexts\\GlobalStateManager.tsx:2:import { User, Product, Category, CartItem, Order } from '../types';",
      "src\\contexts\\GlobalStateManager.tsx:3:import { useNormalizedState, useBatchedUpdates } from '../utils/stateManagement';",
      "src\\contexts\\GlobalStateManager.tsx:4:import { primaryCache } from '../utils/cache';",
      "src\\contexts\\GlobalStateManager.tsx:294:  children: ReactNode;",
      "src\\contexts\\GlobalStateManager.tsx:297:export const GlobalStateProvider: React.FC<GlobalStateProviderProps> = ({ children }) => {"
    ]
  ],
  [
    "src\\contexts\\NotificationContext.tsx",
    [
      "src\\contexts\\NotificationContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useEffect, useRef } from 'react';\r",
      "src\\contexts\\NotificationContext.tsx:2:import { CheckCircle, AlertTriangle, Info, X, AlertCircle } from 'lucide-react';\r",
      "src\\contexts\\NotificationContext.tsx:3:import { AppError, handleSupabaseError } from '../utils/errorHandling';\r",
      "src\\contexts\\NotificationContext.tsx:35:  children: ReactNode;\r",
      "src\\contexts\\NotificationContext.tsx:38:export const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\r",
      "src\\contexts\\NotificationContext.tsx:157:  const ToastNotification: React.FC<{ notification: Notification }> = ({ notification }) => {\r"
    ]
  ],
  [
    "src\\contexts\\OrderContext.tsx",
    [
      "src\\contexts\\OrderContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useCallback, useEffect } from 'react';\r",
      "src\\contexts\\OrderContext.tsx:2:import { Order, CartItem, Address, OrderContextType } from '../types';\r",
      "src\\contexts\\OrderContext.tsx:3:import {\r",
      "src\\contexts\\OrderContext.tsx:9:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\OrderContext.tsx:10:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\OrderContext.tsx:20:export const OrderProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\ProductContext.tsx",
    [
      "src\\contexts\\ProductContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback, useMemo, memo } from 'react';\r",
      "src\\contexts\\ProductContext.tsx:2:import { Product, ProductContextType, Review, Category } from '../types';\r",
      "src\\contexts\\ProductContext.tsx:3:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\ProductContext.tsx:4:import {\r",
      "src\\contexts\\ProductContext.tsx:13:import {\r",
      "src\\contexts\\ProductContext.tsx:21:import { useError } from './ErrorContext';\r",
      "src\\contexts\\ProductContext.tsx:22:import { productCache, categoryCache, generateCacheKey, invalidateProductCache, invalidateCategoryCache } from '../utils/cache';\r",
      "src\\contexts\\ProductContext.tsx:32:export const ProductProvider: React.FC<{ children: ReactNode }> = memo(({ children }) => {\r",
      "src\\contexts\\ProductContext.tsx:85:      const { testDirectRestAPI } = await import('../lib/supabase');\r"
    ]
  ],
  [
    "src\\contexts\\RecommendationsContext.tsx",
    [
      "src\\contexts\\RecommendationsContext.tsx:1:import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r",
      "src\\contexts\\RecommendationsContext.tsx:2:import { Product } from '../types';\r",
      "src\\contexts\\RecommendationsContext.tsx:3:import { useProducts } from './ProductContext';\r",
      "src\\contexts\\RecommendationsContext.tsx:4:import { recentlyViewedService } from '../services/recentlyViewedService';\r",
      "src\\contexts\\RecommendationsContext.tsx:43:  children: ReactNode;\r",
      "src\\contexts\\RecommendationsContext.tsx:46:export const RecommendationsProvider: React.FC<RecommendationsProviderProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\ThemeContext.tsx",
    [
      "src\\contexts\\ThemeContext.tsx:1:import React, { createContext, useContext, ReactNode, useEffect } from 'react';\r",
      "src\\contexts\\ThemeContext.tsx:2:import {\r",
      "src\\contexts\\ThemeContext.tsx:67:  children: ReactNode;\r",
      "src\\contexts\\ThemeContext.tsx:70:export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\contexts\\WishlistContext.tsx",
    [
      "src\\contexts\\WishlistContext.tsx:1:import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';\r",
      "src\\contexts\\WishlistContext.tsx:2:import { Product, WishlistItem, WishlistContextType } from '../types';\r",
      "src\\contexts\\WishlistContext.tsx:3:import {\r",
      "src\\contexts\\WishlistContext.tsx:8:import { useAuth } from './AuthContext';\r",
      "src\\contexts\\WishlistContext.tsx:9:import { useNotification } from './NotificationContext';\r",
      "src\\contexts\\WishlistContext.tsx:19:export const WishlistProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r"
    ]
  ],
  [
    "src\\hooks\\useAddToCartWithAuth.ts",
    [
      "src\\hooks\\useAddToCartWithAuth.ts:1:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\hooks\\useAddToCartWithAuth.ts:2:import { useCart } from '../contexts/CartContext';\r",
      "src\\hooks\\useAddToCartWithAuth.ts:3:import { useAuthModal } from '../contexts/AuthModalContext';\r",
      "src\\hooks\\useAddToCartWithAuth.ts:4:import { Product } from '../types';\r"
    ]
  ],
  [
    "src\\hooks\\useAddToCompareWithAuth.ts",
    [
      "src\\hooks\\useAddToCompareWithAuth.ts:1:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\hooks\\useAddToCompareWithAuth.ts:2:import { useCompare } from '../contexts/CompareContext';\r",
      "src\\hooks\\useAddToCompareWithAuth.ts:3:import { useAuthModal } from '../contexts/AuthModalContext';\r",
      "src\\hooks\\useAddToCompareWithAuth.ts:4:import { Product } from '../types';\r"
    ]
  ],
  [
    "src\\hooks\\useAddToWishlistWithAuth.ts",
    [
      "src\\hooks\\useAddToWishlistWithAuth.ts:1:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\hooks\\useAddToWishlistWithAuth.ts:2:import { useWishlist } from '../contexts/WishlistContext';\r",
      "src\\hooks\\useAddToWishlistWithAuth.ts:3:import { useAuthModal } from '../contexts/AuthModalContext';\r",
      "src\\hooks\\useAddToWishlistWithAuth.ts:4:import { Product } from '../types';\r"
    ]
  ],
  [
    "src\\hooks\\useDataLayer.ts",
    [
      "src\\hooks\\useDataLayer.ts:1:import { useState, useEffect, useCallback, useRef } from 'react';",
      "src\\hooks\\useDataLayer.ts:2:import { dataLayer, DataLayerResponse, QueryOptions, MutationOptions } from '../utils/dataLayer';",
      "src\\hooks\\useDataLayer.ts:3:import { optimisticUpdates } from '../utils/optimisticUpdates';",
      "src\\hooks\\useDataLayer.ts:4:import { offlineSync } from '../utils/offlineSync';"
    ]
  ],
  [
    "src\\hooks\\useMemoryCleanup.ts",
    [
      "src\\hooks\\useMemoryCleanup.ts:1:import React, { useEffect, useRef, useCallback } from 'react';\r",
      "src\\hooks\\useMemoryCleanup.ts:229:  const [state, setState] = React.useState(initialState);\r"
    ]
  ],
  [
    "src\\hooks\\useMobileGestures.ts",
    [
      "src\\hooks\\useMobileGestures.ts:1:import { useState, useCallback, useRef, useEffect } from 'react';\r",
      "src\\hooks\\useMobileGestures.ts:2:import { useMemoryCleanup } from './useMemoryCleanup';\r",
      "src\\hooks\\useMobileGestures.ts:3:import { performanceMonitor } from '../utils/performance';\r",
      "src\\hooks\\useMobileGestures.ts:58:  const onTouchStart = useCallback((e: React.TouchEvent) => {\r",
      "src\\hooks\\useMobileGestures.ts:70:  const onTouchMove = useCallback(throttle((e: React.TouchEvent) => {\r",
      "src\\hooks\\useMobileGestures.ts:177:  const start = useCallback((e: React.TouchEvent | React.MouseEvent) => {\r",
      "src\\hooks\\useMobileGestures.ts:213:    onContextMenu: (e: React.MouseEvent) => e.preventDefault(), // Prevent context menu\r",
      "src\\hooks\\useMobileGestures.ts:248:  const onTouchStart = useCallback((e: React.TouchEvent) => {\r",
      "src\\hooks\\useMobileGestures.ts:257:  const onTouchMove = useCallback(throttle((e: React.TouchEvent) => {\r"
    ]
  ],
  [
    "src\\hooks\\useNetworkStatus.ts",
    [
      "src\\hooks\\useNetworkStatus.ts:1:import React from 'react';\r",
      "src\\hooks\\useNetworkStatus.ts:5:  const [isOnline, setIsOnline] = React.useState(navigator.onLine);\r",
      "src\\hooks\\useNetworkStatus.ts:7:  React.useEffect(() => {\r"
    ]
  ],
  [
    "src\\hooks\\useSocialAuth.ts",
    [
      "src\\hooks\\useSocialAuth.ts:1:import React from 'react';\r",
      "src\\hooks\\useSocialAuth.ts:2:import { supabase } from '../lib/supabase';\r",
      "src\\hooks\\useSocialAuth.ts:3:import { useNotification } from '../contexts/NotificationContext';\r",
      "src\\hooks\\useSocialAuth.ts:7:  const [loading, setLoading] = React.useState(false);\r",
      "src\\hooks\\useSocialAuth.ts:8:  const [error, setError] = React.useState<string | null>(null);\r"
    ]
  ],
  [
    "src\\lib\\crudOperations.ts",
    [
      "src\\lib\\crudOperations.ts:1:import { supabase } from './supabase';",
      "src\\lib\\crudOperations.ts:2:import { User, Product, Category, Order } from '../types';"
    ]
  ],
  [
    "src\\lib\\supabase.ts",
    [
      "src\\lib\\supabase.ts:1:import { createClient } from '@supabase/supabase-js';",
      "src\\lib\\supabase.ts:2:import { createRetryableAction } from '../utils/errorHandling';",
      "src\\lib\\supabase.ts:3:import { performanceMonitor } from '../utils/performance';",
      "src\\lib\\supabase.ts:4:import { validateSellerId, validateAndFixStoredUser } from '../utils/uuidValidation';",
      "src\\lib\\supabase.ts:5:import {",
      "src\\lib\\supabase.ts:19:const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;",
      "src\\lib\\supabase.ts:20:const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;",
      "src\\lib\\supabase.ts:21:const appEnv = import.meta.env.VITE_APP_ENV || 'development';",
      "src\\lib\\supabase.ts:78:    if (import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true') {",
      "src\\lib\\supabase.ts:86:    if (import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true') {"
    ]
  ],
  [
    "src\\main.tsx",
    [
      "src\\main.tsx:1:import { StrictMode } from 'react';\r",
      "src\\main.tsx:2:import { createRoot } from 'react-dom/client';\r",
      "src\\main.tsx:3:import App from './App.tsx';\r",
      "src\\main.tsx:4:import './index.css';\r",
      "src\\main.tsx:7:import './utils/serviceWorker.ts';\r"
    ]
  ],
  [
    "src\\pages\\AuthPage.tsx",
    [
      "src\\pages\\AuthPage.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\pages\\AuthPage.tsx:2:import { useNavigate, useLocation } from 'react-router-dom';\r",
      "src\\pages\\AuthPage.tsx:3:import {\r",
      "src\\pages\\AuthPage.tsx:7:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\pages\\AuthPage.tsx:8:import { useNotification } from '../contexts/NotificationContext';\r",
      "src\\pages\\AuthPage.tsx:23:const AuthPage: React.FC = () => {\r",
      "src\\pages\\AuthPage.tsx:111:  const handleSubmit = async (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\pages\\CategoriesPage.tsx",
    [
      "src\\pages\\CategoriesPage.tsx:1:import React from 'react';\r",
      "src\\pages\\CategoriesPage.tsx:2:import { useProducts } from '../contexts/ProductContext';\r",
      "src\\pages\\CategoriesPage.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\pages\\CategoriesPage.tsx:4:import { Grid } from 'lucide-react';\r",
      "src\\pages\\CategoriesPage.tsx:5:import { CategoryDisplayCard } from '../components/Category/CategoryDisplayCard';\r",
      "src\\pages\\CategoriesPage.tsx:7:export const CategoriesPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\CheckoutPage.tsx",
    [
      "src\\pages\\CheckoutPage.tsx:1:import React, { useState } from 'react';\r",
      "src\\pages\\CheckoutPage.tsx:2:import { CreditCard, MapPin, Package, ArrowLeft, CheckCircle } from 'lucide-react';\r",
      "src\\pages\\CheckoutPage.tsx:3:import { useCart } from '../contexts/CartContext';\r",
      "src\\pages\\CheckoutPage.tsx:4:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\pages\\CheckoutPage.tsx:5:import { useOrders } from '../contexts/OrderContext';\r",
      "src\\pages\\CheckoutPage.tsx:6:import { createGuestOrder } from '../lib/supabase';\r",
      "src\\pages\\CheckoutPage.tsx:7:import { motion } from 'framer-motion';\r",
      "src\\pages\\CheckoutPage.tsx:8:import { useNotification } from '../contexts/NotificationContext';\r",
      "src\\pages\\CheckoutPage.tsx:9:import { Link } from 'react-router-dom';\r",
      "src\\pages\\CheckoutPage.tsx:10:import {\r",
      "src\\pages\\CheckoutPage.tsx:16:import {\r",
      "src\\pages\\CheckoutPage.tsx:21:import {\r",
      "src\\pages\\CheckoutPage.tsx:26:import { useMobileDetection } from '../hooks/useMobileGestures';\r",
      "src\\pages\\CheckoutPage.tsx:27:import { RazorpayPayment } from '../components/Payment/RazorpayPayment';\r",
      "src\\pages\\CheckoutPage.tsx:28:import { emailService } from '../services/emailService';\r",
      "src\\pages\\CheckoutPage.tsx:30:export const CheckoutPage: React.FC = () => {\r",
      "src\\pages\\CheckoutPage.tsx:73:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r"
    ]
  ],
  [
    "src\\pages\\CollectionsPage.tsx",
    [
      "src\\pages\\CollectionsPage.tsx:1:import React, { useState, useMemo } from 'react';\r",
      "src\\pages\\CollectionsPage.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\pages\\CollectionsPage.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\pages\\CollectionsPage.tsx:4:import { Search, Filter, Grid, List, ArrowRight, Calendar, Tag, Star, Crown, Gift, Zap, Award, Sparkles } from 'lucide-react';\r",
      "src\\pages\\CollectionsPage.tsx:5:import { useCollections } from '../contexts/CollectionContext';\r",
      "src\\pages\\CollectionsPage.tsx:6:import { Collection } from '../types';\r",
      "src\\pages\\CollectionsPage.tsx:7:import { LoadingSpinner } from '../components/Common/LoadingSpinner';\r",
      "src\\pages\\CollectionsPage.tsx:31:export const CollectionsPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\ComparePage.tsx",
    [
      "src\\pages\\ComparePage.tsx:1:import React from 'react';\r",
      "src\\pages\\ComparePage.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\pages\\ComparePage.tsx:3:import { Star, Check, X, GitCompare, Trash2 } from 'lucide-react';\r",
      "src\\pages\\ComparePage.tsx:4:import { useCompare } from '../contexts/CompareContext';\r",
      "src\\pages\\ComparePage.tsx:5:import { motion } from 'framer-motion';\r",
      "src\\pages\\ComparePage.tsx:7:export const ComparePage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\DashboardPage.tsx",
    [
      "src\\pages\\DashboardPage.tsx:1:import React from 'react';\r",
      "src\\pages\\DashboardPage.tsx:2:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\pages\\DashboardPage.tsx:3:import { AdminDashboard } from '../components/Dashboard/AdminDashboard';\r",
      "src\\pages\\DashboardPage.tsx:4:import { SellerDashboard } from '../components/Dashboard/SellerDashboard';\r",
      "src\\pages\\DashboardPage.tsx:5:import { CustomerDashboard } from '../components/Dashboard/CustomerDashboard';\r",
      "src\\pages\\DashboardPage.tsx:6:import { LoadingSpinner } from '../components/Common/LoadingSpinner';\r",
      "src\\pages\\DashboardPage.tsx:8:export const DashboardPage: React.FC = () => {\r",
      "src\\pages\\DashboardPage.tsx:21:  const isDevelopment = import.meta.env.VITE_APP_ENV === 'development';\r",
      "src\\pages\\DashboardPage.tsx:22:  const allowTestAccess = isDevelopment && import.meta.env.VITE_DIRECT_LOGIN_ENABLED === 'true';\r"
    ]
  ],
  [
    "src\\pages\\DealsPage.tsx",
    [
      "src\\pages\\DealsPage.tsx:1:import React from 'react';\r",
      "src\\pages\\DealsPage.tsx:2:import { useProducts } from '../contexts/ProductContext';\r",
      "src\\pages\\DealsPage.tsx:3:import { ProductCard } from '../components/Product/ProductCard';\r",
      "src\\pages\\DealsPage.tsx:4:import { motion } from 'framer-motion';\r",
      "src\\pages\\DealsPage.tsx:5:import { Tag } from 'lucide-react';\r",
      "src\\pages\\DealsPage.tsx:7:export const DealsPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\HomePage.tsx",
    [
      "src\\pages\\HomePage.tsx:1:import React, { Suspense, lazy, memo, useEffect } from 'react';\r",
      "src\\pages\\HomePage.tsx:2:import { Hero } from '@/components/Home/Hero';\r",
      "src\\pages\\HomePage.tsx:3:import { CategorySection } from '@/components/Home/CategorySection';\r",
      "src\\pages\\HomePage.tsx:4:import { useProducts } from '@/contexts/ProductContext';\r",
      "src\\pages\\HomePage.tsx:5:import { LoadingSpinner } from '@/components/Common/LoadingSpinner';\r",
      "src\\pages\\HomePage.tsx:6:import { performanceMonitor, trackPageNavigation } from '@/utils/performanceMonitor';\r",
      "src\\pages\\HomePage.tsx:8:import { Link } from 'react-router-dom';\r",
      "src\\pages\\HomePage.tsx:9:import { ArrowRight, ShoppingBag, Star, ShieldCheck, Headphones, Zap, Award, Users, CheckCircle, Gift, Globe, Sparkles, Crown } from 'lucide-react';\r",
      "src\\pages\\HomePage.tsx:12:import oudhCollectionBanner from '../assets/images/banners/oudh-collection-banner.jpg';\r",
      "src\\pages\\HomePage.tsx:13:import seasonalAttarsBanner from '../assets/images/banners/seasonal-attars-banner.jpg';\r",
      "src\\pages\\HomePage.tsx:14:import heritageBlendsBanner from '../assets/images/banners/heritage-blends-banner.jpg';\r",
      "src\\pages\\HomePage.tsx:15:import brandStoryImage from '../assets/images/homepage/brand-story.jpg';\r",
      "src\\pages\\HomePage.tsx:18:const FeaturedProducts = lazy(() => import('@/components/Home/FeaturedProducts'));\r",
      "src\\pages\\HomePage.tsx:19:const TrendingSection = lazy(() => import('@/components/Home/TrendingSection'));\r",
      "src\\pages\\HomePage.tsx:20:const Testimonials = lazy(() => import('@/components/Home/Testimonials'));\r",
      "src\\pages\\HomePage.tsx:21:const RecentlyViewed = lazy(() => import('@/components/Home/RecentlyViewed'));\r",
      "src\\pages\\HomePage.tsx:24:const PromotionalBanners: React.FC = memo(() => {\r",
      "src\\pages\\HomePage.tsx:142:const BrandStory: React.FC = memo(() => {\r",
      "src\\pages\\HomePage.tsx:207:const AttractiveProductCarousel: React.FC = memo(() => {\r",
      "src\\pages\\HomePage.tsx:384:const SectionLoader: React.FC<{ text?: string }> = ({ text = \"Loading...\" }) => (\r",
      "src\\pages\\HomePage.tsx:390:export const OptimizedHomePage: React.FC = () => {\r",
      "src\\pages\\HomePage.tsx:434:            {/* Brand Story - important for trust but can be delayed slightly */}\r"
    ]
  ],
  [
    "src\\pages\\NewArrivalsPage.tsx",
    [
      "src\\pages\\NewArrivalsPage.tsx:1:import React from 'react';\r",
      "src\\pages\\NewArrivalsPage.tsx:2:import { useProducts } from '../contexts/ProductContext';\r",
      "src\\pages\\NewArrivalsPage.tsx:3:import { ProductCard } from '../components/Product/ProductCard';\r",
      "src\\pages\\NewArrivalsPage.tsx:4:import { Clock } from 'lucide-react';\r",
      "src\\pages\\NewArrivalsPage.tsx:6:export const NewArrivalsPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\NotFoundPage.tsx",
    [
      "src\\pages\\NotFoundPage.tsx:1:import React from 'react';\r",
      "src\\pages\\NotFoundPage.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\pages\\NotFoundPage.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\pages\\NotFoundPage.tsx:4:import { Home, ArrowLeft, Search, ShoppingBag } from 'lucide-react';\r",
      "src\\pages\\NotFoundPage.tsx:6:export const NotFoundPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\OrdersPage.tsx",
    [
      "src\\pages\\OrdersPage.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\pages\\OrdersPage.tsx:2:import { Link } from 'react-router-dom';\r",
      "src\\pages\\OrdersPage.tsx:3:import { Package, Truck, CheckCircle, Clock, ChevronDown, Edit } from 'lucide-react';\r",
      "src\\pages\\OrdersPage.tsx:4:import { motion, AnimatePresence } from 'framer-motion';\r",
      "src\\pages\\OrdersPage.tsx:5:import { Order } from '../types';\r",
      "src\\pages\\OrdersPage.tsx:6:import { OrderTracking } from '../components/Order/OrderTracking';\r",
      "src\\pages\\OrdersPage.tsx:7:import { useOrders } from '../contexts/OrderContext';\r",
      "src\\pages\\OrdersPage.tsx:8:import { LoadingSpinner } from '../components/Common/LoadingSpinner';\r",
      "src\\pages\\OrdersPage.tsx:10:export const OrdersPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\ProductDetailPage.tsx",
    [
      "src\\pages\\ProductDetailPage.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\pages\\ProductDetailPage.tsx:2:import { useParams } from 'react-router-dom';\r",
      "src\\pages\\ProductDetailPage.tsx:3:import { Heart, ShieldCheck, Truck, RotateCcw, Plus, Minus, MessageSquare, Edit } from 'lucide-react';\r",
      "src\\pages\\ProductDetailPage.tsx:4:import { useProducts } from '../contexts/ProductContext';\r",
      "src\\pages\\ProductDetailPage.tsx:5:import { useCart } from '../contexts/CartContext';\r",
      "src\\pages\\ProductDetailPage.tsx:6:import { useWishlist } from '../contexts/WishlistContext';\r",
      "src\\pages\\ProductDetailPage.tsx:7:import { useRecommendations } from '../contexts/RecommendationsContext';\r",
      "src\\pages\\ProductDetailPage.tsx:8:import { useNotification } from '../contexts/NotificationContext';\r",
      "src\\pages\\ProductDetailPage.tsx:9:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\pages\\ProductDetailPage.tsx:10:import { motion } from 'framer-motion';\r",
      "src\\pages\\ProductDetailPage.tsx:11:import { ProductReview } from '../components/Product/ProductReview';\r",
      "src\\pages\\ProductDetailPage.tsx:12:import { ReviewForm } from '../components/Product/ReviewForm';\r",
      "src\\pages\\ProductDetailPage.tsx:13:import { ProductRecommendations } from '../components/Product/ProductRecommendations';\r",
      "src\\pages\\ProductDetailPage.tsx:14:import { Modal } from '../components/Common/Modal';\r",
      "src\\pages\\ProductDetailPage.tsx:15:import { LoadingSpinner } from '../components/Common/LoadingSpinner';\r",
      "src\\pages\\ProductDetailPage.tsx:16:import { Review } from '../types';\r",
      "src\\pages\\ProductDetailPage.tsx:17:import {\r",
      "src\\pages\\ProductDetailPage.tsx:27:export const ProductDetailPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\ProductionProfilePage.tsx",
    [
      "src\\pages\\ProductionProfilePage.tsx:1:import React, { useState, useEffect, useCallback } from 'react';",
      "src\\pages\\ProductionProfilePage.tsx:2:import { motion, AnimatePresence } from 'framer-motion';",
      "src\\pages\\ProductionProfilePage.tsx:3:import { User, Camera, Edit3, Save, X, LogOut, Package, Heart, Settings, Shield, CreditCard, MapPin, Download, Upload, Trash2, Check, AlertCircle, Phone } from 'lucide-react';",
      "src\\pages\\ProductionProfilePage.tsx:4:import { useAuth } from '../contexts/AuthContext';",
      "src\\pages\\ProductionProfilePage.tsx:5:import { useNotification } from '../contexts/NotificationContext';",
      "src\\pages\\ProductionProfilePage.tsx:6:import { useNetworkStatus } from '../hooks/useNetworkStatus';",
      "src\\pages\\ProductionProfilePage.tsx:7:import { LoadingSpinner } from '../components/Common/LoadingSpinner';",
      "src\\pages\\ProductionProfilePage.tsx:8:import { NetworkStatus } from '../components/Common/ErrorFallback';",
      "src\\pages\\ProductionProfilePage.tsx:67:export const ProductionProfilePage: React.FC = () => {",
      "src\\pages\\ProductionProfilePage.tsx:261:                message: 'You\\'ll receive important updates about your orders.'"
    ]
  ],
  [
    "src\\pages\\ProductsPage.tsx",
    [
      "src\\pages\\ProductsPage.tsx:1:import React, { useState, useMemo, useEffect, useCallback } from 'react';",
      "src\\pages\\ProductsPage.tsx:2:import { useSearchParams, useParams, Link } from 'react-router-dom';",
      "src\\pages\\ProductsPage.tsx:3:import {",
      "src\\pages\\ProductsPage.tsx:27:import { useProducts } from '../contexts/ProductContext';",
      "src\\pages\\ProductsPage.tsx:28:import { useNotification } from '../contexts/NotificationContext';",
      "src\\pages\\ProductsPage.tsx:41:const ProductsPage: React.FC = () => {",
      "src\\pages\\ProductsPage.tsx:523:const ProductCard: React.FC<{",
      "src\\pages\\ProductsPage.tsx:647:const DesktopFilters: React.FC<{",
      "src\\pages\\ProductsPage.tsx:841:const MobileFilters: React.FC<{"
    ]
  ],
  [
    "src\\pages\\SearchPage.tsx",
    [
      "src\\pages\\SearchPage.tsx:1:import React, { useState, useEffect } from 'react';\r",
      "src\\pages\\SearchPage.tsx:2:import { useSearchParams } from 'react-router-dom';\r",
      "src\\pages\\SearchPage.tsx:3:import { Search, Filter, X } from 'lucide-react';\r",
      "src\\pages\\SearchPage.tsx:4:import { ProductCard } from '../components/Product/ProductCard';\r",
      "src\\pages\\SearchPage.tsx:5:import { ProductDetails } from '../components/Product/ProductDetails';\r",
      "src\\pages\\SearchPage.tsx:6:import { useProducts } from '../contexts/ProductContext';\r",
      "src\\pages\\SearchPage.tsx:7:import { Product } from '../types';\r",
      "src\\pages\\SearchPage.tsx:9:export const SearchPage: React.FC = () => {\r",
      "src\\pages\\SearchPage.tsx:33:  const handleSearch = (e: React.FormEvent) => {\r"
    ]
  ],
  [
    "src\\pages\\SettingsPage.tsx",
    [
      "src\\pages\\SettingsPage.tsx:1:import React, { useState } from 'react';\r",
      "src\\pages\\SettingsPage.tsx:2:import { User, MapPin, Bell, Shield, CreditCard } from 'lucide-react';\r",
      "src\\pages\\SettingsPage.tsx:3:import { motion } from 'framer-motion';\r",
      "src\\pages\\SettingsPage.tsx:4:import { ProfileSettings } from '../components/Settings/ProfileSettings';\r",
      "src\\pages\\SettingsPage.tsx:5:import { AddressManagement } from '../components/Address/AddressManagement';\r",
      "src\\pages\\SettingsPage.tsx:6:import { NotificationSettings } from '../components/Settings/NotificationSettings';\r",
      "src\\pages\\SettingsPage.tsx:7:import { SecuritySettings } from '../components/Settings/SecuritySettings';\r",
      "src\\pages\\SettingsPage.tsx:8:import { PaymentSettings } from '../components/Settings/PaymentSettings';\r",
      "src\\pages\\SettingsPage.tsx:9:import { AdminSettings } from '../components/Settings/AdminSettings';\r",
      "src\\pages\\SettingsPage.tsx:10:import { useAuth } from '../contexts/AuthContext';\r",
      "src\\pages\\SettingsPage.tsx:12:export const SettingsPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\pages\\WishlistPage.tsx",
    [
      "src\\pages\\WishlistPage.tsx:1:import React, { useState } from 'react';\r",
      "src\\pages\\WishlistPage.tsx:2:import { Heart, ShoppingCart, Trash2, Share2 } from 'lucide-react';\r",
      "src\\pages\\WishlistPage.tsx:3:import { useWishlist } from '../contexts/WishlistContext';\r",
      "src\\pages\\WishlistPage.tsx:4:import { useCart } from '../contexts/CartContext';\r",
      "src\\pages\\WishlistPage.tsx:5:import { useNotification } from '../contexts/NotificationContext';\r",
      "src\\pages\\WishlistPage.tsx:6:import { ProductCard } from '../components/Product/ProductCard';\r",
      "src\\pages\\WishlistPage.tsx:7:import { ProductDetails } from '../components/Product/ProductDetails';\r",
      "src\\pages\\WishlistPage.tsx:8:import { Product } from '../types';\r",
      "src\\pages\\WishlistPage.tsx:9:import { Link } from 'react-router-dom';\r",
      "src\\pages\\WishlistPage.tsx:11:export const WishlistPage: React.FC = () => {\r"
    ]
  ],
  [
    "src\\services\\backendService.ts",
    [
      "src\\services\\backendService.ts:1:import { supabase } from '../lib/supabase';",
      "src\\services\\backendService.ts:2:import { User, Product, Category } from '../types';"
    ]
  ],
  [
    "src\\services\\emailService.ts",
    [
      "src\\services\\emailService.ts:6:import { supabase } from '../lib/supabase';",
      "src\\services\\emailService.ts:190:      if (import.meta.env.DEV) {"
    ]
  ],
  [
    "src\\services\\orderManagementService.ts",
    [
      "src\\services\\orderManagementService.ts:6:import { supabase } from '../lib/supabase';",
      "src\\services\\orderManagementService.ts:7:import { emailService } from './emailService';",
      "src\\services\\orderManagementService.ts:8:import { Order, CartItem, OrderStatus } from '../types';"
    ]
  ],
  [
    "src\\services\\paymentService.ts",
    [
      "src\\services\\paymentService.ts:6:import { CartItem } from '../types';",
      "src\\services\\paymentService.ts:74:    this.razorpayKeyId = import.meta.env.VITE_RAZORPAY_KEY_ID || '';",
      "src\\services\\paymentService.ts:75:    this.isTestMode = import.meta.env.VITE_APP_ENV !== 'production';",
      "src\\services\\paymentService.ts:104:    const gstRate = parseFloat(import.meta.env.VITE_GST_RATE || '0.18');",
      "src\\services\\paymentService.ts:112:    const freeShippingThreshold = parseFloat(import.meta.env.VITE_FREE_SHIPPING_THRESHOLD || '2000');",
      "src\\services\\paymentService.ts:120:      return parseFloat(import.meta.env.VITE_KASHMIR_SHIPPING_RATE || '50');",
      "src\\services\\paymentService.ts:124:    return parseFloat(import.meta.env.VITE_DOMESTIC_SHIPPING_RATE || '100');"
    ]
  ],
  [
    "src\\services\\recentlyViewedService.ts",
    [
      "src\\services\\recentlyViewedService.ts:1:import { Product } from '../types';\r",
      "src\\services\\recentlyViewedService.ts:237:// Export hook for React components\r"
    ]
  ],
  [
    "src\\utils\\accessibilityEnhancements.tsx",
    [
      "src\\utils\\accessibilityEnhancements.tsx:1:import React, { useEffect, useRef, useState } from 'react';\r",
      "src\\utils\\accessibilityEnhancements.tsx:54:  const handleKeyDown = (event: React.KeyboardEvent) => {\r",
      "src\\utils\\accessibilityEnhancements.tsx:329:export const SkipLink: React.FC<{ href: string; children: React.ReactNode }> = ({\r",
      "src\\utils\\accessibilityEnhancements.tsx:416:  // Skip link is handled by React component, no need to add programmatically\r"
    ]
  ],
  [
    "src\\utils\\accessibilityUtils.ts",
    [
      "src\\utils\\accessibilityUtils.ts:1:import { useEffect, useState, useCallback, useRef } from 'react';",
      "src\\utils\\accessibilityUtils.ts:257:        position: absolute !important;",
      "src\\utils\\accessibilityUtils.ts:258:        width: 1px !important;",
      "src\\utils\\accessibilityUtils.ts:259:        height: 1px !important;",
      "src\\utils\\accessibilityUtils.ts:260:        padding: 0 !important;",
      "src\\utils\\accessibilityUtils.ts:261:        margin: -1px !important;",
      "src\\utils\\accessibilityUtils.ts:262:        overflow: hidden !important;",
      "src\\utils\\accessibilityUtils.ts:263:        clip: rect(0, 0, 0, 0) !important;",
      "src\\utils\\accessibilityUtils.ts:264:        white-space: nowrap !important;",
      "src\\utils\\accessibilityUtils.ts:265:        border: 0 !important;"
    ]
  ],
  [
    "src\\utils\\backgroundRefresh.ts",
    [
      "src\\utils\\backgroundRefresh.ts:5:import { getProductsBasic, getCategories } from '../lib/supabase';\r",
      "src\\utils\\backgroundRefresh.ts:6:import { productCache, categoryCache, generateCacheKey } from './cache';\r",
      "src\\utils\\backgroundRefresh.ts:32:    if (import.meta.env.DEV) {\r",
      "src\\utils\\backgroundRefresh.ts:56:    if (import.meta.env.DEV) {\r",
      "src\\utils\\backgroundRefresh.ts:233:      enabled: !import.meta.env.DEV // Disable in development\r",
      "src\\utils\\backgroundRefresh.ts:238:      enabled: !import.meta.env.DEV // Disable in development\r"
    ]
  ],
  [
    "src\\utils\\database\\init.ts",
    [
      "src\\utils\\database\\init.ts:1:import { supabase } from '../../lib/supabase';",
      "src\\utils\\database\\init.ts:2:import { StorageService } from '../../services/storageService';"
    ]
  ],
  [
    "src\\utils\\database\\monitor.ts",
    [
      "src\\utils\\database\\monitor.ts:1:import { supabase, checkDatabaseConnection, isDatabaseHealthy } from '../lib/supabase';\r",
      "src\\utils\\database\\monitor.ts:2:import { performanceMonitor } from './performance';\r",
      "src\\utils\\database\\monitor.ts:399:if (import.meta.env.VITE_APP_ENV === 'development' && import.meta.env.VITE_DATABASE_HEALTH_CHECKS === 'true') {\r"
    ]
  ],
  [
    "src\\utils\\dataExport.ts",
    [
      "src\\utils\\dataExport.ts:1:import { supabase } from '../lib/supabase';\r",
      "src\\utils\\dataExport.ts:243:export const importFromCSV = async (\r"
    ]
  ],
  [
    "src\\utils\\dataLayer.ts",
    [
      "src\\utils\\dataLayer.ts:1:import { intelligentCache, CACHE_CONFIGS } from './intelligentCaching';",
      "src\\utils\\dataLayer.ts:2:import { offlineSync } from './offlineSync';",
      "src\\utils\\dataLayer.ts:3:import { optimisticUpdates } from './optimisticUpdates';",
      "src\\utils\\dataLayer.ts:4:import { supabase } from '../lib/supabase';",
      "src\\utils\\dataLayer.ts:5:import { performanceMonitor } from './performance';",
      "src\\utils\\dataLayer.ts:567:// Convenience hooks for React components"
    ]
  ],
  [
    "src\\utils\\intelligentCaching.ts",
    [
      "src\\utils\\intelligentCaching.ts:1:import { primaryCache, apiCache, userCache, imageCache } from './cache';",
      "src\\utils\\intelligentCaching.ts:2:import { performanceMonitor } from './performance';"
    ]
  ],
  [
    "src\\utils\\navigationEnhancement.ts",
    [
      "src\\utils\\navigationEnhancement.ts:1:import { useCallback, useEffect, useState, useMemo } from 'react';",
      "src\\utils\\navigationEnhancement.ts:2:import { useLocation, useNavigate } from 'react-router-dom';",
      "src\\utils\\navigationEnhancement.ts:3:import { performanceMonitor } from './performance';",
      "src\\utils\\navigationEnhancement.ts:10:  icon?: React.ReactNode;",
      "src\\utils\\navigationEnhancement.ts:11:  component?: React.ComponentType;",
      "src\\utils\\navigationEnhancement.ts:54:  icon?: React.ReactNode;",
      "src\\utils\\navigationEnhancement.ts:291:      // If component is lazy-loaded, trigger the import"
    ]
  ],
  [
    "src\\utils\\offlineSync.ts",
    [
      "src\\utils\\offlineSync.ts:1:import { intelligentCache } from './intelligentCaching';",
      "src\\utils\\offlineSync.ts:2:import { primaryCache } from './cache';"
    ]
  ],
  [
    "src\\utils\\optimisticUpdates.ts",
    [
      "src\\utils\\optimisticUpdates.ts:1:import { offlineSync } from './offlineSync';",
      "src\\utils\\optimisticUpdates.ts:2:import { intelligentCache } from './intelligentCaching';",
      "src\\utils\\optimisticUpdates.ts:3:import { useNormalizedState } from './stateManagement';"
    ]
  ],
  [
    "src\\utils\\performanceMonitor.ts",
    [
      "src\\utils\\performanceMonitor.ts:4:import React from 'react';\r",
      "src\\utils\\performanceMonitor.ts:196:  // Track React component render times\r",
      "src\\utils\\performanceMonitor.ts:239:// React hook for tracking component performance\r",
      "src\\utils\\performanceMonitor.ts:241:  const trackRender = React.useCallback(() => {\r"
    ]
  ],
  [
    "src\\utils\\preloader.ts",
    [
      "src\\utils\\preloader.ts:5:import { getProductById, getProductsBasic, getCategories } from '../lib/supabase';\r",
      "src\\utils\\preloader.ts:6:import { productCache, categoryCache, generateCacheKey } from './cache';\r"
    ]
  ],
  [
    "src\\utils\\serviceWorker.ts",
    [
      "src\\utils\\serviceWorker.ts:30:    if (import.meta.env.DEV) {\r",
      "src\\utils\\serviceWorker.ts:95:    if (import.meta.env.DEV) {\r",
      "src\\utils\\serviceWorker.ts:130:    if (import.meta.env.DEV) {\r",
      "src\\utils\\serviceWorker.ts:239:    if (import.meta.env.DEV) {\r",
      "src\\utils\\serviceWorker.ts:280:    if (import.meta.env.DEV) {\r",
      "src\\utils\\serviceWorker.ts:305:    if (import.meta.env.DEV) {\r"
    ]
  ],
  [
    "src\\utils\\stateManagement.ts",
    [
      "src\\utils\\stateManagement.ts:1:import { useReducer, useCallback, useMemo, useRef, useEffect } from 'react';",
      "src\\utils\\stateManagement.ts:2:import { Product, User, Category, CartItem, Order } from '../types';",
      "src\\utils\\stateManagement.ts:336:  const Context = React.createContext<T>(defaultValue);",
      "src\\utils\\stateManagement.ts:339:  const ReadContext = React.createContext<T>(defaultValue);",
      "src\\utils\\stateManagement.ts:340:  const WriteContext = React.createContext<T>(defaultValue);",
      "src\\utils\\stateManagement.ts:349:  deps: React.DependencyList = []"
    ]
  ],
  [
    "src\\utils\\withScrollToTop.tsx",
    [
      "src\\utils\\withScrollToTop.tsx:1:import React from 'react';\r",
      "src\\utils\\withScrollToTop.tsx:2:import { useScrollToTop } from '../hooks/useScrollToTop';\r",
      "src\\utils\\withScrollToTop.tsx:9:  Component: React.ComponentType<P>\r",
      "src\\utils\\withScrollToTop.tsx:14:    React.useEffect(() => {\r"
    ]
  ]
]

BUILD VALIDATION: FAILED ❌
Exit Code: 1
Errors: NODE_ENV=production is not supported in the .env file. Only NODE_ENV=development is supported to create a development build of your project. If you need to set process.env.NODE_ENV, you can set it in the Vite config instead.
[31m✗[39m Build failed in 11.01s
[31merror during build:
[31mCould not resolve "../../Common/EnhancedButton" from "src/components/Dashboard/Admin/SettingsManagement.tsx"[31m
file: [36mD:/New_Era 2025/perfumes/src/components/Dashboard/Admin/SettingsManagement.tsx[31m
    at getRollupError (file:///D:/New_Era%202025/perfumes/node_modules/rollup/dist/es/shared/parseAst.js:401:41)
    at error (file:///D:/New_Era%202025/perfumes/node_modules/rollup/dist/es/shared/parseAst.js:397:42)
    at ModuleLoader.handleInvalidResolvedId (file:///D:/New_Era%202025/perfumes/node_modules/rollup/dist/es/shared/node-entry.js:21430:24)
    at file:///D:/New_Era%202025/perfumes/node_modules/rollup/dist/es/shared/node-entry.js:21390:26[39m


OVERALL STATUS: ISSUES NEED FIXING ❌
